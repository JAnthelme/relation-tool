
==================== FINAL INTERFACE ====================
2016-09-03 14:34:34.741903 UTC

interface relat_8Cyn3M6UKgN11sASBif9n4:Algebra 7103
  interface hash: f95da55cc1c13dfe98247af71fffb341
  ABI hash: 68bc6436a52c252ab0874baddf441a15
  export-list hash: d913a7bf91379e7f33b94e50c86c5607
  orphan hash: 583ad2a0212cfd93d3cdccf62709a530
  flag hash: 230817a6fc2dfc377815796bcf7c5f2e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Algebra.extend
  Algebra.group
  Algebra.intersection
  Algebra.join
  Algebra.minus
  Algebra.project
  Algebra.projectaway
  Algebra.restrict
  Algebra.semiJoin
  Algebra.semiMinus
  Algebra.summarize
  Algebra.times
  Algebra.ungroup
  Algebra.union
  Relvar.card
  Relvar.common
  Relvar.dee
  Relvar.dum
  Relvar.elems
  Relvar.elems'
  Relvar.keepLeft
  Relvar.keepRight
  Relvar.relvar
  Relvar.table
  Relvar.tyA
  Relvar.tyB
  Relvar.tyBS
  Relvar.tyC
  Relvar.tyD
  Relvar.tyDD
  Relvar.tyDT
  Relvar.tyI
  Relvar.tyJ
  Relvar.tyR
  Relvar.tyS
  Relvar.tyT
  Relvar.tyT2
  Relvar.tyT3
  Relvar.tyZ
  Relvar.typeRep
  Relvar.types
  Relvar.types'
  Data.Typeable.Internal.TypeRep
  Algebra.OpElem{Algebra.Avg Algebra.Count Algebra.Max Algebra.Min Algebra.Sdev Algebra.Sum Algebra.Var}
  Relvar.Attributes
  Relvar.ColOrder{Relvar.Asc Relvar.Desc}
  Relvar.Elem{Relvar.A Relvar.B Relvar.BS Relvar.C Relvar.D Relvar.DD Relvar.DT Relvar.DW Relvar.I Relvar.J Relvar.Nil Relvar.R Relvar.S Relvar.T Relvar.T2 Relvar.T3}
  Relvar.Elementable{Relvar.fromElem Relvar.toElem}
  Relvar.Relvar{Relvar.Relvar Relvar.attributes Relvar.rdata}
  Relvar.Row
  Relvar.Table{Relvar.Table Relvar.header Relvar.tdata}
  Relvar.LSet.LabelOp|{Relvar.LSet.compatible Relvar.LSet.degree Relvar.LSet.disjoint Relvar.LSet.labels Relvar.LSet.match Relvar.LSet.rename}
module dependencies: Relvar Relvar.LSet
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 681af891dffe392ee938c8b49d69f236
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Relvar c43138de2e31a037b92dfb3f1ff8bcdd
  exports: c77214d0a1ae15d1167f75a2836fdb82
  A 7f1db1f6ec5b2af773cabb5b32739423
  Asc 7d727039fd62c859b3e9fc7d9ecbeb35
  Attributes 92b36af06395478ed32609304cc2e6e5
  B 09884aca53c81c9a8a675173b9059601
  BS 7e9499a92fa6a7c101f156251a58d683
  C 1205911eaf10f5979f8614b3e70e8509
  ColOrder fbde8b2c937abccbc0eea6bc2535c692
  D 94b592089becf58c64fedb3bba3769c6
  DD 63d4393107c0dc06f5ffa5fd369021b0
  DT aabcf5d335ff76901a297621c0e4bade
  DW 993f3216f7621b82fd3d191afb012b6f
  Desc 0611f83175b9cd9b14ade19a71a18d18
  Elem 739ead08fede687ca65196edf4c545f4
  Elementable 53813a3ee68b7cee9701acd995e0e5df
  I 2850aa1e6707f6b46413d053b353592b
  J 1d7f0044079b33c343c066dd1651f2ac
  Nil bbf6812b23170f2f9f6afe07e0fda3ed
  R 25c43790b0e5fc89dd368d744ae1c648
  Relvar 5d50cf0259b73cce0ba6507b243d7614
  Relvar 739ead08fede687ca65196edf4c545f4
  Row 739ead08fede687ca65196edf4c545f4
  S 959b55bc7d4247fe7a618e7b4e801360
  T a2cd3d567b05a3881634e091cb03854c
  T2 480e6440188ff35a98e1ab2a96b311dc
  T3 8749aeb086b70b9bdfcdec6e74920a83
  Table 2fba6637400b15e4e7ba69c2add936bb
  Table d68f3e08edd39812aceff63f53d75233
  attributes f88f723fc1472d57f85d2158e352f7e7
  card d5cad50b3627c7d2861dbcd373092882
  common 950b4a17849d0b15865cf1ca7da8893d
  dee df53ccc7b8be969c0d24661186c25521
  dum c3e073e8fa5ef33016d825848a4ef9c6
  elems e54c19aa41b7a4352a5c97637e95ddb4
  elems' d78ace6adc3bfe6b637caabd68efa7fe
  fromElem 506754fd8ce4ce28175dce92e48b0cd8
  header 1e205cf57b262b4e987e5f3f40a8267e
  keepLeft cfd1cf6a02e0c835dcd5fd7c3b2a5386
  keepRight 61233f2057ef6728f5421bce4f6beb21
  rdata a4b815bb45a08feacc674ce38233c30e
  relvar 5a732440cdeabb63e5f290744040033a
  table 3e714518e88d946b00931d8f624f03e6
  tdata 27c8885d02a6d31374bc1986a1dda559
  toElem 58be4507eb5886e8b0e794556f7f6cec
  tyA 6cf8c41e1bf3fcbbbc69a1e0dcd0b8f5
  tyB 83008f24ed76ab8b5ae16dba9ef5a2c3
  tyBS b258120d34fe47bcada7426e536b3468
  tyC 101d14c580ddd970ab3cac687da0e0e3
  tyD 5032d4846f251b011792ed630ec184de
  tyDD af96fe385cad4f430ee35975c3c5c5eb
  tyDT 801878a4a1344bc170a0f03a333dd95c
  tyI da3f0af4463d5b782303a9e18aea8407
  tyJ c32df67fdfd5a22d340c035e8a045936
  tyR bab86fe3988990a3455616aa00294e73
  tyS 208f4920435b48fffd602528e06bd0c7
  tyT 7d33d8361830b6d3e1087241d3408010
  tyT2 3e3b8d07b4d6212df4e4788ad3c8c419
  tyT3 e08eb71f47475bba102f779009268422
  tyZ 23056910a489f72571bdc353b23d7545
  typeRep 1038cb461d207644d542d44173087977
  types 25f620a3e9fe9ad2ddfaac30dd3fbdca
  types' 9a8774f641ce1b2ecfcdbd3caee16c57
import  -/  Relvar.LSet e65ac2554d77b7defb57213d61690388
  exports: e67b13b4f199227347786d8a9c9bc6fd
  checkLabels e36d687aeae4a0bd4216efa67bc12206
  compatible 73c6c14445e4ab5e4a21fefbfa5ebe44
  compatibleLabels 29d031c43c005493970939c259a7ba4c
  degree 5153e2f41db215d106be2043ac467227
  delete cb9f00d349fe2ebac79b677dee80c6e9
  disjoint 753f7fb2e200dd7355b8f9bc8aeb6e57
  extract 503d3e0aec43b29d350dfb45229d708d
  fromList 90f88d4ac1437cd996580b1fbb0edb30
  insert 87f11dab02b4cbfb40d4da4a5c94e2e8
  labels 0d22c6fd60f0fac3138012859c8b8326
  match 38760ca48b6304124e725c80aa1678df
  project fd7a5bb0dcea278942f76b14d96ac1eb
  projectaway 4d20fe5bd46d8aff342f24dda32cd53c
  rename 466a9187fcf5ff229dfd3a27cfedd747
  toList 7c15979a10a1c65c330677baa81ca6b1
  union c7220d7c82dd5b0bec82946b99ef8654
  values 5a9b121435d07343f80ed3a2b0ce716a
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fEqOpElem :: GHC.Classes.Eq Algebra.OpElem
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Algebra.OpElem Algebra.$fEqOpElem_$c== Algebra.$fEqOpElem_$c/= -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fEqOpElem_$c/= ::
    Algebra.OpElem -> Algebra.OpElem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Algebra.OpElem b :: Algebra.OpElem ->
                 case a of wild {
                   Algebra.Sum
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Sum -> GHC.Types.False }
                   Algebra.Count
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Count -> GHC.Types.False }
                   Algebra.Avg
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Avg -> GHC.Types.False }
                   Algebra.Max
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Max -> GHC.Types.False }
                   Algebra.Min
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Min -> GHC.Types.False }
                   Algebra.Sdev
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Sdev -> GHC.Types.False }
                   Algebra.Var
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Algebra.Var -> GHC.Types.False } }) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fEqOpElem_$c== ::
    Algebra.OpElem -> Algebra.OpElem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Algebra.OpElem ds1 :: Algebra.OpElem ->
                 case ds of wild {
                   Algebra.Sum
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Sum -> GHC.Types.True }
                   Algebra.Count
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Count -> GHC.Types.True }
                   Algebra.Avg
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Avg -> GHC.Types.True }
                   Algebra.Max
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Max -> GHC.Types.True }
                   Algebra.Min
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Min -> GHC.Types.True }
                   Algebra.Sdev
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Sdev -> GHC.Types.True }
                   Algebra.Var
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Algebra.Var -> GHC.Types.True } }) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fShowOpElem :: GHC.Show.Show Algebra.OpElem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Algebra.OpElem
                  Algebra.$fShowOpElem_$cshowsPrec
                  Algebra.$fShowOpElem_$cshow
                  Algebra.$fShowOpElem_$cshowList -}
2f1abb8bba319a84a3baa50cced3e9ce
  $fShowOpElem1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Var"#) -}
7f0be2bbacb03e99581ec992ea3738b8
  $fShowOpElem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sdev"#) -}
b859c99608f8c89b072e0bcdd25751b0
  $fShowOpElem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Min"#) -}
d107d7cedf5ade901b2da226e23ae873
  $fShowOpElem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Max"#) -}
a5172620bcff304abaf53f4fd95a67b9
  $fShowOpElem5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Avg"#) -}
5200f8b3cee6ac147fa08e7856307fcd
  $fShowOpElem6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Count"#) -}
79634addac62c169d6f224a5b59202db
  $fShowOpElem7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Sum"#) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fShowOpElem_$cshow :: Algebra.OpElem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Algebra.OpElem ->
                 Algebra.$fShowOpElem_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fShowOpElem_$cshowList :: [Algebra.OpElem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Algebra.OpElem
                   Algebra.$w$cshowsPrec) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $fShowOpElem_$cshowsPrec ::
    GHC.Types.Int -> Algebra.OpElem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Algebra.OpElem w2 :: GHC.Base.String ->
                 Algebra.$w$cshowsPrec w1 w2) -}
0e76c54e7dba7c3159fa52e90475bfea
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
       Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                     Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Relvar.$fEqRelvar_$s$fEqSet
                     Relvar.$fEqRelvar_$s$fEqSet)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Relvar.$fEqRelvar_$s$fEqSet
                     Relvar.$fEqRelvar_$s$fEqSet) -}
504a578c48ca129dad71f4a7d062be8c
  $s$fEqSet ::
    GHC.Classes.Eq
      (Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set
                       (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                  (Data.Set.Base.$fEqSet_$c==
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Relvar.$fEqRelvar_$s$fEqSet)
                  Algebra.$s$fEqSet_$s$fEqSet_$c/= -}
a1030fefb93a9ba28e545ef17a272a2d
  $s$fEqSet_$s$fEqSet_$c/= ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 GHC.Classes.not
                   (Data.Set.Base.$fEqSet_$c==
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                      Relvar.$fEqRelvar_$s$fEqSet
                      x
                      y)) -}
93c5bc6f95c3601971abfe3627cd41ab
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
       Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                     Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                  Algebra.$s$fOrd(,)_$dEq
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$c>
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                     Algebra.$s$fOrd(,)_$dEq
                     Relvar.$fEqRelvar_$s$fOrdSet
                     Relvar.$fEqRelvar_$s$fOrdSet) -}
37a4eac80ee9eeadf9469e3114c88fc5
  $s$fOrd(,)_$dEq ::
    GHC.Classes.Eq
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
       Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Algebra.$s$fEq(,) -}
7e3ccb44bc3854d92b2e5e36c3487fa2
  $s$fOrdSet ::
    GHC.Classes.Ord
      (Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set
                       (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                  Algebra.$s$fOrdSet_$dEq
                  Algebra.$s$fOrdSet7
                  Algebra.$s$fOrdSet6
                  Algebra.$s$fOrdSet5
                  Algebra.$s$fOrdSet4
                  Algebra.$s$fOrdSet3
                  Algebra.$s$fOrdSet2
                  Algebra.$s$fOrdSet1 -}
052b7c131bc32ad8c54da988256a5c68
  $s$fOrdSet1 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
d126c5ba08a0ce901f3cdb7792945f7c
  $s$fOrdSet2 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
fe555682ae79a42696282f85d658acb4
  $s$fOrdSet3 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
a9a56da989d14256fef5276941398d37
  $s$fOrdSet4 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
00b06a5680269def534069a33801b0bd
  $s$fOrdSet5 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
9aa65ee4fade54722fd309e9b657f01b
  $s$fOrdSet6 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   y :: Data.Set.Base.Set
                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 case GHC.Classes.$w$ccompare14
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                        Relvar.$fEqRelvar_$s$fOrdSet
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           x)
                        (Data.Set.Base.toAscList
                           @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                           y) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
a469e4a40a07ccf2140fa30353edd51a
  $s$fOrdSet7 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ s1 :: Data.Set.Base.Set
                           (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   s2 :: Data.Set.Base.Set
                           (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                 GHC.Classes.$w$ccompare14
                   @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   Relvar.$fEqRelvar_$s$fOrdSet
                   (GHC.Base.build
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                      (\ @ b
                         c :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                              -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB
                         @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                         @ b
                         c
                         n
                         s1))
                   (GHC.Base.build
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                      (\ @ b
                         c :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                              -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB
                         @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                         @ b
                         c
                         n
                         s2))) -}
3b3949332546da0a66e2eda18312dc6e
  $s$fOrdSet_$dEq ::
    GHC.Classes.Eq
      (Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Algebra.$s$fEqSet -}
b7678aa113270ba230bd81ddf05a00d8
  $sfromList ::
    [Data.Set.Base.Set
       (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
    -> Data.Set.Base.Set
         (Data.Set.Base.Set
            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Data.Set.Base.Set
                            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))] ->
                 case ds of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Data.Set.Base.Set
                             (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Base.Bin
                             @ (Data.Set.Base.Set
                                  (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                             1
                             dt
                             (Data.Set.Base.Tip
                                @ (Data.Set.Base.Set
                                     (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                             (Data.Set.Base.Tip
                                @ (Data.Set.Base.Set
                                     (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))) }
                        : ipv ipv1
                        -> case GHC.Classes.$w$ccompare14
                                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                  Relvar.$fEqRelvar_$s$fOrdSet
                                  (Data.Set.Base.toAscList
                                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                     x)
                                  (Data.Set.Base.toAscList
                                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                     ipv) of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Algebra.$sfromList_fromList'1
                                  @ (Data.Set.Base.Set
                                       (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                  Algebra.$s$fOrdSet
                                  (Data.Set.Base.Bin
                                     @ (Data.Set.Base.Set
                                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                     1
                                     dt
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set
                                             (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set
                                             (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))))
                                  wild1 }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Algebra.$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ (Data.Set.Base.Set
                                          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                     1
                                     dt
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set
                                             (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set
                                             (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))))
                                  wild1 } } } }) -}
75e68c05da9a20be0646d1e78f8b0aa6
  $sfromList1 ::
    [(Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
      Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
          Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [(Data.Set.Base.Set
                             (GHC.Base.String, Relvar.Elem),
                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))] ->
                 case ds of wild {
                   []
                   -> Data.Set.Base.Tip
                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { (,) ipv ipv1 ->
                           Data.Set.Base.Bin
                             @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                             1
                             dt
                             (Data.Set.Base.Tip
                                @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                   Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                             (Data.Set.Base.Tip
                                @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                   Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))) }
                        : ipv ipv1
                        -> case x of ww { (,) ww1 ww2 ->
                           case ipv of ww3 { (,) ww4 ww5 ->
                           case GHC.Classes.$w$ccompare14
                                  @ (GHC.Base.String, Relvar.Elem)
                                  Relvar.$fEqRelvar_$s$fOrd(,)
                                  (Algebra.$sfromList_go3
                                     (GHC.Types.[] @ (GHC.Base.String, Relvar.Elem))
                                     ww1)
                                  (Algebra.$sfromList_go2
                                     (GHC.Types.[] @ (GHC.Base.String, Relvar.Elem))
                                     ww4) of wild2 {
                             GHC.Types.LT
                             -> Algebra.$wgo1
                                  1
                                  (Data.Set.Base.Bin
                                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                        Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                     1
                                     ww
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                  wild1
                             GHC.Types.EQ
                             -> case GHC.Classes.$w$ccompare14
                                       @ (GHC.Base.String, Relvar.Elem)
                                       Relvar.$fEqRelvar_$s$fOrd(,)
                                       (Algebra.$sfromList_go1
                                          (GHC.Types.[] @ (GHC.Base.String, Relvar.Elem))
                                          ww2)
                                       (Algebra.$sfromList_go5
                                          (GHC.Types.[] @ (GHC.Base.String, Relvar.Elem))
                                          ww5) of wild3 {
                                  DEFAULT
                                  -> Algebra.$sfromList_fromList'1
                                       @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                          Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                       Algebra.$s$fOrd(,)
                                       (Data.Set.Base.Bin
                                          @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                             Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                          1
                                          ww
                                          (Data.Set.Base.Tip
                                             @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                                Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                          (Data.Set.Base.Tip
                                             @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                                Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                       wild1
                                  GHC.Types.LT
                                  -> Algebra.$wgo1
                                       1
                                       (Data.Set.Base.Bin
                                          @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                             Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                          1
                                          ww
                                          (Data.Set.Base.Tip
                                             @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                                Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                          (Data.Set.Base.Tip
                                             @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                                Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                       wild1 }
                             GHC.Types.GT
                             -> Algebra.$sfromList_fromList'1
                                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                     Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                  Algebra.$s$fOrd(,)
                                  (Data.Set.Base.Bin
                                     @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                        Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                     1
                                     ww
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                     (Data.Set.Base.Tip
                                        @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                           Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                  wild1 } } } } }) -}
d0060589d6548c265ee0bdeb3d0345b8
  $sfromList_fromList'1 ::
    GHC.Classes.Ord a3 =>
    Data.Set.Base.Set a3 -> [a3] -> Data.Set.Base.Set a3
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a3
                   $dOrd1 :: GHC.Classes.Ord a3
                   t0 :: Data.Set.Base.Set a3
                   xs :: [a3] ->
                 letrec {
                   go47 :: Data.Set.Base.Set a3 -> [a3] -> Data.Set.Base.Set a3
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ z :: Data.Set.Base.Set a3 ds2 :: [a3] ->
                     case ds2 of wild2 {
                       [] -> z
                       : x1 xs1
                       -> case Data.Set.Base.insert @ a3 $dOrd1 x1 z of z' { DEFAULT ->
                          go47 z' xs1 } }
                 } in
                 go47 t0 xs) -}
98ddbbb4be71b1e3d3e4765deb070e87
  $sfromList_go1 ::
    [(GHC.Base.String, Relvar.Elem)]
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> [(GHC.Base.String, Relvar.Elem)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
b328a4ee0f5aa74675e635393eab2684
  $sfromList_go2 ::
    [(GHC.Base.String, Relvar.Elem)]
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> [(GHC.Base.String, Relvar.Elem)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
7d7d667b2a526c7d5c0911621f0c7ec8
  $sfromList_go3 ::
    [(GHC.Base.String, Relvar.Elem)]
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> [(GHC.Base.String, Relvar.Elem)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
ca0b6949bf5e897edde1bc6dfdd742f6
  $sfromList_go5 ::
    [(GHC.Base.String, Relvar.Elem)]
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> [(GHC.Base.String, Relvar.Elem)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
5485aba70b1792ba4038b5bc01ef2eef
  $smember_go5 ::
    Relvar.LSet.LSet Relvar.Elem
    -> Data.Set.Base.Set (Relvar.LSet.LSet Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  $w$cshowsPrec ::
    Algebra.OpElem -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Algebra.OpElem w1 :: GHC.Base.String ->
                 case w of wild {
                   Algebra.Sum
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem7 w1
                   Algebra.Count
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem6 w1
                   Algebra.Avg
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem5 w1
                   Algebra.Max
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem4 w1
                   Algebra.Min
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem3 w1
                   Algebra.Sdev
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem2 w1
                   Algebra.Var
                   -> GHC.Base.++ @ GHC.Types.Char Algebra.$fShowOpElem1 w1 }) -}
e56044e8fe52e717f8000a4eed0c54a6
  $wextend ::
    Relvar.Relvar
    -> ([Relvar.Elem] -> Relvar.Elem)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <L,U(1*U,U)><L,C(U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Relvar.Relvar
                   w1 :: [Relvar.Elem] -> Relvar.Elem
                   w2 :: [GHC.Base.String]
                   w3 :: GHC.Base.String ->
                 (# Data.Set.Base.insert
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      Relvar.$fLabelOpRelvar_$s$fOrd(,)
                      (w3,
                       Relvar.typeRep
                         (w1
                            (Relvar.LSet.$wextract
                               @ Relvar.Elem
                               GHC.Types.True
                               (case w of wild { Relvar.Relvar ds1 ds2 ->
                                Data.Set.Base.$welemAt @ Relvar.Row 0 ds2 })
                               w2)))
                      (Relvar.attributes w),
                    case w of wild { Relvar.Relvar ds1 ds2 ->
                    letrec {
                      go47 :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                              -> Data.Set.Base.Set
                                   (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                              -> [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ z' :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                          ds :: Data.Set.Base.Set
                                  (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                        case ds of wild1 {
                          Data.Set.Base.Bin dt x l r
                          -> go47
                               (GHC.Types.:
                                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                  (Data.Set.Base.insert
                                     @ (GHC.Base.String, Relvar.Elem)
                                     Relvar.$fEqRelvar_$s$fOrd(,)
                                     (w3,
                                      w1 (Relvar.LSet.$wextract @ Relvar.Elem GHC.Types.True x w2))
                                     x)
                                  (go47 z' r))
                               l
                          Data.Set.Base.Tip -> z' }
                    } in
                    Relvar.$fLabelOpRelvar_$sfromList
                      (go47
                         (GHC.Types.[] @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                         ds2) } #)) -}
dfba77001eb3c0cdebb78aa89e146f3a
  $wgo ::
    [Relvar.Relvar]
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
2f38b523a4c9035163ccc50c3e33b949
  $wgo1 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
          Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> [(Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
         Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
          Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
de346d3401df71375c2f139c67c71cc6
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set
         (Data.Set.Base.Set
            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
    -> [Data.Set.Base.Set
          (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
    -> Data.Set.Base.Set
         (Data.Set.Base.Set
            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
095a11ba320351e1db7aa08bf028a2fd
  $wgroup ::
    Relvar.Relvar
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>, Inline: [0],
     Unfolding: (\ w :: Relvar.Relvar
                   w1 :: [GHC.Base.String]
                   w2 :: GHC.Base.String ->
                 let {
                   per :: Relvar.Relvar
                   = case w of ww { Relvar.Relvar ww1 ww2 ->
                     case Algebra.$wproject
                            ww1
                            ww2
                            (Relvar.LSet.$fLabelOpSet1
                               @ Data.Typeable.Internal.TypeRep
                               (GHC.Types.[] @ [GHC.Types.Char])
                               (Relvar.LSet.$wprojectaway
                                  @ Data.Typeable.Internal.TypeRep
                                  ww1
                                  w1)) of ww3 { (#,#) ww4 ww5 ->
                     Relvar.Relvar ww4 ww5 } }
                 } in
                 (# Relvar.LSet.fromList
                      @ Data.Typeable.Internal.TypeRep
                      Data.Typeable.Internal.$fOrdTypeRep
                      (GHC.Types.:
                         @ [GHC.Types.Char]
                         w2
                         (case per of wild { Relvar.Relvar ds ds1 ->
                          Relvar.LSet.$w$clabels @ Data.Typeable.Internal.TypeRep ds }))
                      (GHC.Types.:
                         @ Data.Typeable.Internal.TypeRep
                         Relvar.tyR
                         (case per of wild { Relvar.Relvar ds ds1 ->
                          Relvar.LSet.values1
                            @ Data.Typeable.Internal.TypeRep
                            (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                            ds })),
                    case per of ww { Relvar.Relvar ww1 ww2 ->
                    case Algebra.$wsemiJoin ww1 ww2 w of ww3 { (#,#) ww4 ww5 ->
                    let {
                      rws :: [Relvar.Row]
                      = Data.Set.Base.toAscList1
                          @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                          (GHC.Types.[] @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                          ww5
                    } in
                    Relvar.$fLabelOpRelvar_$sfromList
                      (GHC.List.zipWith
                         @ Relvar.Relvar
                         @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                         @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                         (\ r :: Relvar.Relvar
                            rw :: Relvar.LSet.LSet Relvar.Elem[OneShot] ->
                          Data.Set.Base.insert
                            @ (GHC.Base.String, Relvar.Elem)
                            Relvar.$fEqRelvar_$s$fOrd(,)
                            (w2, Relvar.R r)
                            rw)
                         (GHC.Base.map
                            @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                            @ Relvar.Relvar
                            (\ x :: Relvar.Row ->
                             case w of ww6 { Relvar.Relvar ww7 ww8 ->
                             case Algebra.$wrestrict2
                                    ww7
                                    ww8
                                    x
                                    (Relvar.LSet.$w$clabels
                                       @ Data.Typeable.Internal.TypeRep
                                       ww1) of ww9 { (#,#) ww10 ww11 ->
                             case Algebra.$wproject ww10 ww11 w1 of ww12 { (#,#) ww13 ww14 ->
                             Relvar.Relvar ww13 ww14 } } })
                            rws)
                         rws) } } #)) -}
65a676bc46fcc57235ee963425ba9bda
  $wintersection ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <S,U><L,1*U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   ww2 :: Relvar.Attributes
                   ww3 :: Data.Set.Base.Set Relvar.Row ->
                 case Data.Set.Base.$fEqSet_$c==
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fEqRelvar_$s$fEq(,)1
                        ww
                        ww2 of wild {
                   GHC.Types.False
                   -> case Algebra.group1 ww ww1 ww2 ww3
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {}
                   GHC.Types.True
                   -> (# ww,
                         case ww1 of wild1 {
                           Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                           -> case ww3 of wild2 {
                                Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                -> Data.Set.Base.intersection_$shedgeInt
                                     @ Relvar.Row
                                     Relvar.$fEqRelvar_$s$fOrdSet
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     ipv
                                     ipv1
                                     ipv2
                                     ipv3
                                     ipv4
                                     ipv5
                                     ipv6
                                     ipv7
                                Data.Set.Base.Tip -> Data.Set.Base.Tip @ Relvar.Row }
                           Data.Set.Base.Tip -> Data.Set.Base.Tip @ Relvar.Row } #) }) -}
60b40105263af8db058d44db0b273139
  $wjoin ::
    Relvar.Relvar
    -> Relvar.Relvar
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>, Inline: [0] -}
28a8b6a6a0584bcd70c4afdfb505b8c3
  $wminus ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <S,U><L,1*U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   ww2 :: Relvar.Attributes
                   ww3 :: Data.Set.Base.Set Relvar.Row ->
                 case Data.Set.Base.$fEqSet_$c==
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fEqRelvar_$s$fEq(,)1
                        ww
                        ww2 of wild {
                   GHC.Types.False
                   -> case Algebra.group1 ww ww1 ww2 ww3
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {}
                   GHC.Types.True
                   -> (# ww,
                         case ww1 of wild1 {
                           Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                           -> case ww3 of wild2 {
                                Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                -> Data.Set.Base.difference_$shedgeDiff
                                     @ Relvar.Row
                                     Relvar.$fEqRelvar_$s$fOrdSet
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     ipv
                                     ipv1
                                     ipv2
                                     ipv3
                                     ipv4
                                     ipv5
                                     ipv6
                                     ipv7
                                Data.Set.Base.Tip -> wild1 }
                           Data.Set.Base.Tip -> Data.Set.Base.Tip @ Relvar.Row } #) }) -}
363510d7abad30335b4352fdca7f83c7
  $wproject ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> [GHC.Base.String]
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   w :: [GHC.Base.String] ->
                 (# Data.Set.Base.filter
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      (\ x :: (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                       GHC.List.elem
                         @ GHC.Base.String
                         GHC.Classes.$fEq[]_$s$fEq[]1
                         (case x of wild { (,) x1 ds1 -> x1 })
                         w)
                      ww,
                    let {
                      lvl23 :: (GHC.Base.String, Relvar.Elem) -> GHC.Types.Bool
                        {- Arity: 1 -}
                      = \ x :: (GHC.Base.String, Relvar.Elem) ->
                        GHC.List.elem
                          @ GHC.Base.String
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          (case x of wild { (,) x1 ds1 -> x1 })
                          w
                    } in
                    letrec {
                      go47 :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                              -> Data.Set.Base.Set
                                   (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                              -> [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ z' :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                          ds :: Data.Set.Base.Set
                                  (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                        case ds of wild {
                          Data.Set.Base.Bin dt x l r
                          -> go47
                               (GHC.Types.:
                                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                  (Data.Set.Base.filter @ (GHC.Base.String, Relvar.Elem) lvl23 x)
                                  (go47 z' r))
                               l
                          Data.Set.Base.Tip -> z' }
                    } in
                    Relvar.$fLabelOpRelvar_$sfromList
                      (go47
                         (GHC.Types.[] @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                         ww1) #)) -}
2de77422726c0c8641e859317340b0f5
  $wrestrict2 ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Row
    -> [GHC.Base.String]
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   w :: Relvar.Row
                   w1 :: [GHC.Base.String] ->
                 (# ww,
                    let {
                      lvl23 :: (GHC.Base.String, Relvar.Elem) -> GHC.Types.Bool
                        {- Arity: 1 -}
                      = \ x :: (GHC.Base.String, Relvar.Elem) ->
                        GHC.List.elem
                          @ GHC.Base.String
                          GHC.Classes.$fEq[]_$s$fEq[]1
                          (case x of wild { (,) x1 ds1 -> x1 })
                          w1
                    } in
                    let {
                      lvl24 :: Relvar.LSet.LSet Relvar.Elem
                      = Data.Set.Base.filter @ (GHC.Base.String, Relvar.Elem) lvl23 w
                    } in
                    Data.Set.Base.filter
                      @ Relvar.Row
                      (\ rw :: Relvar.Row ->
                       Data.Set.Base.$fEqSet_$c==
                         @ (GHC.Base.String, Relvar.Elem)
                         Relvar.$fEqRelvar_$s$fEq(,)
                         (Data.Set.Base.filter @ (GHC.Base.String, Relvar.Elem) lvl23 rw)
                         lvl24)
                      ww1 #)) -}
2455b9ccaf41184a8a64b2ff65cc4dd8
  $wsemiJoin ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Relvar
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,1*U)>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   w :: Relvar.Relvar ->
                 case Algebra.group3
                        ww
                        (case w of wild { Relvar.Relvar ds ds1 -> ds }) of wild {
                   GHC.Types.False
                   -> case w of wild1 { Relvar.Relvar ds2 ds3 ->
                      case Data.Set.Base.$fEqSet_$c==
                             @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                             Relvar.$fEqRelvar_$s$fEq(,)1
                             ww
                             ds2 of wild2 {
                        GHC.Types.False
                        -> (# ww,
                              let {
                                cmnlbls :: [GHC.Base.String]
                                = Relvar.LSet.$fLabelOpSet1
                                    @ Data.Typeable.Internal.TypeRep
                                    (GHC.Types.[] @ [GHC.Types.Char])
                                    (Algebra.group2 ww ds2)
                              } in
                              let {
                                target :: Data.Set.Base.Set Relvar.Row
                                = case Algebra.$wproject ds2 ds3 cmnlbls of ww2 { (#,#) ww3 ww4 ->
                                  ww4 }
                              } in
                              let {
                                lvl23 :: (GHC.Base.String, Relvar.Elem) -> GHC.Types.Bool
                                  {- Arity: 1 -}
                                = \ x :: (GHC.Base.String, Relvar.Elem) ->
                                  GHC.List.elem
                                    @ GHC.Base.String
                                    GHC.Classes.$fEq[]_$s$fEq[]1
                                    (case x of wild3 { (,) x1 ds1 -> x1 })
                                    cmnlbls
                              } in
                              Data.Set.Base.filter
                                @ Relvar.Row
                                (\ rw :: Relvar.LSet.LSet Relvar.Elem ->
                                 Algebra.$smember_go5
                                   (Data.Set.Base.filter @ (GHC.Base.String, Relvar.Elem) lvl23 rw)
                                   target)
                                ww1 #)
                        GHC.Types.True -> Algebra.$wintersection ww ww1 ds2 ds3 } }
                   GHC.Types.True -> (# ww, Data.Set.Base.Tip @ Relvar.Row #) }) -}
75e273004f27a241f772b7246e09c932
  $wsummarize ::
    Relvar.Relvar
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> [Algebra.OpElem]
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 6, Strictness: <L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
43485b21c759cd23f988a52f14f656c6
  $wtimes ::
    Relvar.Relvar
    -> Relvar.Relvar
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 2, Strictness: <L,U(U,1*U)><L,U(U,1*U)>, Inline: [0],
     Unfolding: (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case Algebra.group3
                        (case w of wild { Relvar.Relvar ds ds1 -> ds })
                        (case w1 of wild { Relvar.Relvar ds ds1 -> ds }) of wild {
                   GHC.Types.False
                   -> case Algebra.times2 w w1
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {}
                   GHC.Types.True
                   -> (# Algebra.times1 (Relvar.attributes w) (Relvar.attributes w1),
                         case w of wild1 { Relvar.Relvar ds1 ds2 ->
                         let {
                           lvl23 :: Data.Set.Base.Set Relvar.Row
                           = case w1 of wild2 { Relvar.Relvar ds4 ds5 -> ds5 }
                         } in
                         letrec {
                           go47 :: [Data.Set.Base.Set
                                      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                                   -> Data.Set.Base.Set
                                        (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                   -> [Data.Set.Base.Set
                                         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                             {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                           = \ z' :: [Data.Set.Base.Set
                                        (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                               ds :: Data.Set.Base.Set
                                       (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                             case ds of wild2 {
                               Data.Set.Base.Bin dt x l r
                               -> go47
                                    (GHC.Types.:
                                       @ (Data.Set.Base.Set
                                            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                       (letrec {
                                          go48 :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                                                  -> Data.Set.Base.Set
                                                       (Data.Set.Base.Set
                                                          (GHC.Base.String, Relvar.Elem))
                                                  -> [Data.Set.Base.Set
                                                        (GHC.Base.String, Relvar.Elem)]
                                            {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                                          = \ z'1 :: [Data.Set.Base.Set
                                                        (GHC.Base.String, Relvar.Elem)]
                                              ds4 :: Data.Set.Base.Set
                                                       (Data.Set.Base.Set
                                                          (GHC.Base.String, Relvar.Elem)) ->
                                            case ds4 of wild3 {
                                              Data.Set.Base.Bin dt1 x1 l1 r1
                                              -> go48
                                                   (GHC.Types.:
                                                      @ (Data.Set.Base.Set
                                                           (GHC.Base.String, Relvar.Elem))
                                                      (case x of wild4 {
                                                         Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                                                         -> case x1 of wild5 {
                                                              Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                                              -> Data.Set.Base.union_$shedgeUnion
                                                                   @ (GHC.Base.String, Relvar.Elem)
                                                                   Relvar.$fEqRelvar_$s$fOrd(,)
                                                                   (Data.Set.Base.NothingS
                                                                      @ (GHC.Base.String,
                                                                         Relvar.Elem))
                                                                   (Data.Set.Base.NothingS
                                                                      @ (GHC.Base.String,
                                                                         Relvar.Elem))
                                                                   ipv
                                                                   ipv1
                                                                   ipv2
                                                                   ipv3
                                                                   ipv4
                                                                   ipv5
                                                                   ipv6
                                                                   ipv7
                                                              Data.Set.Base.Tip -> wild4 }
                                                         Data.Set.Base.Tip -> x1 })
                                                      (go48 z'1 r1))
                                                   l1
                                              Data.Set.Base.Tip -> z'1 }
                                        } in
                                        Relvar.$fLabelOpRelvar_$sfromList
                                          (go48
                                             (GHC.Types.[]
                                                @ (Data.Set.Base.Set
                                                     (GHC.Base.String, Relvar.Elem)))
                                             lvl23))
                                       (go47 z' r))
                                    l
                               Data.Set.Base.Tip -> z' }
                         } in
                         Algebra.times_go5
                           (Data.Set.Base.Tip
                              @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                           (Algebra.$sfromList
                              (go47
                                 (GHC.Types.[]
                                    @ (Data.Set.Base.Set
                                         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))))
                                 ds2)) } #) }) -}
def2cc91eb6283a937402d2f39333499
  $wungroup ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> GHC.Base.String
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   w :: GHC.Base.String ->
                 case GHC.List.elem
                        @ Data.Typeable.Internal.TypeRep
                        Data.Typeable.Internal.$fEqTypeRep
                        Relvar.tyR
                        (Relvar.LSet.$wextract
                           @ Data.Typeable.Internal.TypeRep
                           GHC.Types.False
                           ww
                           (GHC.Types.:
                              @ GHC.Base.String
                              w
                              (GHC.Types.[] @ GHC.Base.String))) of wild {
                   GHC.Types.False
                   -> case Algebra.ungroup2 w
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {}
                   GHC.Types.True
                   -> let {
                        p0 :: (GHC.Base.String, Relvar.Elem) -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>,
                             Unfolding: InlineRule (1, True, False)
                                        (\ x :: (GHC.Base.String, Relvar.Elem) ->
                                         case x of wild1 { (,) x1 ds1 ->
                                         GHC.Base.eqString x1 w }) -}
                        = \ x :: (GHC.Base.String, Relvar.Elem) ->
                          case x of wild1 { (,) x1 ds1 -> GHC.Base.eqString x1 w }
                      } in
                      letrec {
                        go47 :: [(Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                  Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                                -> Data.Set.Base.Set
                                     (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                -> [(Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                     Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                          {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                        = \ z' :: [(Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))]
                            ds :: Data.Set.Base.Set
                                    (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                          case ds of wild1 {
                            Data.Set.Base.Bin dt x l r
                            -> go47
                                 (GHC.Types.:
                                    @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                       Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                    (case Data.Set.Base.$wpoly_go1
                                            @ (GHC.Base.String, Relvar.Elem)
                                            p0
                                            x of ww2 { (#,#) ww3 ww4 ->
                                     (ww3, ww4) })
                                    (go47 z' r))
                                 l
                            Data.Set.Base.Tip -> z' }
                      } in
                      case Algebra.ungroup_go5
                             Algebra.ungroup1
                             (Algebra.$sfromList1
                                (go47
                                   (GHC.Types.[]
                                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
                                         Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                                   ww1)) of wild1 { (,) grprows nongrprows ->
                      case Algebra.ungroup_go
                             grprows
                             (GHC.Base.map
                                @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                @ Relvar.Relvar
                                (\ rw :: Relvar.Row ->
                                 Relvar.Relvar
                                   (Relvar.LSet.delete @ Data.Typeable.Internal.TypeRep w ww)
                                   (Data.Set.Base.singleton @ Relvar.Row rw))
                                nongrprows) of wild2 {
                        []
                        -> case GHC.List.foldl2
                           ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                           of {}
                        : x xs
                        -> case x of ww2 { Relvar.Relvar ww3 ww4 ->
                           Algebra.$wgo xs ww3 ww4 } } } }) -}
84b490575f3f8184136af5e18ce3887c
  $wunion ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <S,U><L,1*U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   ww2 :: Relvar.Attributes
                   ww3 :: Data.Set.Base.Set Relvar.Row ->
                 case Data.Set.Base.$fEqSet_$c==
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fEqRelvar_$s$fEq(,)1
                        ww
                        ww2 of wild {
                   GHC.Types.False
                   -> case Algebra.group1 ww ww1 ww2 ww3
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {}
                   GHC.Types.True
                   -> (# ww,
                         case ww1 of wild1 {
                           Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                           -> case ww3 of wild2 {
                                Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                -> Data.Set.Base.union_$shedgeUnion
                                     @ Relvar.Row
                                     Relvar.$fEqRelvar_$s$fOrdSet
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     (Data.Set.Base.NothingS @ Relvar.Row)
                                     ipv
                                     ipv1
                                     ipv2
                                     ipv3
                                     ipv4
                                     ipv5
                                     ipv6
                                     ipv7
                                Data.Set.Base.Tip -> wild1 }
                           Data.Set.Base.Tip -> ww3 } #) }) -}
3a2d791a3b4c6bb90b1f89971e95b1d0
  data OpElem = Sum | Count | Avg | Max | Min | Sdev | Var
    Promotable
8e6336ea71f3dac00cda0f6efb747b0d
  extend ::
    Relvar.Relvar
    -> ([Relvar.Elem] -> Relvar.Elem)
    -> [GHC.Base.String]
    -> GHC.Base.String
    -> Relvar.Relvar
  {- Arity: 4, Strictness: <L,U(1*U,U)><L,C(U)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: [Relvar.Elem] -> Relvar.Elem
                   w2 :: [GHC.Base.String]
                   w3 :: GHC.Base.String ->
                 case Algebra.$wextend w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Relvar.Relvar ww1 ww2 }) -}
b577c31ba4f29f6c4c63415076651f2a
  group ::
    Relvar.Relvar
    -> [GHC.Base.String] -> GHC.Base.String -> Relvar.Relvar
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: [GHC.Base.String]
                   w2 :: GHC.Base.String ->
                 case Algebra.$wgroup w w1 w2 of ww { (#,#) ww1 ww2 ->
                 Relvar.Relvar ww1 ww2 }) -}
9e8ed2d0c94587a29b41bd4e70385fd0
  group1 ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Relvar
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>b -}
3cede8db73bb78f947d55b6aaed394ba
  group2 ::
    Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
  {- Unfolding: (Relvar.LSet.common
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep) -}
61a52cf1fb4529c381ba440df55a7823
  group3 ::
    Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> GHC.Types.Bool
  {- Unfolding: (Relvar.LSet.$fLabelOpSet_$cdisjoint
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep
                   Data.Typeable.Internal.$fShowTypeRep
                   Relvar.$fLabelOpRelvar_$s$fOrdSet) -}
0c3e5ccfe7362d1e4e0998f3474cb26f
  intersection :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case w1 of ww3 { Relvar.Relvar ww4 ww5 ->
                 case Algebra.$wintersection
                        ww1
                        ww2
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 Relvar.Relvar ww7 ww8 } } }) -}
0321f39c5529eb88dcca65f48563f2ab
  join :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case Algebra.$wjoin w w1 of ww { (#,#) ww1 ww2 ->
                 Relvar.Relvar ww1 ww2 }) -}
c2aeb7760cdd13387a904573fecb0629
  minus :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case w1 of ww3 { Relvar.Relvar ww4 ww5 ->
                 case Algebra.$wminus ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 Relvar.Relvar ww7 ww8 } } }) -}
d980362a99d3cece0c39e7b15c943b5e
  project :: Relvar.Relvar -> [GHC.Base.String] -> Relvar.Relvar
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case Algebra.$wproject ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
60e6ee3b83c873d1cbcda2257cbab1ab
  projectaway :: Relvar.Relvar -> [GHC.Base.String] -> Relvar.Relvar
  {- Arity: 2, Strictness: <S,U(U,1*U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case Algebra.$wproject
                        ww1
                        ww2
                        (Relvar.LSet.$fLabelOpSet1
                           @ Data.Typeable.Internal.TypeRep
                           (GHC.Types.[] @ [GHC.Types.Char])
                           (Relvar.LSet.$wprojectaway
                              @ Data.Typeable.Internal.TypeRep
                              ww1
                              w1)) of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
8eeb63cab418fe7179aaee31efd2e986
  restrict ::
    Relvar.Relvar
    -> ([Relvar.Elem] -> GHC.Types.Bool)
    -> [GHC.Base.String]
    -> Relvar.Relvar
  {- Arity: 3, Strictness: <S,1*U(U,1*U)><L,C(U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: [Relvar.Elem] -> GHC.Types.Bool
                   w2 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 Relvar.Relvar
                   ww1
                   (Data.Set.Base.filter
                      @ Relvar.Row
                      (\ x :: Relvar.Row ->
                       w1 (Relvar.LSet.$wextract @ Relvar.Elem GHC.Types.True x w2))
                      ww2) }) -}
3d9d0caff5bffae2bd487658b0d336f0
  semiJoin :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <S,U(U,U)><L,U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case Algebra.$wsemiJoin ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
8b416d3c8a6b08c0ea2f4ab1a340c516
  semiMinus :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <S(SL),U(U,U)><L,U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Relvar.Relvar r2 :: Relvar.Relvar ->
                 Algebra.minus r1 (Algebra.semiJoin r1 r2)) -}
8de926f29252cbaf8a2d57cd22679ba2
  summarize ::
    Relvar.Relvar
    -> Relvar.Relvar
    -> [Algebra.OpElem]
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> Relvar.Relvar
  {- Arity: 5, Strictness: <L,U(U,U)><S,U(U,U)><L,U><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: Relvar.Relvar
                   w2 :: [Algebra.OpElem]
                   w3 :: [GHC.Base.String]
                   w4 :: [GHC.Base.String] ->
                 case w1 of ww { Relvar.Relvar ww1 ww2 ->
                 case Algebra.$wsummarize
                        w
                        ww1
                        ww2
                        w2
                        w3
                        w4 of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
9017f314df8436360eb7aa8e9db0402f
  times :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <L,U(U,1*U)><L,U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case Algebra.$wtimes w w1 of ww { (#,#) ww1 ww2 ->
                 Relvar.Relvar ww1 ww2 }) -}
d79f75340c87a3233fbd059e35513597
  times1 ::
    Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
    -> Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
  {- Unfolding: (Relvar.LSet.union
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep) -}
b4610585343fb8995884610a8bf4906f
  times2 :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <L,U><L,U>b -}
60cef20f6cd08f618077e9a7afd29129
  times_go5 ::
    Data.Set.Base.Set
      (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set
            (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
942ce6d055c098868445d2baef926923
  ungroup :: Relvar.Relvar -> GHC.Base.String -> Relvar.Relvar
  {- Arity: 2, Strictness: <S(LS),U(U,1*U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: GHC.Base.String ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case Algebra.$wungroup ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
45dd222951e30f5c328f4bed90858d9b
  ungroup1 ::
    ([Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)],
     [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)])
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.[]
                    @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)),
                  GHC.Types.[]
                    @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))) -}
8ee61c4b38cf4cbe0755d3405c1a2bf4
  ungroup2 :: GHC.Base.String -> Relvar.Relvar
  {- Arity: 1, Strictness: <L,U>b -}
1db31dd46179f5f27cb56c2fe905cc79
  ungroup_go ::
    [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
    -> [Relvar.Relvar] -> [Relvar.Relvar]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
cd6b3781ad9b9e16a97ca5c59a236dc4
  ungroup_go5 ::
    ([Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)],
     [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)])
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem),
          Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> ([Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)],
        [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)])
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U)><S,1*U> -}
217b3e25a039476f1145db90547c90ef
  union :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, Strictness: <S(SL),1*U(U,1*U)><S(SL),1*U(U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case w1 of ww3 { Relvar.Relvar ww4 ww5 ->
                 case Algebra.$wunion ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                 Relvar.Relvar ww7 ww8 } } }) -}
instance GHC.Classes.Eq [Algebra.OpElem] = Algebra.$fEqOpElem
instance GHC.Show.Show [Algebra.OpElem] = Algebra.$fShowOpElem
"SPEC/Algebra $fEq(,) @ (Set (String, Elem)) @ (Set (String, Elem))" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                               (Data.Set.Base.Set
                                                                                                  (GHC.Base.String,
                                                                                                   Relvar.Elem))
                                                                                     $dEq1 :: GHC.Classes.Eq
                                                                                                (Data.Set.Base.Set
                                                                                                   (GHC.Base.String,
                                                                                                    Relvar.Elem))
  GHC.Classes.$fEq(,) @ (Data.Set.Base.Set
                           (GHC.Base.String, Relvar.Elem))
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                      $dEq
                      $dEq1
  = Algebra.$s$fEq(,)
"SPEC/Algebra $fEqSet @ (Set (String, Elem))" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                        (Data.Set.Base.Set
                                                                           (GHC.Base.String,
                                                                            Relvar.Elem))
  Data.Set.Base.$fEqSet @ (Data.Set.Base.Set
                             (GHC.Base.String, Relvar.Elem))
                        $dEq
  = Algebra.$s$fEqSet
"SPEC/Algebra $fEqSet_$c/= @ (Set (String, Elem))" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                             (Data.Set.Base.Set
                                                                                (GHC.Base.String,
                                                                                 Relvar.Elem))
  Data.Set.Base.$fEqSet_$c/= @ (Data.Set.Base.Set
                                  (GHC.Base.String, Relvar.Elem))
                             $dEq
  = Algebra.$s$fEqSet_$s$fEqSet_$c/=
"SPEC/Algebra $fOrd(,) @ (Set (String, Elem)) @ (Set (String, Elem))" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                                                (Data.Set.Base.Set
                                                                                                   (GHC.Base.String,
                                                                                                    Relvar.Elem),
                                                                                                 Data.Set.Base.Set
                                                                                                   (GHC.Base.String,
                                                                                                    Relvar.Elem))
                                                                                      $dOrd :: GHC.Classes.Ord
                                                                                                 (Data.Set.Base.Set
                                                                                                    (GHC.Base.String,
                                                                                                     Relvar.Elem))
                                                                                      $dOrd1 :: GHC.Classes.Ord
                                                                                                  (Data.Set.Base.Set
                                                                                                     (GHC.Base.String,
                                                                                                      Relvar.Elem))
  GHC.Classes.$fOrd(,) @ (Data.Set.Base.Set
                            (GHC.Base.String, Relvar.Elem))
                       @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                       $dEq
                       $dOrd
                       $dOrd1
  = Algebra.$s$fOrd(,)
"SPEC/Algebra $fOrdSet @ (Set (String, Elem))" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                         (Data.Set.Base.Set
                                                                            (Data.Set.Base.Set
                                                                               (GHC.Base.String,
                                                                                Relvar.Elem)))
                                                               $dOrd :: GHC.Classes.Ord
                                                                          (Data.Set.Base.Set
                                                                             (GHC.Base.String,
                                                                              Relvar.Elem))
  Data.Set.Base.$fOrdSet @ (Data.Set.Base.Set
                              (GHC.Base.String, Relvar.Elem))
                         $dEq
                         $dOrd
  = Algebra.$s$fOrdSet
"SPEC/Algebra fromList @ (Set (Set (String, Elem)))" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                (Data.Set.Base.Set
                                                                                   (Data.Set.Base.Set
                                                                                      (GHC.Base.String,
                                                                                       Relvar.Elem)))
  Data.Set.Base.fromList @ (Data.Set.Base.Set
                              (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                         $dOrd
  = Algebra.$sfromList
"SPEC/Algebra fromList @ (Set (String, Elem), Set (String, Elem))" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                              (Data.Set.Base.Set
                                                                                                 (GHC.Base.String,
                                                                                                  Relvar.Elem),
                                                                                               Data.Set.Base.Set
                                                                                                 (GHC.Base.String,
                                                                                                  Relvar.Elem))
  Data.Set.Base.fromList @ (Data.Set.Base.Set
                              (GHC.Base.String, Relvar.Elem),
                            Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                         $dOrd
  = Algebra.$sfromList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

