
==================== FINAL INTERFACE ====================
2016-09-03 15:13:56.419158 UTC

interface relat_8Cyn3M6UKgN11sASBif9n4:Algebra.Function 7103
  interface hash: 9828b230a964f6489ed7865c1338459d
  ABI hash: 54aae7380abe31d79a86942e8e057998
  export-list hash: 4a23a61f94c0cb7d86e85433cc61da9d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ef60b83558b1d166fc714376ea95124e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Relvar.card
  Relvar.common
  Relvar.dee
  Relvar.dum
  Relvar.elems
  Relvar.elems'
  Relvar.keepLeft
  Relvar.keepRight
  Relvar.relvar
  Relvar.table
  Relvar.tyA
  Relvar.tyB
  Relvar.tyBS
  Relvar.tyC
  Relvar.tyD
  Relvar.tyDD
  Relvar.tyDT
  Relvar.tyI
  Relvar.tyJ
  Relvar.tyR
  Relvar.tyS
  Relvar.tyT
  Relvar.tyT2
  Relvar.tyT3
  Relvar.tyZ
  Relvar.typeRep
  Relvar.types
  Relvar.types'
  Data.Typeable.Internal.TypeRep
  Algebra.Function.BoolFun{Algebra.Function.liftBoolFun}
  Algebra.Function.BoolFun2{Algebra.Function.liftBoolFun2}
  Algebra.Function.BoolFun3{Algebra.Function.liftBoolFun3}
  Algebra.Function.LiftElem{Algebra.Function.liftEl Algebra.Function.liftEl' Algebra.Function.liftLeft Algebra.Function.liftLeft'}
  Algebra.Function.LiftElem2{Algebra.Function.liftEl2 Algebra.Function.liftEl2' Algebra.Function.liftLeft2 Algebra.Function.liftLeft2'}
  Algebra.Function.LiftElem3{Algebra.Function.liftEl3 Algebra.Function.liftEl3' Algebra.Function.liftLeft3 Algebra.Function.liftLeft3'}
  Relvar.Attributes
  Relvar.ColOrder{Relvar.Asc Relvar.Desc}
  Relvar.Elem{Relvar.A Relvar.B Relvar.BS Relvar.C Relvar.D Relvar.DD Relvar.DT Relvar.DW Relvar.I Relvar.J Relvar.Nil Relvar.R Relvar.S Relvar.T Relvar.T2 Relvar.T3}
  Relvar.Elementable{Relvar.fromElem Relvar.toElem}
  Relvar.Relvar{Relvar.Relvar Relvar.attributes Relvar.rdata}
  Relvar.Row
  Relvar.Table{Relvar.Table Relvar.header Relvar.tdata}
  Relvar.LSet.LabelOp|{Relvar.LSet.compatible Relvar.LSet.degree Relvar.LSet.disjoint Relvar.LSet.labels Relvar.LSet.match Relvar.LSet.rename}
module dependencies: Relvar Relvar.LSet
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU*
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0248c1e850b7ea124cf7a2e1669ebf67
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString a7dd1816d7b9a73f13bb7af0c321dca4
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal dfa34e211eb5d18268ce7a397234e851
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Strict 47720a1b98e2fcc2f040f344c61b35f5
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  Relvar c43138de2e31a037b92dfb3f1ff8bcdd
  exports: c77214d0a1ae15d1167f75a2836fdb82
  A 7f1db1f6ec5b2af773cabb5b32739423
  Asc 7d727039fd62c859b3e9fc7d9ecbeb35
  Attributes 92b36af06395478ed32609304cc2e6e5
  B 09884aca53c81c9a8a675173b9059601
  BS 7e9499a92fa6a7c101f156251a58d683
  C 1205911eaf10f5979f8614b3e70e8509
  ColOrder fbde8b2c937abccbc0eea6bc2535c692
  D 94b592089becf58c64fedb3bba3769c6
  DD 63d4393107c0dc06f5ffa5fd369021b0
  DT aabcf5d335ff76901a297621c0e4bade
  DW 993f3216f7621b82fd3d191afb012b6f
  Desc 0611f83175b9cd9b14ade19a71a18d18
  Elem 739ead08fede687ca65196edf4c545f4
  Elementable 53813a3ee68b7cee9701acd995e0e5df
  I 2850aa1e6707f6b46413d053b353592b
  J 1d7f0044079b33c343c066dd1651f2ac
  Nil bbf6812b23170f2f9f6afe07e0fda3ed
  R 25c43790b0e5fc89dd368d744ae1c648
  Relvar 5d50cf0259b73cce0ba6507b243d7614
  Relvar 739ead08fede687ca65196edf4c545f4
  Row 739ead08fede687ca65196edf4c545f4
  S 959b55bc7d4247fe7a618e7b4e801360
  T a2cd3d567b05a3881634e091cb03854c
  T2 480e6440188ff35a98e1ab2a96b311dc
  T3 8749aeb086b70b9bdfcdec6e74920a83
  Table 2fba6637400b15e4e7ba69c2add936bb
  Table d68f3e08edd39812aceff63f53d75233
  attributes f88f723fc1472d57f85d2158e352f7e7
  card d5cad50b3627c7d2861dbcd373092882
  common 950b4a17849d0b15865cf1ca7da8893d
  dee df53ccc7b8be969c0d24661186c25521
  dum c3e073e8fa5ef33016d825848a4ef9c6
  elems e54c19aa41b7a4352a5c97637e95ddb4
  elems' d78ace6adc3bfe6b637caabd68efa7fe
  fromElem 506754fd8ce4ce28175dce92e48b0cd8
  header 1e205cf57b262b4e987e5f3f40a8267e
  keepLeft cfd1cf6a02e0c835dcd5fd7c3b2a5386
  keepRight 61233f2057ef6728f5421bce4f6beb21
  rdata a4b815bb45a08feacc674ce38233c30e
  relvar 5a732440cdeabb63e5f290744040033a
  table 3e714518e88d946b00931d8f624f03e6
  tdata 27c8885d02a6d31374bc1986a1dda559
  toElem 58be4507eb5886e8b0e794556f7f6cec
  tyA 6cf8c41e1bf3fcbbbc69a1e0dcd0b8f5
  tyB 83008f24ed76ab8b5ae16dba9ef5a2c3
  tyBS b258120d34fe47bcada7426e536b3468
  tyC 101d14c580ddd970ab3cac687da0e0e3
  tyD 5032d4846f251b011792ed630ec184de
  tyDD af96fe385cad4f430ee35975c3c5c5eb
  tyDT 801878a4a1344bc170a0f03a333dd95c
  tyI da3f0af4463d5b782303a9e18aea8407
  tyJ c32df67fdfd5a22d340c035e8a045936
  tyR bab86fe3988990a3455616aa00294e73
  tyS 208f4920435b48fffd602528e06bd0c7
  tyT 7d33d8361830b6d3e1087241d3408010
  tyT2 3e3b8d07b4d6212df4e4788ad3c8c419
  tyT3 e08eb71f47475bba102f779009268422
  tyZ 23056910a489f72571bdc353b23d7545
  typeRep 1038cb461d207644d542d44173087977
  types 25f620a3e9fe9ad2ddfaac30dd3fbdca
  types' 9a8774f641ce1b2ecfcdbd3caee16c57
import  -/  Relvar.LSet e65ac2554d77b7defb57213d61690388
  compatible 73c6c14445e4ab5e4a21fefbfa5ebe44
  degree 5153e2f41db215d106be2043ac467227
  disjoint 753f7fb2e200dd7355b8f9bc8aeb6e57
  labels 0d22c6fd60f0fac3138012859c8b8326
  match 38760ca48b6304124e725c80aa1678df
  rename 466a9187fcf5ff229dfd3a27cfedd747
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time 05c0775841fb44d3c8063cb78d933b0f
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Days 6bb3f771ace440999ea38fb6f4696368
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Clock.UTC e543be363c51c0d733a66becd1667c39
6a63f7434798d205e657e74d58054223
  $dmliftBoolFun ::
    Algebra.Function.BoolFun a =>
    (a -> GHC.Types.Bool) -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLC(C(S))LL)L),1*U(1*U(A,A,A,1*C1(C1(U)),A,A),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   $dBoolFun :: Algebra.Function.BoolFun a
                   eta :: a -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 GHC.Base.$
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Maybe.fromMaybe @ GHC.Types.Bool GHC.Types.False)
                   (Algebra.Function.liftLeft
                      @ a
                      @ GHC.Types.Bool
                      (Algebra.Function.$p1BoolFun @ a $dBoolFun)
                      eta
                      eta1)) -}
d86e43387f761667cae722e71468777a
  $dmliftBoolFun2 ::
    Algebra.Function.BoolFun2 a1 a2 =>
    (a1 -> a2 -> GHC.Types.Bool) -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLC(C(S))LL)L),1*U(1*U(A,A,A,A,1*C1(C1(U)),A,A),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   $dBoolFun2 :: Algebra.Function.BoolFun2 a1 a2
                   eta :: a1 -> a2 -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 GHC.Base.$
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Maybe.fromMaybe @ GHC.Types.Bool GHC.Types.False)
                   (Algebra.Function.liftLeft2
                      @ a1
                      @ a2
                      @ GHC.Types.Bool
                      (Algebra.Function.$p1BoolFun2 @ a1 @ a2 $dBoolFun2)
                      eta
                      eta1)) -}
60183979384d7a0155e3138c32932f2b
  $dmliftBoolFun3 ::
    Algebra.Function.BoolFun3 a1 a2 a3 =>
    (a1 -> a2 -> a3 -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLLC(C(S))LL)L),1*U(1*U(A,A,A,A,A,1*C1(C1(U)),A,A),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ a3
                   $dBoolFun3 :: Algebra.Function.BoolFun3 a1 a2 a3
                   eta :: a1 -> a2 -> a3 -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 GHC.Base.$
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ GHC.Types.Bool
                   (Data.Maybe.fromMaybe @ GHC.Types.Bool GHC.Types.False)
                   (Algebra.Function.liftLeft3
                      @ a1
                      @ a2
                      @ a3
                      @ GHC.Types.Bool
                      (Algebra.Function.$p1BoolFun3 @ a1 @ a2 @ a3 $dBoolFun3)
                      eta
                      eta1)) -}
4c627800360a8870abb62b7bff4a017b
  $dmliftEl ::
    Algebra.Function.LiftElem a b =>
    (a -> b) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,1*C1(C1(U)),A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ b
                   $dLiftElem :: Algebra.Function.LiftElem a b
                   f :: a -> b
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs -> Algebra.Function.liftEl' @ a @ b $dLiftElem f x }) -}
f375f5c1ebc48974eb003f459a04d936
  $dmliftEl' ::
    Algebra.Function.LiftElem a b =>
    (a -> b) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(A,1*U(1*C1(U),A),1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ b
                   $dLiftElem :: Algebra.Function.LiftElem a b
                   eta :: a -> b
                   eta1 :: Relvar.Elem ->
                 case Algebra.Function.liftLeft'
                        @ a
                        @ b
                        $dLiftElem
                        eta
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just z
                   -> Relvar.toElem
                        @ b
                        (Algebra.Function.$p2LiftElem @ a @ b $dLiftElem)
                        z }) -}
758d64138c0ae8fa0e76ce8c7afc1b3f
  $dmliftEl2 ::
    Algebra.Function.LiftElem2 a1 a2 b =>
    (a1 -> a2 -> b) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(C1(C1(U))),A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ b
                   $dLiftElem2 :: Algebra.Function.LiftElem2 a1 a2 b
                   f :: a1 -> a2 -> b
                   ds :: [Relvar.Elem] ->
                 let {
                   fail :: GHC.Prim.Void# -> Relvar.Elem {- Arity: 1 -}
                   = \ ds1 :: GHC.Prim.Void#[OneShot] -> Relvar.Nil
                 } in
                 case ds of wild {
                   [] -> fail GHC.Prim.void#
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> fail GHC.Prim.void#
                        : y xs
                        -> Algebra.Function.liftEl2'
                             @ a1
                             @ a2
                             @ b
                             $dLiftElem2
                             f
                             x
                             y } }) -}
d48283dcb47ee63992114b6fb91ff1e6
  $dmliftEl2' ::
    Algebra.Function.LiftElem2 a1 a2 b =>
    (a1 -> a2 -> b) -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLC(C(C(S)))LLL),U(A,A,1*U(1*C1(U),A),1*C1(C1(C1(U))),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ b
                   $dLiftElem2 :: Algebra.Function.LiftElem2 a1 a2 b
                   eta :: a1 -> a2 -> b
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Algebra.Function.liftLeft2'
                        @ a1
                        @ a2
                        @ b
                        $dLiftElem2
                        eta
                        eta1
                        eta2 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just z
                   -> Relvar.toElem
                        @ b
                        (Algebra.Function.$p3LiftElem2 @ a1 @ a2 @ b $dLiftElem2)
                        z }) -}
2a40f815f1f0e7a5bb0d1854a9a0c6e2
  $dmliftEl3 ::
    Algebra.Function.LiftElem3 a1 a2 a3 b =>
    (a1 -> a2 -> a3 -> b) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(C1(C1(C1(U)))),A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ a3
                   @ b
                   $dLiftElem3 :: Algebra.Function.LiftElem3 a1 a2 a3 b
                   f :: a1 -> a2 -> a3 -> b
                   ds :: [Relvar.Elem] ->
                 let {
                   fail :: GHC.Prim.Void# -> Relvar.Elem {- Arity: 1 -}
                   = \ ds1 :: GHC.Prim.Void#[OneShot] -> Relvar.Nil
                 } in
                 case ds of wild {
                   [] -> fail GHC.Prim.void#
                   : x1 ds1
                   -> case ds1 of wild1 {
                        [] -> fail GHC.Prim.void#
                        : x2 ds2
                        -> case ds2 of wild2 {
                             [] -> fail GHC.Prim.void#
                             : x3 xs
                             -> Algebra.Function.liftEl3'
                                  @ a1
                                  @ a2
                                  @ a3
                                  @ b
                                  $dLiftElem3
                                  f
                                  x1
                                  x2
                                  x3 } } }) -}
6a96a3ba3c78c5874716b5cbdd2f31be
  $dmliftEl3' ::
    Algebra.Function.LiftElem3 a1 a2 a3 b =>
    (a1 -> a2 -> a3 -> b)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLLC(C(C(C(S))))LLL),U(A,A,A,1*U(1*C1(U),A),1*C1(C1(C1(C1(U)))),A,A,A)><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ a3
                   @ b
                   $dLiftElem3 :: Algebra.Function.LiftElem3 a1 a2 a3 b
                   eta :: a1 -> a2 -> a3 -> b
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem
                   eta3 :: Relvar.Elem ->
                 case Algebra.Function.liftLeft3'
                        @ a1
                        @ a2
                        @ a3
                        @ b
                        $dLiftElem3
                        eta
                        eta1
                        eta2
                        eta3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just z
                   -> Relvar.toElem
                        @ b
                        (Algebra.Function.$p4LiftElem3 @ a1 @ a2 @ a3 @ b $dLiftElem3)
                        z }) -}
8b421f96d7dee06e6a8693864c1e62c8
  $dmliftLeft ::
    Algebra.Function.LiftElem a b =>
    (a -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
  {- Arity: 3,
     Strictness: <S(LLC(C(S))LLL),1*U(A,A,1*C1(C1(U)),A,A,A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ b
                   $dLiftElem :: Algebra.Function.LiftElem a b
                   f :: a -> b
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   []
                   -> GHC.Err.error
                        @ (GHC.Base.Maybe b)
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b1 ->
                            GHC.CString.unpackFoldrCString# @ b1 "Empty argument list"#))
                   : x xs -> Algebra.Function.liftLeft' @ a @ b $dLiftElem f x }) -}
b6d489d2f1aedb72ebef90d4fde74ed5
  $dmliftLeft' ::
    Algebra.Function.LiftElem a b =>
    (a -> b) -> Relvar.Elem -> GHC.Base.Maybe b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(S))LLLLL),1*U(1*U(A,1*C1(U)),A,A,A,A,A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   @ b
                   $dLiftElem :: Algebra.Function.LiftElem a b
                   eta :: a -> b
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ a
                        (Algebra.Function.$p1LiftElem @ a @ b $dLiftElem)
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ b
                   GHC.Base.Just x' -> GHC.Base.Just @ b (eta x') }) -}
39fe6ec26b51acacf3c505dc24b65cf6
  $dmliftLeft2 ::
    Algebra.Function.LiftElem2 a1 a2 b =>
    (a1 -> a2 -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
  {- Arity: 3,
     Strictness: <S(LLLC(C(C(S)))LLL),1*U(A,A,A,1*C1(C1(C1(U))),A,A,A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ b
                   $dLiftElem2 :: Algebra.Function.LiftElem2 a1 a2 b
                   f :: a1 -> a2 -> b
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   []
                   -> GHC.Err.error
                        @ (GHC.Base.Maybe b)
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b1 ->
                            GHC.CString.unpackFoldrCString# @ b1 "Empty argument list"#))
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> GHC.Err.error
                             @ (GHC.Base.Maybe b)
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b1 ->
                                 GHC.CString.unpackFoldrCString#
                                   @ b1
                                   "Argument list: Need 2 or more elements"#))
                        : y xs
                        -> Algebra.Function.liftLeft2'
                             @ a1
                             @ a2
                             @ b
                             $dLiftElem2
                             f
                             x
                             y } }) -}
6ca6354a9472e7bf6cf3817203f5e560
  $dmliftLeft2' ::
    Algebra.Function.LiftElem2 a1 a2 b =>
    (a1 -> a2 -> b) -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LC(S))LLLLLL),U(1*U(A,1*C1(U)),1*U(A,1*C1(U)),A,A,A,A,A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ b
                   $dLiftElem2 :: Algebra.Function.LiftElem2 a1 a2 b
                   eta :: a1 -> a2 -> b
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Base.Maybe b {- Arity: 1 -}
                   = \ ds :: GHC.Prim.Void#[OneShot] -> GHC.Base.Nothing @ b
                 } in
                 case Relvar.fromElem
                        @ a1
                        (Algebra.Function.$p1LiftElem2 @ a1 @ a2 @ b $dLiftElem2)
                        eta1 of wild {
                   GHC.Base.Nothing -> fail GHC.Prim.void#
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ a2
                             (Algebra.Function.$p2LiftElem2 @ a1 @ a2 @ b $dLiftElem2)
                             eta2 of wild1 {
                        GHC.Base.Nothing -> fail GHC.Prim.void#
                        GHC.Base.Just y' -> GHC.Base.Just @ b (eta x' y') } }) -}
053c090ba9e328c42b83e3b637526110
  $dmliftLeft3 ::
    Algebra.Function.LiftElem3 a1 a2 a3 b =>
    (a1 -> a2 -> a3 -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
  {- Arity: 3,
     Strictness: <S(LLLLC(C(C(C(S))))LLL),1*U(A,A,A,A,1*C1(C1(C1(C1(U)))),A,A,A)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ a3
                   @ b
                   $dLiftElem3 :: Algebra.Function.LiftElem3 a1 a2 a3 b
                   f :: a1 -> a2 -> a3 -> b
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   []
                   -> GHC.Err.error
                        @ (GHC.Base.Maybe b)
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b1 ->
                            GHC.CString.unpackFoldrCString# @ b1 "Empty argument list"#))
                   : x1 ds1
                   -> case ds1 of wild1 {
                        []
                        -> GHC.Err.error
                             @ (GHC.Base.Maybe b)
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b1 ->
                                 GHC.CString.unpackFoldrCString#
                                   @ b1
                                   "Argument list: Need 3 or more elements"#))
                        : x2 ds2
                        -> case ds2 of wild2 {
                             []
                             -> GHC.Err.error
                                  @ (GHC.Base.Maybe b)
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b1 ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b1
                                        "Argument list: Need 3 or more elements"#))
                             : x3 xs
                             -> Algebra.Function.liftLeft3'
                                  @ a1
                                  @ a2
                                  @ a3
                                  @ b
                                  $dLiftElem3
                                  f
                                  x1
                                  x2
                                  x3 } } }) -}
c4e8108c0ecc9f808a98a83a985ead11
  $dmliftLeft3' ::
    Algebra.Function.LiftElem3 a1 a2 a3 b =>
    (a1 -> a2 -> a3 -> b)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(S(LC(S))LLLLLLL),U(1*U(A,1*C1(U)),1*U(A,1*C1(U)),1*U(A,1*C1(U)),A,A,A,A,A)><L,1*C1(C1(C1(U)))><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a1
                   @ a2
                   @ a3
                   @ b
                   $dLiftElem3 :: Algebra.Function.LiftElem3 a1 a2 a3 b
                   eta :: a1 -> a2 -> a3 -> b
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem
                   eta3 :: Relvar.Elem ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Base.Maybe b {- Arity: 1 -}
                   = \ ds :: GHC.Prim.Void#[OneShot] -> GHC.Base.Nothing @ b
                 } in
                 case Relvar.fromElem
                        @ a1
                        (Algebra.Function.$p1LiftElem3 @ a1 @ a2 @ a3 @ b $dLiftElem3)
                        eta1 of wild {
                   GHC.Base.Nothing -> fail GHC.Prim.void#
                   GHC.Base.Just x1'
                   -> case Relvar.fromElem
                             @ a2
                             (Algebra.Function.$p2LiftElem3 @ a1 @ a2 @ a3 @ b $dLiftElem3)
                             eta2 of wild1 {
                        GHC.Base.Nothing -> fail GHC.Prim.void#
                        GHC.Base.Just x2'
                        -> case Relvar.fromElem
                                  @ a3
                                  (Algebra.Function.$p3LiftElem3 @ a1 @ a2 @ a3 @ b $dLiftElem3)
                                  eta3 of wild2 {
                             GHC.Base.Nothing -> fail GHC.Prim.void#
                             GHC.Base.Just x3' -> GHC.Base.Just @ b (eta x1' x2' x3') } } }) -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolBool ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2BoolBool3
                  Algebra.Function.$fBoolFun2BoolBool_$cliftBoolFun2 -}
f0eaa4a1fa6dfb7a6ac8c5682dcb24bf
  $fBoolFun2BoolBool1 :: GHC.Base.Maybe b
  {- Strictness: b -}
a2f20ec5f527c7d5544c9a960df9dc33
  $fBoolFun2BoolBool2 :: GHC.Base.Maybe b
  {- Strictness: b -}
16810bfa5a200f32b1dac942a1bc81ea
  $fBoolFun2BoolBool3 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolBool_$s$fLiftElem2BoolBoola -}
e5845593197d443357036da79d6a5b42
  $fBoolFun2BoolBool4 :: GHC.Base.Maybe GHC.Types.Bool
  {- Strictness: b -}
f81d706f2206b8940fbcfdf89cac09a8
  $fBoolFun2BoolBool5 :: GHC.Base.Maybe GHC.Types.Bool
  {- Strictness: b -}
8aae211a327711a2e1f1e3510ad14a73
  $fBoolFun2BoolBool_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
2ccb551274998453a5f90d6a8324409e
  $fBoolFun2BoolBool_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
c528aaf4ff827568d303f5f132345b1d
  $fBoolFun2BoolBool_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
4ede7c283e34326430b1e1020d9ffa42
  $fBoolFun2BoolBool_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
591bbb2df69b378986bbaf1b3898b4d8
  $fBoolFun2BoolBool_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolBool_$s$fLiftElem2BoolBoola ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolByteString ::
    Algebra.Function.BoolFun2
      GHC.Types.Bool Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2BoolByteString1
                  Algebra.Function.$fBoolFun2BoolByteString_$cliftBoolFun2 -}
7797bd4e58626bd9fabaaea833c135e2
  $fBoolFun2BoolByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolByteString_$s$fLiftElem2BoolByteStringa -}
c88d08089278cb28117e042a522d04f3
  $fBoolFun2BoolByteString_$cliftBoolFun2 ::
    (GHC.Types.Bool
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
b9773340f37b0386a1c7b3cff7c04df7
  $fBoolFun2BoolByteString_$s$cliftEl2 ::
    (GHC.Types.Bool
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
c7dedc2cba5c4fe58a153244b17e9368
  $fBoolFun2BoolByteString_$s$cliftEl2' ::
    (GHC.Types.Bool
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
c04f506eb7a651e8dc92efbe18786903
  $fBoolFun2BoolByteString_$s$cliftLeft2 ::
    (GHC.Types.Bool
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6544f75f5fc240c8a0ee8105763be647
  $fBoolFun2BoolByteString_$s$cliftLeft2' ::
    (GHC.Types.Bool
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolByteString_$s$fLiftElem2BoolByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolChar ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2BoolChar1
                  Algebra.Function.$fBoolFun2BoolChar_$cliftBoolFun2 -}
1b84c4af1e990c7261af4e7816d1076a
  $fBoolFun2BoolChar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolChar_$s$fLiftElem2BoolChara -}
f29693e1eed004cd2944163c450917eb
  $fBoolFun2BoolChar_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
3bb144c9fa18228c149eaf8ef7dfa95b
  $fBoolFun2BoolChar_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
ba0ecd725ecc8641b76cf46b77bc7c23
  $fBoolFun2BoolChar_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
f0e8fc344ec56b407aa8f1e3252b585e
  $fBoolFun2BoolChar_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e91aa3cb643cd5e1102ec4867ce73b54
  $fBoolFun2BoolChar_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolChar_$s$fLiftElem2BoolChara ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolDay ::
    Algebra.Function.BoolFun2
      GHC.Types.Bool Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2BoolDay1
                  Algebra.Function.$fBoolFun2BoolDay_$cliftBoolFun2 -}
0436e84dbf8d37ba7ac01a449b75ed71
  $fBoolFun2BoolDay1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolDay_$s$fLiftElem2BoolDaya -}
436e8098e7500745cb629f25945f66d3
  $fBoolFun2BoolDay_$cliftBoolFun2 ::
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
52c3d7f151642ad4c5ae7831a703a7e2
  $fBoolFun2BoolDay_$s$cliftEl2 ::
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
6bae81c8f95a7b454e44abd1a254ba73
  $fBoolFun2BoolDay_$s$cliftEl2' ::
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
311d6ee3131c79ccc63de6e53ad47545
  $fBoolFun2BoolDay_$s$cliftLeft2 ::
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
2e56f95032b0c40215477e03c3c8b791
  $fBoolFun2BoolDay_$s$cliftLeft2' ::
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolDay_$s$fLiftElem2BoolDaya ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolDouble ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2BoolDouble1
                  Algebra.Function.$fBoolFun2BoolDouble_$cliftBoolFun2 -}
cf88787b6989c9bc1486b4ae819b6706
  $fBoolFun2BoolDouble1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolDouble_$s$fLiftElem2BoolDoublea -}
51da418be86b0d4d126195f2574d7ba6
  $fBoolFun2BoolDouble_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
ccbbbdd2bc212716400cf680ac95bb11
  $fBoolFun2BoolDouble_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
91d4e3e5d41fadf958a7a581b33ba4c7
  $fBoolFun2BoolDouble_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
b18cd27da288b78d26fc2741b5d305de
  $fBoolFun2BoolDouble_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
88c26b0095fb85a91a6c0891a271fc06
  $fBoolFun2BoolDouble_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolDouble_$s$fLiftElem2BoolDoublea ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolInt ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2BoolInt1
                  Algebra.Function.$fBoolFun2BoolInt_$cliftBoolFun2 -}
8f79b95bbf8c18e9e94f7a9881a0ed66
  $fBoolFun2BoolInt1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolInt_$s$fLiftElem2BoolInta -}
c3da347617eecabc16b3de41fb08620e
  $fBoolFun2BoolInt_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
274be7508dadd38929d58a00ab7225ed
  $fBoolFun2BoolInt_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
76b5ddc7510354ede67f5bdf9af11c97
  $fBoolFun2BoolInt_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
f84213c9fd0ccd145fb2d1e52c2dd900
  $fBoolFun2BoolInt_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
76b3e621fed34200f6bc9bc980ac6deb
  $fBoolFun2BoolInt_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolInt_$s$fLiftElem2BoolInta ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolInteger ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2BoolInteger1
                  Algebra.Function.$fBoolFun2BoolInteger_$cliftBoolFun2 -}
e6c96e03187ee328e9e9a21de52fc0a0
  $fBoolFun2BoolInteger1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolInteger_$s$fLiftElem2BoolIntegera -}
92542b16fcc15782eba84f2953e739d7
  $fBoolFun2BoolInteger_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
ed56a30e93c97ca214d7e83c4f13a352
  $fBoolFun2BoolInteger_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
f1d8acc286a308086fa18d0ec30bc6b2
  $fBoolFun2BoolInteger_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
b5de3f4b6d0292af807f6eccb746711c
  $fBoolFun2BoolInteger_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
82eb6a90a266567284cc1ace1af10dab
  $fBoolFun2BoolInteger_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolInteger_$s$fLiftElem2BoolIntegera ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolRelvar ::
    Algebra.Function.BoolFun2 GHC.Types.Bool Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2BoolRelvar1
                  Algebra.Function.$fBoolFun2BoolRelvar_$cliftBoolFun2 -}
4e880a8184ed63868b338d6be1b95d22
  $fBoolFun2BoolRelvar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolRelvar_$s$fLiftElem2BoolRelvara -}
331b845e21507e45a1f040d13f7803a1
  $fBoolFun2BoolRelvar_$cliftBoolFun2 ::
    (GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
c90be90d953390c89fad1a01149081f6
  $fBoolFun2BoolRelvar_$s$cliftEl2 ::
    (GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
6e706caaf26cc581f6b0ec590cb7d2f0
  $fBoolFun2BoolRelvar_$s$cliftEl2' ::
    (GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
d5171e3c985ecdbc7330cf93d5ab4cee
  $fBoolFun2BoolRelvar_$s$cliftLeft2 ::
    (GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
f6c94964c0486bb31737ba8f6ed0e014
  $fBoolFun2BoolRelvar_$s$cliftLeft2' ::
    (GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolRelvar_$s$fLiftElem2BoolRelvara ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolText ::
    Algebra.Function.BoolFun2 GHC.Types.Bool Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2BoolText1
                  Algebra.Function.$fBoolFun2BoolText_$cliftBoolFun2 -}
684934dcd9b02e638fb796caa2377d5e
  $fBoolFun2BoolText1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolText_$s$fLiftElem2BoolTexta -}
d8bf568321357b8acf1082e2813590da
  $fBoolFun2BoolText_$cliftBoolFun2 ::
    (GHC.Types.Bool -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
ae25884f2baace0acbd2f121b179b39d
  $fBoolFun2BoolText_$s$cliftEl2 ::
    (GHC.Types.Bool -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
a0443b615ef44aea45034fac49318384
  $fBoolFun2BoolText_$s$cliftEl2' ::
    (GHC.Types.Bool -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
42080fd95f640414d343e642cfa2920c
  $fBoolFun2BoolText_$s$cliftLeft2 ::
    (GHC.Types.Bool -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d89e739aacffbeabd2b9367ba8323c12
  $fBoolFun2BoolText_$s$cliftLeft2' ::
    (GHC.Types.Bool -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolText_$s$fLiftElem2BoolTexta ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2BoolUTCTime ::
    Algebra.Function.BoolFun2
      GHC.Types.Bool Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2BoolUTCTime1
                  Algebra.Function.$fBoolFun2BoolUTCTime_$cliftBoolFun2 -}
469d9650309274868051c00d0eea6baf
  $fBoolFun2BoolUTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2BoolUTCTime_$s$fLiftElem2BoolUTCTimea -}
079763bd0bd8e89529c8a6b2f725411d
  $fBoolFun2BoolUTCTime_$cliftBoolFun2 ::
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
4e5587f83bb8b6f4665d96b4305fcd30
  $fBoolFun2BoolUTCTime_$s$cliftEl2 ::
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
e9219400bfc0d973200eee467b152e02
  $fBoolFun2BoolUTCTime_$s$cliftEl2' ::
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
2fa0e6edb0325fd5393e0d467b79260a
  $fBoolFun2BoolUTCTime_$s$cliftLeft2 ::
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7481d198758fc026a5e74fb69cea3d67
  $fBoolFun2BoolUTCTime_$s$cliftLeft2' ::
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2BoolUTCTime_$s$fLiftElem2BoolUTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Bool[] ::
    Algebra.Function.BoolFun2 GHC.Types.Bool GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Bool[]1
                  Algebra.Function.$fBoolFun2Bool[]_$cliftBoolFun2 -}
633aea5179786957f3ca51886e851d26
  $fBoolFun2Bool[]1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Bool[]_$s$fLiftElem2Bool[]a -}
8756d0c7dfeceab8620036417c460e93
  $fBoolFun2Bool[]_$cliftBoolFun2 ::
    (GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Bool
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
4f847db9fcbc2b0d6ce3ba201ce7bd31
  $fBoolFun2Bool[]_$s$cliftEl2 ::
    (GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
7564cff58361fc3b73381cb1b4926919
  $fBoolFun2Bool[]_$s$cliftEl2' ::
    (GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
06b82ceb47c7659434d163be9451f840
  $fBoolFun2Bool[]_$s$cliftLeft2 ::
    (GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Bool
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.B x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
a400f23b648a718333fe874848fbcc8f
  $fBoolFun2Bool[]_$s$cliftLeft2' ::
    (GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Bool[]_$s$fLiftElem2Bool[]a ::
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Bool[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Bool[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Bool[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Bool[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringBool ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2ByteStringBool1
                  Algebra.Function.$fBoolFun2ByteStringBool_$cliftBoolFun2 -}
443545861bc83204e422c21d52c4c9c3
  $fBoolFun2ByteStringBool1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringBool_$s$fLiftElem2ByteStringBoola -}
3332f6efabe2541c47b229afb99adff8
  $fBoolFun2ByteStringBool_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
c902e7e5fd20cabe48792f4b5b65584a
  $fBoolFun2ByteStringBool_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
e99cd44f080830b302097d7f26c9d5ad
  $fBoolFun2ByteStringBool_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
b2bb6547879770e8fca514a7a8093b4b
  $fBoolFun2ByteStringBool_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
a3f0b642c1712753f5dc4c7e64a2c3f1
  $fBoolFun2ByteStringBool_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringBool_$s$fLiftElem2ByteStringBoola ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringByteString ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2ByteStringByteString1
                  Algebra.Function.$fBoolFun2ByteStringByteString_$cliftBoolFun2 -}
6f1538f05ca6b6f4467b1f339dbce4e6
  $fBoolFun2ByteStringByteString1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringByteString_$s$fLiftElem2ByteStringByteStringa -}
3c57fb84baeb096962670c57a5ef7408
  $fBoolFun2ByteStringByteString_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
aa384d15c83fb07a4d35077f94f4dc53
  $fBoolFun2ByteStringByteString_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
a8642696fa6375dfac7ff91fd0217d93
  $fBoolFun2ByteStringByteString_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
48939cfa400f1f55477127b719bef646
  $fBoolFun2ByteStringByteString_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
74337f7d0c6af2775ca8a3c48a8a7920
  $fBoolFun2ByteStringByteString_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringByteString_$s$fLiftElem2ByteStringByteStringa ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringChar ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2ByteStringChar1
                  Algebra.Function.$fBoolFun2ByteStringChar_$cliftBoolFun2 -}
8f79ea72d45cc0286f8e5817b8c39c13
  $fBoolFun2ByteStringChar1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringChar_$s$fLiftElem2ByteStringChara -}
cb3d688373f63f4e003c5dc372ec2d2b
  $fBoolFun2ByteStringChar_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
f6b502f6f5f8055f3fc871201011d64f
  $fBoolFun2ByteStringChar_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
8555155c10b3e9625cf7ef6ba3f587af
  $fBoolFun2ByteStringChar_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
0056866734fd72f4b57cc42a66dd4df8
  $fBoolFun2ByteStringChar_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e117da684dc18ffd844e9bd1c879d89f
  $fBoolFun2ByteStringChar_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringChar_$s$fLiftElem2ByteStringChara ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringDay ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2ByteStringDay1
                  Algebra.Function.$fBoolFun2ByteStringDay_$cliftBoolFun2 -}
5ca819a744ff1a5e64631cd8f3b87920
  $fBoolFun2ByteStringDay1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringDay_$s$fLiftElem2ByteStringDaya -}
e6e0d79a3f48863f01335b0000a169f4
  $fBoolFun2ByteStringDay_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
d6cdc5e3c1e860714000b3242729daf9
  $fBoolFun2ByteStringDay_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
25297868f83ef92f492b543049a96b64
  $fBoolFun2ByteStringDay_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
b551c52fe731e00dd44ebf0b0000ae10
  $fBoolFun2ByteStringDay_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
c046ec0bbd0d07d8b2028962373c96df
  $fBoolFun2ByteStringDay_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringDay_$s$fLiftElem2ByteStringDaya ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringDouble ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2ByteStringDouble1
                  Algebra.Function.$fBoolFun2ByteStringDouble_$cliftBoolFun2 -}
4a2fd17785cc15a76b16601ff3bcbc53
  $fBoolFun2ByteStringDouble1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringDouble_$s$fLiftElem2ByteStringDoublea -}
97263f8f5a0707840faefe71992fb0dd
  $fBoolFun2ByteStringDouble_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
080c9a9dcbe899b68e0f1a77ee5dba20
  $fBoolFun2ByteStringDouble_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
f9942c11dc7c0f75f578d2bf59703ac5
  $fBoolFun2ByteStringDouble_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
c00c86aa93a9e33a84b15068998c00a1
  $fBoolFun2ByteStringDouble_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
12cd7c0c55e0637f3c803e8b3a74a68a
  $fBoolFun2ByteStringDouble_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringDouble_$s$fLiftElem2ByteStringDoublea ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringInt ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2ByteStringInt1
                  Algebra.Function.$fBoolFun2ByteStringInt_$cliftBoolFun2 -}
988ded10114f46648979628739f235bc
  $fBoolFun2ByteStringInt1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringInt_$s$fLiftElem2ByteStringInta -}
6325e71366fa3ae79682e197040340e7
  $fBoolFun2ByteStringInt_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
0d05ef379095966e325a7498d272db6a
  $fBoolFun2ByteStringInt_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
facee7b5c3c76685472442d501a7c84a
  $fBoolFun2ByteStringInt_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
e340080c7f11b603c84ba24031f10e5d
  $fBoolFun2ByteStringInt_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0aa1026bb97146c3a84b31d6904f8b5a
  $fBoolFun2ByteStringInt_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringInt_$s$fLiftElem2ByteStringInta ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringInteger ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2ByteStringInteger1
                  Algebra.Function.$fBoolFun2ByteStringInteger_$cliftBoolFun2 -}
563e3887d58f42b2c7b2ea5050a97f89
  $fBoolFun2ByteStringInteger1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      GHC.Integer.Type.Integer
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringInteger_$s$fLiftElem2ByteStringIntegera -}
8f4626b19ed55c336febcfcb26906b77
  $fBoolFun2ByteStringInteger_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
c3a4c1d2074dcf73f4814e0863da1e3c
  $fBoolFun2ByteStringInteger_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
98780b6211b04a2f5aa53e6d8163d2e2
  $fBoolFun2ByteStringInteger_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
8cea4028c6d15920c7618aae9f17aeb7
  $fBoolFun2ByteStringInteger_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
11ec1fc8284d51c9dc40f4342fa30f8e
  $fBoolFun2ByteStringInteger_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringInteger_$s$fLiftElem2ByteStringIntegera ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      GHC.Integer.Type.Integer
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringRelvar ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2ByteStringRelvar1
                  Algebra.Function.$fBoolFun2ByteStringRelvar_$cliftBoolFun2 -}
4af37e6e8c8d7dd0d7883130410804dd
  $fBoolFun2ByteStringRelvar1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringRelvar_$s$fLiftElem2ByteStringRelvara -}
cfb8c79bd5f30a9bd22c339d7ff04581
  $fBoolFun2ByteStringRelvar_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
603a08f0c41f986814620e6805addea3
  $fBoolFun2ByteStringRelvar_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
fc0d23058299ca273a8e70a9fb8d9e19
  $fBoolFun2ByteStringRelvar_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
27dd4230f3f14c4d873aa8550e7129d3
  $fBoolFun2ByteStringRelvar_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7c9af129dc0dd44d23ab851aae4979a5
  $fBoolFun2ByteStringRelvar_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringRelvar_$s$fLiftElem2ByteStringRelvara ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringText ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2ByteStringText1
                  Algebra.Function.$fBoolFun2ByteStringText_$cliftBoolFun2 -}
9a57b8e9f97836cd4d17a6252daf0873
  $fBoolFun2ByteStringText1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Text.Internal.Text
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringText_$s$fLiftElem2ByteStringTexta -}
80cb560ccb7013fa2e07638c5af771a7
  $fBoolFun2ByteStringText_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
4abb49b9fd2b65cb98792c2d4e0b5d52
  $fBoolFun2ByteStringText_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
eba3a67459218d959cb416a8895998b1
  $fBoolFun2ByteStringText_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
8eed9ba405aa700bf742acbd311e5726
  $fBoolFun2ByteStringText_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
647492785968f801926024a29b84fddc
  $fBoolFun2ByteStringText_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringText_$s$fLiftElem2ByteStringTexta ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Text.Internal.Text
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteStringUTCTime ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2ByteStringUTCTime1
                  Algebra.Function.$fBoolFun2ByteStringUTCTime_$cliftBoolFun2 -}
d76ceb03b1bb9e365a3a3bea2e74aa2b
  $fBoolFun2ByteStringUTCTime1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$fLiftElem2ByteStringUTCTimea -}
f2e0718caf472ae2527ed06c77f8b894
  $fBoolFun2ByteStringUTCTime_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
ca2bed3f2aa8fcd7eed339f6cdf7a44b
  $fBoolFun2ByteStringUTCTime_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
603431b37928dffb4613befd61ccd3ca
  $fBoolFun2ByteStringUTCTime_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
19c72728882431b4be689c1b7e33dfed
  $fBoolFun2ByteStringUTCTime_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0514136dd5a227e02a4e59f84b67c869
  $fBoolFun2ByteStringUTCTime_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteStringUTCTime_$s$fLiftElem2ByteStringUTCTimea ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2ByteString[] ::
    Algebra.Function.BoolFun2
      Data.ByteString.Internal.ByteString GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2ByteString[]1
                  Algebra.Function.$fBoolFun2ByteString[]_$cliftBoolFun2 -}
b79df408d3d899eb9115f4254d7e9885
  $fBoolFun2ByteString[]1 ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2ByteString[]_$s$fLiftElem2ByteString[]a -}
d7ce02742f3d946353b44a8d502a4cc9
  $fBoolFun2ByteString[]_$cliftBoolFun2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
19388d12df7f7797101a172c7fe47f63
  $fBoolFun2ByteString[]_$s$cliftEl2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
6b405b98502cdf2a7e916b9ad9dae177
  $fBoolFun2ByteString[]_$s$cliftEl2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
c4e0c4935b158ce22fc2f47dbcd8c725
  $fBoolFun2ByteString[]_$s$cliftLeft2 ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.ByteString.Internal.ByteString
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.BS x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
af4ce8f9a714cdd4d2e013a3d1049421
  $fBoolFun2ByteString[]_$s$cliftLeft2' ::
    (Data.ByteString.Internal.ByteString
     -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2ByteString[]_$s$fLiftElem2ByteString[]a ::
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2ByteString[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2ByteString[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2ByteString[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2ByteString[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharBool ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2CharBool1
                  Algebra.Function.$fBoolFun2CharBool_$cliftBoolFun2 -}
bf51c53951c2d2e9782869f954c47667
  $fBoolFun2CharBool1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharBool_$s$fLiftElem2CharBoola -}
9f14e30e08f6ac41e59da5659f83c7c2
  $fBoolFun2CharBool_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
c253e97e137ee5bc122ce7c172a4af66
  $fBoolFun2CharBool_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
db85d9e125afeb560e8f869c00f98783
  $fBoolFun2CharBool_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
97b400a38fc976d168e755a99049ccfc
  $fBoolFun2CharBool_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
68640524dbf20c79ff22e1a34eda4205
  $fBoolFun2CharBool_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharBool_$s$fLiftElem2CharBoola ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharByteString ::
    Algebra.Function.BoolFun2
      GHC.Types.Char Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2CharByteString1
                  Algebra.Function.$fBoolFun2CharByteString_$cliftBoolFun2 -}
ae757400ec343d65478c0d2f39a8f8f2
  $fBoolFun2CharByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharByteString_$s$fLiftElem2CharByteStringa -}
a1397fe507c0d69c08ac92545dba700c
  $fBoolFun2CharByteString_$cliftBoolFun2 ::
    (GHC.Types.Char
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
f42d309852ec985947d607a1668696ec
  $fBoolFun2CharByteString_$s$cliftEl2 ::
    (GHC.Types.Char
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
4b1bc1d5c2508dbadb84b059f3dd0b22
  $fBoolFun2CharByteString_$s$cliftEl2' ::
    (GHC.Types.Char
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
8405dd1b8a57d12f46f2759df04b853b
  $fBoolFun2CharByteString_$s$cliftLeft2 ::
    (GHC.Types.Char
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
5333df87a2967cfa4067a2fac8465dc6
  $fBoolFun2CharByteString_$s$cliftLeft2' ::
    (GHC.Types.Char
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharByteString_$s$fLiftElem2CharByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharChar ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2CharChar1
                  Algebra.Function.$fBoolFun2CharChar_$cliftBoolFun2 -}
0f891fdb32abfbdf1d7fc7f1c0c1b1f2
  $fBoolFun2CharChar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharChar_$s$fLiftElem2CharChara -}
2ce8680e605435475eee79a0d6af3910
  $fBoolFun2CharChar_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
909394ba7df8799a29f2c0ab334744ec
  $fBoolFun2CharChar_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
72be32c314303f1316763f26624858f6
  $fBoolFun2CharChar_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
f0e36c4343468784a032de584b549cbc
  $fBoolFun2CharChar_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
2cfc0578c849b982868f555b4516e065
  $fBoolFun2CharChar_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharChar_$s$fLiftElem2CharChara ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharDay ::
    Algebra.Function.BoolFun2
      GHC.Types.Char Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2CharDay1
                  Algebra.Function.$fBoolFun2CharDay_$cliftBoolFun2 -}
4f121b4cc59c1b549edf4be6b4c99fc1
  $fBoolFun2CharDay1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharDay_$s$fLiftElem2CharDaya -}
00393a6294fc268a40a2e548a6d8c2e8
  $fBoolFun2CharDay_$cliftBoolFun2 ::
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
8ddbb7e68f676be9574823a639ebfdb8
  $fBoolFun2CharDay_$s$cliftEl2 ::
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
a3392a19578f97b712a08c53c0eed285
  $fBoolFun2CharDay_$s$cliftEl2' ::
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
a2f7e03a64fb9e8f6d0170d3bb4e3b43
  $fBoolFun2CharDay_$s$cliftLeft2 ::
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
1cd2b445608f71b16e835a62e8568045
  $fBoolFun2CharDay_$s$cliftLeft2' ::
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharDay_$s$fLiftElem2CharDaya ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharDouble ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2CharDouble1
                  Algebra.Function.$fBoolFun2CharDouble_$cliftBoolFun2 -}
2adbca07be5477bb2704dc1c2c10a09c
  $fBoolFun2CharDouble1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharDouble_$s$fLiftElem2CharDoublea -}
00288931a8e1782e6aab8b04ebcd72fb
  $fBoolFun2CharDouble_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
cec04f01bb6dbec7eac9ce753b1bebf2
  $fBoolFun2CharDouble_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
75807fb6463f7df19f05e73536bfe95d
  $fBoolFun2CharDouble_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
3dbb2783c4f4492e34e5765c7c95767f
  $fBoolFun2CharDouble_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e08072fa18952941c11515f5d00c420e
  $fBoolFun2CharDouble_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharDouble_$s$fLiftElem2CharDoublea ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharInt ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2CharInt1
                  Algebra.Function.$fBoolFun2CharInt_$cliftBoolFun2 -}
9095b79e030f51c8d8083809ff0537f8
  $fBoolFun2CharInt1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharInt_$s$fLiftElem2CharInta -}
41e37a06fa59df864e980360f3d277c6
  $fBoolFun2CharInt_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
f6d026fbb2b7cb3bdb31a4cc28a2d23d
  $fBoolFun2CharInt_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
4ec67446f6d20781692912dadfcee0f7
  $fBoolFun2CharInt_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
804b98c77b0dfc1b9c2f178cc6910094
  $fBoolFun2CharInt_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
bf88bb510e2510345c2e69dbbfc57dca
  $fBoolFun2CharInt_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharInt_$s$fLiftElem2CharInta ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharInteger ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2CharInteger1
                  Algebra.Function.$fBoolFun2CharInteger_$cliftBoolFun2 -}
75819ddad6479d049d5a270a55517881
  $fBoolFun2CharInteger1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharInteger_$s$fLiftElem2CharIntegera -}
5ef55c7e9ed4a9842dd4d4306f7faedf
  $fBoolFun2CharInteger_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
d5ac6a45924561f633cfb332864405f8
  $fBoolFun2CharInteger_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
2d06f021eb5278e39964c1552285dc4a
  $fBoolFun2CharInteger_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
c91066e3e5d88459ed0b5d4331f94e5a
  $fBoolFun2CharInteger_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
54dd7d47a3447f113cd8c30ff4213f75
  $fBoolFun2CharInteger_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharInteger_$s$fLiftElem2CharIntegera ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharRelvar ::
    Algebra.Function.BoolFun2 GHC.Types.Char Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2CharRelvar1
                  Algebra.Function.$fBoolFun2CharRelvar_$cliftBoolFun2 -}
53971a95baf58df3d81224d06c2dd9d3
  $fBoolFun2CharRelvar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharRelvar_$s$fLiftElem2CharRelvara -}
0bbdb486a23f9d4bc3d430655ffeb9d6
  $fBoolFun2CharRelvar_$cliftBoolFun2 ::
    (GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
86bb0fba6c076d5272edde6dc8dd7e11
  $fBoolFun2CharRelvar_$s$cliftEl2 ::
    (GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
aff589df54f71f0c267c8721d80a58d0
  $fBoolFun2CharRelvar_$s$cliftEl2' ::
    (GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
308e24b83117b46e094045654fa7b2c6
  $fBoolFun2CharRelvar_$s$cliftLeft2 ::
    (GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d7d506b079da4033a91925209c68c1fa
  $fBoolFun2CharRelvar_$s$cliftLeft2' ::
    (GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharRelvar_$s$fLiftElem2CharRelvara ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharText ::
    Algebra.Function.BoolFun2 GHC.Types.Char Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2CharText1
                  Algebra.Function.$fBoolFun2CharText_$cliftBoolFun2 -}
024a7f45915732ae8234cf78863bebb9
  $fBoolFun2CharText1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharText_$s$fLiftElem2CharTexta -}
d6fe059c364ca85afb74bdd7e160238e
  $fBoolFun2CharText_$cliftBoolFun2 ::
    (GHC.Types.Char -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
cf0b6bd3236d2f48700717e0ff5199d0
  $fBoolFun2CharText_$s$cliftEl2 ::
    (GHC.Types.Char -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
0c789bf020d094ff2d5f0dfc1dd632f0
  $fBoolFun2CharText_$s$cliftEl2' ::
    (GHC.Types.Char -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
e434ac95ae18997d2f6d90ad2b3b9988
  $fBoolFun2CharText_$s$cliftLeft2 ::
    (GHC.Types.Char -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
f8d6f01e4268e5a08459d5bf095694f6
  $fBoolFun2CharText_$s$cliftLeft2' ::
    (GHC.Types.Char -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharText_$s$fLiftElem2CharTexta ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2CharUTCTime ::
    Algebra.Function.BoolFun2
      GHC.Types.Char Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2CharUTCTime1
                  Algebra.Function.$fBoolFun2CharUTCTime_$cliftBoolFun2 -}
a6c936c01ce65c5fc0a4753217bc08f2
  $fBoolFun2CharUTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2CharUTCTime_$s$fLiftElem2CharUTCTimea -}
5c113fe2d4aa531bf844988a647c527b
  $fBoolFun2CharUTCTime_$cliftBoolFun2 ::
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
c523682deb66d9a2be893f201874bdd5
  $fBoolFun2CharUTCTime_$s$cliftEl2 ::
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
2f509b48ea78411312682a12798d497c
  $fBoolFun2CharUTCTime_$s$cliftEl2' ::
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
c3e874fc0ffb8aa872b1b9a2d80c14e8
  $fBoolFun2CharUTCTime_$s$cliftLeft2 ::
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
849a92e93616e7c4cd3bb41e9a943636
  $fBoolFun2CharUTCTime_$s$cliftLeft2' ::
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2CharUTCTime_$s$fLiftElem2CharUTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Char[] ::
    Algebra.Function.BoolFun2 GHC.Types.Char GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Char[]1
                  Algebra.Function.$fBoolFun2Char[]_$cliftBoolFun2 -}
3c7a6a248298bb56432e104e6e4319bc
  $fBoolFun2Char[]1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Char[]_$s$fLiftElem2Char[]a -}
2c46bf8800f4fcc2beceba47a1864ecb
  $fBoolFun2Char[]_$cliftBoolFun2 ::
    (GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Char
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
457dfef6f3d9d32afd0cade998d7b2eb
  $fBoolFun2Char[]_$s$cliftEl2 ::
    (GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
b6d83a9d2588ab0b6d5d59f6e402ae0c
  $fBoolFun2Char[]_$s$cliftEl2' ::
    (GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
8343148ffcb332899be01f5da2774f69
  $fBoolFun2Char[]_$s$cliftLeft2 ::
    (GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Char
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.C x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
72391ade407e38565f66b06152bea845
  $fBoolFun2Char[]_$s$cliftLeft2' ::
    (GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Char[]_$s$fLiftElem2Char[]a ::
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Char[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Char[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Char[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Char[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayBool ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2DayBool1
                  Algebra.Function.$fBoolFun2DayBool_$cliftBoolFun2 -}
006f000e040f87052c5b7f914a480819
  $fBoolFun2DayBool1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayBool_$s$fLiftElem2DayBoola -}
c75c17e3fd2ea11e50f84fa783605050
  $fBoolFun2DayBool_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
829200e54b5b33ce7ceaf665f25f929a
  $fBoolFun2DayBool_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
0e4e278d837e7b731498bbb31ebf62e7
  $fBoolFun2DayBool_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
0607e4ea101e99b7d6e72466e8b7eb04
  $fBoolFun2DayBool_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
00b4d9255065b4deb3fea17d7c1f09b1
  $fBoolFun2DayBool_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayBool_$s$fLiftElem2DayBoola ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayByteString ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2DayByteString1
                  Algebra.Function.$fBoolFun2DayByteString_$cliftBoolFun2 -}
2e9992705b85abe1e4ed91a036af8d3e
  $fBoolFun2DayByteString1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayByteString_$s$fLiftElem2DayByteStringa -}
3ff59ae4489cbe46bef412f6bb63e430
  $fBoolFun2DayByteString_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
9e7766d96b98166e8db8663101b5a6d4
  $fBoolFun2DayByteString_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
8b34a977247a5c0a7994a2b94e6456e2
  $fBoolFun2DayByteString_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
ab1003e7a96416c2083e0de13ec1977e
  $fBoolFun2DayByteString_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
cf2a4c62e206f0b21b5f5c9e3254b3b1
  $fBoolFun2DayByteString_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayByteString_$s$fLiftElem2DayByteStringa ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayChar ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2DayChar1
                  Algebra.Function.$fBoolFun2DayChar_$cliftBoolFun2 -}
6eb287bef4d4ae135e929bc99c1e5746
  $fBoolFun2DayChar1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayChar_$s$fLiftElem2DayChara -}
d600359da19a2e940cb49c1dbe4996b0
  $fBoolFun2DayChar_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
0e33dae775b834bcf5f85a0aa000c4db
  $fBoolFun2DayChar_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
87b21cfb1602bca8da0f5d83534b0cb5
  $fBoolFun2DayChar_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
00f03484661cf8c4cfa04ccc57db840e
  $fBoolFun2DayChar_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
177a0e898801ec182b8637d9952ec015
  $fBoolFun2DayChar_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayChar_$s$fLiftElem2DayChara ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayDay ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2DayDay1
                  Algebra.Function.$fBoolFun2DayDay_$cliftBoolFun2 -}
8a7d9061dc0d886cc3fb9fd5c5d49b74
  $fBoolFun2DayDay1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayDay_$s$fLiftElem2DayDaya -}
197e0c72deb1be8999fb847880e6ee30
  $fBoolFun2DayDay_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
eefe1fe1b0981437d6448965b3b9eb2b
  $fBoolFun2DayDay_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
9711f22e793e7a18616a16e421893cba
  $fBoolFun2DayDay_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
947532ab0b634a02dba776792d7cda92
  $fBoolFun2DayDay_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
a9728afb12587a20bfe8f13b3d94f5c6
  $fBoolFun2DayDay_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayDay_$s$fLiftElem2DayDaya ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayDouble ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2DayDouble1
                  Algebra.Function.$fBoolFun2DayDouble_$cliftBoolFun2 -}
db67ca60e3682abbd9ca8b4ff2ed7d75
  $fBoolFun2DayDouble1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayDouble_$s$fLiftElem2DayDoublea -}
25d0eb8251c8341d7bb4600f5a4752b3
  $fBoolFun2DayDouble_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
412e30469f47c5bf75f990a6f2896c16
  $fBoolFun2DayDouble_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
ebdf73c63fdaeff5030c2b77145159f2
  $fBoolFun2DayDouble_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
699e3e150de2a006529933e1497f9dc4
  $fBoolFun2DayDouble_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
8e6ffcfd1121a4598d6342b3d64f1427
  $fBoolFun2DayDouble_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayDouble_$s$fLiftElem2DayDoublea ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayInt ::
    Algebra.Function.BoolFun2 Data.Time.Calendar.Days.Day GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2DayInt1
                  Algebra.Function.$fBoolFun2DayInt_$cliftBoolFun2 -}
23e0b2082c3fccd0ea626c9c7638db4a
  $fBoolFun2DayInt1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayInt_$s$fLiftElem2DayInta -}
1e0adcd848185be4d0c776bcea07d275
  $fBoolFun2DayInt_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
9e7ce9ca78f58eba12a47787ed16568b
  $fBoolFun2DayInt_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
ce6d0b56db5363cd74584430436745b6
  $fBoolFun2DayInt_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
552a46b93572d2a984bd3c584361dd5c
  $fBoolFun2DayInt_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e049c2543929175ae24352787aec2cc5
  $fBoolFun2DayInt_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayInt_$s$fLiftElem2DayInta ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayInteger ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2DayInteger1
                  Algebra.Function.$fBoolFun2DayInteger_$cliftBoolFun2 -}
da33f701363a88655291329debfadd77
  $fBoolFun2DayInteger1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayInteger_$s$fLiftElem2DayIntegera -}
e65d48ab99e32020acd1055a0e51c189
  $fBoolFun2DayInteger_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
d0e51adb2f7c0e4ff31e967d4cc469e6
  $fBoolFun2DayInteger_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
2d6e8aa0ddfcd13b9f1fb754e02a5100
  $fBoolFun2DayInteger_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
9054719a928f0ea61e7d615c6bf2a0a6
  $fBoolFun2DayInteger_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
b3c7dc3dd6a4495978401fead569cdbb
  $fBoolFun2DayInteger_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayInteger_$s$fLiftElem2DayIntegera ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayRelvar ::
    Algebra.Function.BoolFun2 Data.Time.Calendar.Days.Day Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2DayRelvar1
                  Algebra.Function.$fBoolFun2DayRelvar_$cliftBoolFun2 -}
632c9637846cbf7c7ba41e4699bbce57
  $fBoolFun2DayRelvar1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayRelvar_$s$fLiftElem2DayRelvara -}
6241b50ca286b35860b74d69d10837aa
  $fBoolFun2DayRelvar_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
e60a41fd6b2cb8467fe750feadd280e1
  $fBoolFun2DayRelvar_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
78fbc7db4ca01c26a1d2a3d835af60e8
  $fBoolFun2DayRelvar_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
4c8ef8e8747e4d04de1d1cac205ec20b
  $fBoolFun2DayRelvar_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0ebfeb665c1f52503266ea6acaaace7c
  $fBoolFun2DayRelvar_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayRelvar_$s$fLiftElem2DayRelvara ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayText ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2DayText1
                  Algebra.Function.$fBoolFun2DayText_$cliftBoolFun2 -}
9fe336274f65910fbb919590041a3fde
  $fBoolFun2DayText1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayText_$s$fLiftElem2DayTexta -}
38a1d3ba36852a0b595c332a0b57f322
  $fBoolFun2DayText_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
5ad6a0d9ba79972389bd9581f1320fb2
  $fBoolFun2DayText_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
94434ea06daa4d8b4f4b796a2f07d748
  $fBoolFun2DayText_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
87f147500e2522b7716af92c921d9d79
  $fBoolFun2DayText_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
020427b9ce5a53464d9a69452cd1df81
  $fBoolFun2DayText_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayText_$s$fLiftElem2DayTexta ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DayUTCTime ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2DayUTCTime1
                  Algebra.Function.$fBoolFun2DayUTCTime_$cliftBoolFun2 -}
4dbc7f8bb3554a79817999ae5d09e84d
  $fBoolFun2DayUTCTime1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DayUTCTime_$s$fLiftElem2DayUTCTimea -}
bee760b9ea76ab226369930c00def8c3
  $fBoolFun2DayUTCTime_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
3fc956687d44e26b7900304487befe76
  $fBoolFun2DayUTCTime_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
639def4414c9f7d350024e4260d3a50c
  $fBoolFun2DayUTCTime_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
c905b5219e9e34963609c7845a51ad5b
  $fBoolFun2DayUTCTime_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
bc14118eb73c3f04a78f211cbfb59b42
  $fBoolFun2DayUTCTime_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DayUTCTime_$s$fLiftElem2DayUTCTimea ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Day[] ::
    Algebra.Function.BoolFun2
      Data.Time.Calendar.Days.Day GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Day[]1
                  Algebra.Function.$fBoolFun2Day[]_$cliftBoolFun2 -}
aec5d18ef7a22c8cbb8ea6bc3f143260
  $fBoolFun2Day[]1 ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Day[]_$s$fLiftElem2Day[]a -}
ffc2fdbe204c7eb4d3061f749198884a
  $fBoolFun2Day[]_$cliftBoolFun2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
a5558027a99e10ac8decfc0eb4da7e29
  $fBoolFun2Day[]_$s$cliftEl2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
7fc9f9068205f8dd023c45317f446b66
  $fBoolFun2Day[]_$s$cliftEl2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
c6571076c4202235d0ab4baf0d1e1faa
  $fBoolFun2Day[]_$s$cliftLeft2 ::
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Calendar.Days.Day
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DD x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
adde803fa67472ff51b45bfc66fb580f
  $fBoolFun2Day[]_$s$cliftLeft2' ::
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Day[]_$s$fLiftElem2Day[]a ::
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Day[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Day[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Day[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Day[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleBool ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2DoubleBool1
                  Algebra.Function.$fBoolFun2DoubleBool_$cliftBoolFun2 -}
bc7feb36f5400f00d719082febe3781c
  $fBoolFun2DoubleBool1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleBool_$s$fLiftElem2DoubleBoola -}
0ed7daad60c926028883d1d41fabd004
  $fBoolFun2DoubleBool_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
3bd80dd1d69d36d29fd238c212041b8d
  $fBoolFun2DoubleBool_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
db5c960bae985f193c2cc01b9e1096b1
  $fBoolFun2DoubleBool_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
d3013bc4f47b98fc5eb06844c2875480
  $fBoolFun2DoubleBool_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
91cded64e127206a826c3be318c96fe9
  $fBoolFun2DoubleBool_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleBool_$s$fLiftElem2DoubleBoola ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleByteString ::
    Algebra.Function.BoolFun2
      GHC.Types.Double Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2DoubleByteString1
                  Algebra.Function.$fBoolFun2DoubleByteString_$cliftBoolFun2 -}
d0d3fb898002599ded5452bbfc17fd42
  $fBoolFun2DoubleByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleByteString_$s$fLiftElem2DoubleByteStringa -}
1b237e56f1fc9069b3ad258b200a5d1f
  $fBoolFun2DoubleByteString_$cliftBoolFun2 ::
    (GHC.Types.Double
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
f7487a74775910137ea3222cbf559dcb
  $fBoolFun2DoubleByteString_$s$cliftEl2 ::
    (GHC.Types.Double
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
2d1ea7aeacb1363ffcfd1c69eb201176
  $fBoolFun2DoubleByteString_$s$cliftEl2' ::
    (GHC.Types.Double
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
229587b7a8aa1b3f6ead042c36186ce7
  $fBoolFun2DoubleByteString_$s$cliftLeft2 ::
    (GHC.Types.Double
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
31ef04b4341302ca4b7ab2c19705ba2c
  $fBoolFun2DoubleByteString_$s$cliftLeft2' ::
    (GHC.Types.Double
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleByteString_$s$fLiftElem2DoubleByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleChar ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2DoubleChar1
                  Algebra.Function.$fBoolFun2DoubleChar_$cliftBoolFun2 -}
2d5ffff9e3907beecca5500a9668d5c5
  $fBoolFun2DoubleChar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleChar_$s$fLiftElem2DoubleChara -}
1a9302ad021ef7419820c247dbac715b
  $fBoolFun2DoubleChar_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
70fed51780721043473fb8063f87346a
  $fBoolFun2DoubleChar_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
2f0c6203b3bc99d3a71ca2df2de1ae70
  $fBoolFun2DoubleChar_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
7e39a91c6d8e0de8ab8aaadb68840621
  $fBoolFun2DoubleChar_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7e18e65852a6767d7036d08d3a8ba691
  $fBoolFun2DoubleChar_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleChar_$s$fLiftElem2DoubleChara ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleDay ::
    Algebra.Function.BoolFun2
      GHC.Types.Double Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2DoubleDay1
                  Algebra.Function.$fBoolFun2DoubleDay_$cliftBoolFun2 -}
dc57bbff18c986708b4407574d310917
  $fBoolFun2DoubleDay1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleDay_$s$fLiftElem2DoubleDaya -}
343ef8f04e56ab7afe63af1d9976abb9
  $fBoolFun2DoubleDay_$cliftBoolFun2 ::
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
ecbb618244803f5540bdadd4003693ef
  $fBoolFun2DoubleDay_$s$cliftEl2 ::
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
aaecf3f254efd0a443cb0a3bdba1014d
  $fBoolFun2DoubleDay_$s$cliftEl2' ::
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
ec6c8f0d1eb7f237d1519ae2dec60588
  $fBoolFun2DoubleDay_$s$cliftLeft2 ::
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7dfbafe552ae855d92fea9db0ab3734d
  $fBoolFun2DoubleDay_$s$cliftLeft2' ::
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleDay_$s$fLiftElem2DoubleDaya ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleDouble ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2DoubleDouble1
                  Algebra.Function.$fBoolFun2DoubleDouble_$cliftBoolFun2 -}
5ef5cf8b1f4096f8590c85d33431128c
  $fBoolFun2DoubleDouble1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleDouble_$s$fLiftElem2DoubleDoublea -}
ced78b86127ef12961bf2b333d72c230
  $fBoolFun2DoubleDouble_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
32a0d4055a2ce995da37a3e76ae0c86f
  $fBoolFun2DoubleDouble_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
06beb5b34c5c2a15e08664e49fa62200
  $fBoolFun2DoubleDouble_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
b95914aa5229a2db10ce529ff096127c
  $fBoolFun2DoubleDouble_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
371c77a8282762bb91cb8790e21d13db
  $fBoolFun2DoubleDouble_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleDouble_$s$fLiftElem2DoubleDoublea ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleInt ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2DoubleInt1
                  Algebra.Function.$fBoolFun2DoubleInt_$cliftBoolFun2 -}
18e8aa29ce992004ae12563f7c5e1103
  $fBoolFun2DoubleInt1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleInt_$s$fLiftElem2DoubleInta -}
a2ade01438c4723ac332c3b5b2f1469c
  $fBoolFun2DoubleInt_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
d081d559df5b336d8b10c8bb0d3d96e6
  $fBoolFun2DoubleInt_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
1428c27c62ac7e00c84de40a7d9bd1a4
  $fBoolFun2DoubleInt_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
af5e3fbff28443807b77b06f830f71e6
  $fBoolFun2DoubleInt_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
16f53858face4d4208ac2ba8825d5f6c
  $fBoolFun2DoubleInt_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleInt_$s$fLiftElem2DoubleInta ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleInteger ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2DoubleInteger1
                  Algebra.Function.$fBoolFun2DoubleInteger_$cliftBoolFun2 -}
fdf936f9156079b1f1069703b11861a7
  $fBoolFun2DoubleInteger1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleInteger_$s$fLiftElem2DoubleIntegera -}
486ae5bb4cfeb28353f26fb2898ba1e1
  $fBoolFun2DoubleInteger_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
6575eaa71c0279aa42b97e4cb06eaf12
  $fBoolFun2DoubleInteger_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
923fd5f477e8f009dc0374affe3d4227
  $fBoolFun2DoubleInteger_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
e4afe63fad909df0cb9e37dd429ea9ea
  $fBoolFun2DoubleInteger_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
659e6b566a715cbf831c60c7c5a41abb
  $fBoolFun2DoubleInteger_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleInteger_$s$fLiftElem2DoubleIntegera ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleRelvar ::
    Algebra.Function.BoolFun2 GHC.Types.Double Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2DoubleRelvar1
                  Algebra.Function.$fBoolFun2DoubleRelvar_$cliftBoolFun2 -}
54f986574ef2dd5b9c73a5522e00e25e
  $fBoolFun2DoubleRelvar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleRelvar_$s$fLiftElem2DoubleRelvara -}
3ae419931ae2034bd03003318f35c07c
  $fBoolFun2DoubleRelvar_$cliftBoolFun2 ::
    (GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
5817e292e3f86ea4f35fd8cd53d6d07c
  $fBoolFun2DoubleRelvar_$s$cliftEl2 ::
    (GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
adee995e9a3ac984c2c5f8739f4593f6
  $fBoolFun2DoubleRelvar_$s$cliftEl2' ::
    (GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
acda786d063672b9b5867d428fa57ee5
  $fBoolFun2DoubleRelvar_$s$cliftLeft2 ::
    (GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
2b07a6399c117dc0b497a02fd20cddac
  $fBoolFun2DoubleRelvar_$s$cliftLeft2' ::
    (GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleRelvar_$s$fLiftElem2DoubleRelvara ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleText ::
    Algebra.Function.BoolFun2 GHC.Types.Double Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2DoubleText1
                  Algebra.Function.$fBoolFun2DoubleText_$cliftBoolFun2 -}
5459e8885f488af14a5b4959944ae8b3
  $fBoolFun2DoubleText1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleText_$s$fLiftElem2DoubleTexta -}
76dc4043271aae74b94085c2ac069091
  $fBoolFun2DoubleText_$cliftBoolFun2 ::
    (GHC.Types.Double -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
42a6a1b45f0ff77823f62e09787b8e47
  $fBoolFun2DoubleText_$s$cliftEl2 ::
    (GHC.Types.Double -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
69a921864151c3ee46180b8462e120df
  $fBoolFun2DoubleText_$s$cliftEl2' ::
    (GHC.Types.Double -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
ea23898398dcf2e438d2aaaca8b95be9
  $fBoolFun2DoubleText_$s$cliftLeft2 ::
    (GHC.Types.Double -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
3aaba58fdfdeb7535a953c2761632053
  $fBoolFun2DoubleText_$s$cliftLeft2' ::
    (GHC.Types.Double -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleText_$s$fLiftElem2DoubleTexta ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2DoubleUTCTime ::
    Algebra.Function.BoolFun2
      GHC.Types.Double Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2DoubleUTCTime1
                  Algebra.Function.$fBoolFun2DoubleUTCTime_$cliftBoolFun2 -}
d5050cd4e3e8f37dc199fc37ce44e86b
  $fBoolFun2DoubleUTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2DoubleUTCTime_$s$fLiftElem2DoubleUTCTimea -}
31fec0ec13cff3ebbccf860b707c0514
  $fBoolFun2DoubleUTCTime_$cliftBoolFun2 ::
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
97d2e1a95cbccb3646175c61cb3f9cff
  $fBoolFun2DoubleUTCTime_$s$cliftEl2 ::
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
ad4b56a44b7f033ae8904c8422980c98
  $fBoolFun2DoubleUTCTime_$s$cliftEl2' ::
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
b11e835ee83422a5bb1e768cb338edb3
  $fBoolFun2DoubleUTCTime_$s$cliftLeft2 ::
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e5ab2b8fc3c249d0f5f00650d154fd25
  $fBoolFun2DoubleUTCTime_$s$cliftLeft2' ::
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2DoubleUTCTime_$s$fLiftElem2DoubleUTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Double[] ::
    Algebra.Function.BoolFun2 GHC.Types.Double GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Double[]1
                  Algebra.Function.$fBoolFun2Double[]_$cliftBoolFun2 -}
918c643451bfb01e4eb97d82e1dfdd56
  $fBoolFun2Double[]1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Double[]_$s$fLiftElem2Double[]a -}
5947fd201c9afd034ba4dd3313b5b76f
  $fBoolFun2Double[]_$cliftBoolFun2 ::
    (GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Double
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
caef4d0028970fb326d4dce03c7d711c
  $fBoolFun2Double[]_$s$cliftEl2 ::
    (GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
bf349aac3789c0fffc71e82ceb95d0c9
  $fBoolFun2Double[]_$s$cliftEl2' ::
    (GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
a6014f72ea446c3b03f3c0d1c7a0cf2a
  $fBoolFun2Double[]_$s$cliftLeft2 ::
    (GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Double
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.D x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
f8268fa675d1c9623430d680e13808b3
  $fBoolFun2Double[]_$s$cliftLeft2' ::
    (GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Double[]_$s$fLiftElem2Double[]a ::
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Double[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Double[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Double[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Double[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntBool ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2IntBool1
                  Algebra.Function.$fBoolFun2IntBool_$cliftBoolFun2 -}
6d9a39cb27fa0a5b04220a583dc45909
  $fBoolFun2IntBool1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntBool_$s$fLiftElem2IntBoola -}
97ba7b6f00881daa2319a9cfa546c170
  $fBoolFun2IntBool_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
addf382c83e34b1b191f260d0c990e1c
  $fBoolFun2IntBool_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
3708ca69745533dd3bb75eb748ae3efc
  $fBoolFun2IntBool_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
ca0b81d47cec89fb7fd949edd5c353c1
  $fBoolFun2IntBool_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
dd44e25ccd7e653d4f96eda8a29d412e
  $fBoolFun2IntBool_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntBool_$s$fLiftElem2IntBoola ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntByteString ::
    Algebra.Function.BoolFun2
      GHC.Types.Int Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2IntByteString1
                  Algebra.Function.$fBoolFun2IntByteString_$cliftBoolFun2 -}
00233418a80aa89d1c2613479723cc73
  $fBoolFun2IntByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntByteString_$s$fLiftElem2IntByteStringa -}
7efc91c9ec53363b73175242ce6b6270
  $fBoolFun2IntByteString_$cliftBoolFun2 ::
    (GHC.Types.Int
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
e9ef753abaa1a29a80013252b9d8b275
  $fBoolFun2IntByteString_$s$cliftEl2 ::
    (GHC.Types.Int
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
d3c45bcfee58ca1125378b8609f9230e
  $fBoolFun2IntByteString_$s$cliftEl2' ::
    (GHC.Types.Int
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
1f3274904db932cff70ce0ae8a08221f
  $fBoolFun2IntByteString_$s$cliftLeft2 ::
    (GHC.Types.Int
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
928c9d77423859950e9823bafc978569
  $fBoolFun2IntByteString_$s$cliftLeft2' ::
    (GHC.Types.Int
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntByteString_$s$fLiftElem2IntByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntChar ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2IntChar1
                  Algebra.Function.$fBoolFun2IntChar_$cliftBoolFun2 -}
ae817c23bcaaa1903a35bafe49f30f9b
  $fBoolFun2IntChar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntChar_$s$fLiftElem2IntChara -}
b8acab492fdc5eb8c4da93248e223264
  $fBoolFun2IntChar_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
3ab8bc67034670095b43adf1fe10456f
  $fBoolFun2IntChar_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
decc952bcaac905102ea8150b2ad0bb8
  $fBoolFun2IntChar_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
16dca4f983cb10d195c1f66169082d7c
  $fBoolFun2IntChar_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
def3529ea3cb0dcf9de5ed374a7b6597
  $fBoolFun2IntChar_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntChar_$s$fLiftElem2IntChara ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntDay ::
    Algebra.Function.BoolFun2 GHC.Types.Int Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2IntDay1
                  Algebra.Function.$fBoolFun2IntDay_$cliftBoolFun2 -}
ec8db3bc3a60a761bfef566e85b860ab
  $fBoolFun2IntDay1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntDay_$s$fLiftElem2IntDaya -}
cb7d41f9c6dca164d61ba71897c93418
  $fBoolFun2IntDay_$cliftBoolFun2 ::
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
76486105745723ec44347a4f626ed9e0
  $fBoolFun2IntDay_$s$cliftEl2 ::
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
ef30923cd9fc40713de16a88262adcf9
  $fBoolFun2IntDay_$s$cliftEl2' ::
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
a59ba35f1375f8c1b8f09d8a51c114a5
  $fBoolFun2IntDay_$s$cliftLeft2 ::
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
92aef8cacbab6cc3422db11847954c3b
  $fBoolFun2IntDay_$s$cliftLeft2' ::
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntDay_$s$fLiftElem2IntDaya ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntDouble ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2IntDouble1
                  Algebra.Function.$fBoolFun2IntDouble_$cliftBoolFun2 -}
6ed643dd2d72039adc48ba80226c3398
  $fBoolFun2IntDouble1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntDouble_$s$fLiftElem2IntDoublea -}
efad3330028bcfedf9084b005e2ddead
  $fBoolFun2IntDouble_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
4180557d275ef0c62ba4dc6de06bbd39
  $fBoolFun2IntDouble_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
cb0625af85b13164778b2e962b93181c
  $fBoolFun2IntDouble_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
326000cee728f05a53801063814e6dd6
  $fBoolFun2IntDouble_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
8da5d2e2f302db73ee215ad6639f9f00
  $fBoolFun2IntDouble_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntDouble_$s$fLiftElem2IntDoublea ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntInt ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2IntInt1
                  Algebra.Function.$fBoolFun2IntInt_$cliftBoolFun2 -}
271546d08d33b6a1a5201e079aa8828b
  $fBoolFun2IntInt1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntInt_$s$fLiftElem2IntInta -}
4f371e358e2c9013753aca56412479f3
  $fBoolFun2IntInt_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
abc988fca41a429add1cb39820a555f0
  $fBoolFun2IntInt_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
114bfea0d9e68ee06b0a3dad0d37993e
  $fBoolFun2IntInt_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
1f5541bb583fee53fcc021a4cd75edbf
  $fBoolFun2IntInt_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
5af9b81f6ae7a0ad7a48e2cf8970876e
  $fBoolFun2IntInt_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntInt_$s$fLiftElem2IntInta ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntInteger ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2IntInteger1
                  Algebra.Function.$fBoolFun2IntInteger_$cliftBoolFun2 -}
502089a8f247c29c8209a04b3c525b2c
  $fBoolFun2IntInteger1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntInteger_$s$fLiftElem2IntIntegera -}
eeb6d8adc1c5557d3973b8f802f53fef
  $fBoolFun2IntInteger_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
a60f73fd4457eca8f4bc1ac11ebffb8e
  $fBoolFun2IntInteger_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
71242d1a3dd903a09be670ca994028c8
  $fBoolFun2IntInteger_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
9eae3a8a55c5c088ba792a3c6378fd71
  $fBoolFun2IntInteger_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
f74e8a9383d4c891f2d7ca0845b5eb3f
  $fBoolFun2IntInteger_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntInteger_$s$fLiftElem2IntIntegera ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntRelvar ::
    Algebra.Function.BoolFun2 GHC.Types.Int Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2IntRelvar1
                  Algebra.Function.$fBoolFun2IntRelvar_$cliftBoolFun2 -}
266d0aae3a378c34094979ecbc1a38cb
  $fBoolFun2IntRelvar1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntRelvar_$s$fLiftElem2IntRelvara -}
882a228ec45b8e5fdff3a58ef9bb9aad
  $fBoolFun2IntRelvar_$cliftBoolFun2 ::
    (GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
c484c104c2e6bcb91544659dc8dfedac
  $fBoolFun2IntRelvar_$s$cliftEl2 ::
    (GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
557be779e155146b3ec26922165567d6
  $fBoolFun2IntRelvar_$s$cliftEl2' ::
    (GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
7eebee37fa507e321b8bbfaeba4f95b1
  $fBoolFun2IntRelvar_$s$cliftLeft2 ::
    (GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
08464af864b9f253f3d16b9382e6a33e
  $fBoolFun2IntRelvar_$s$cliftLeft2' ::
    (GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntRelvar_$s$fLiftElem2IntRelvara ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntText ::
    Algebra.Function.BoolFun2 GHC.Types.Int Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2IntText1
                  Algebra.Function.$fBoolFun2IntText_$cliftBoolFun2 -}
265e40916b039abf3b92adc976fc1456
  $fBoolFun2IntText1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntText_$s$fLiftElem2IntTexta -}
3e6ef36bdf03db7a0f94d282dfef4ab9
  $fBoolFun2IntText_$cliftBoolFun2 ::
    (GHC.Types.Int -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
93c676e5c4690be9eb3668fcb25c4789
  $fBoolFun2IntText_$s$cliftEl2 ::
    (GHC.Types.Int -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
96ec29d266ef6eec29c0fea22b4090cd
  $fBoolFun2IntText_$s$cliftEl2' ::
    (GHC.Types.Int -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
fd77b0ae8673a6f8e7045e0080a4edee
  $fBoolFun2IntText_$s$cliftLeft2 ::
    (GHC.Types.Int -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6079372173ec614a286bcbf0ad9a5279
  $fBoolFun2IntText_$s$cliftLeft2' ::
    (GHC.Types.Int -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntText_$s$fLiftElem2IntTexta ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntUTCTime ::
    Algebra.Function.BoolFun2 GHC.Types.Int Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2IntUTCTime1
                  Algebra.Function.$fBoolFun2IntUTCTime_$cliftBoolFun2 -}
41601b4150f41c20a03ef332d903dcf4
  $fBoolFun2IntUTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntUTCTime_$s$fLiftElem2IntUTCTimea -}
c253250d9cedc392ed19e80b2a39f061
  $fBoolFun2IntUTCTime_$cliftBoolFun2 ::
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
34ae2bd8db93f39cdd678fee643c71d0
  $fBoolFun2IntUTCTime_$s$cliftEl2 ::
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
e6f7218f8bd4a34bf292c2e4841364d1
  $fBoolFun2IntUTCTime_$s$cliftEl2' ::
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
7dd6855545add3431fccf3693e4d7ced
  $fBoolFun2IntUTCTime_$s$cliftLeft2 ::
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
ba80198a48cfe09aed11c041a8fc7b74
  $fBoolFun2IntUTCTime_$s$cliftLeft2' ::
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntUTCTime_$s$fLiftElem2IntUTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Int[] ::
    Algebra.Function.BoolFun2 GHC.Types.Int GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Int[]1
                  Algebra.Function.$fBoolFun2Int[]_$cliftBoolFun2 -}
96e0935438bc3de97c9b4daaf4647fa3
  $fBoolFun2Int[]1 ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Int[]_$s$fLiftElem2Int[]a -}
b43cedf1bb90bbe0e4ac3d1a6f21339e
  $fBoolFun2Int[]_$cliftBoolFun2 ::
    (GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Types.Int
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
56758b2bcd194fa1f238100e3d58c1a4
  $fBoolFun2Int[]_$s$cliftEl2 ::
    (GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
222d323154cdfab29a7b32b5c5de7e86
  $fBoolFun2Int[]_$s$cliftEl2' ::
    (GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
6f62cbc44aec53433d8b96c923be7873
  $fBoolFun2Int[]_$s$cliftLeft2 ::
    (GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Types.Int
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.I x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0028abb021610e1973bc11141c9db39f
  $fBoolFun2Int[]_$s$cliftLeft2' ::
    (GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Int[]_$s$fLiftElem2Int[]a ::
    Algebra.Function.LiftElem2
      GHC.Types.Int GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Int[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Int[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Int[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Int[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerBool ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2IntegerBool1
                  Algebra.Function.$fBoolFun2IntegerBool_$cliftBoolFun2 -}
144454348495ed8e8201d69b9a903ab4
  $fBoolFun2IntegerBool1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerBool_$s$fLiftElem2IntegerBoola -}
286d38a034778b7a09e3c28c73bc6adb
  $fBoolFun2IntegerBool_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
ba92ddfc893baa53e8698d67f2a1a1ac
  $fBoolFun2IntegerBool_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
919daa91e4555822058b25426340ded4
  $fBoolFun2IntegerBool_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
a062860d8a33a624813e9bfcba60ae7d
  $fBoolFun2IntegerBool_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d61fe9260770c6c9f2d8c510366590ca
  $fBoolFun2IntegerBool_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerBool_$s$fLiftElem2IntegerBoola ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerByteString ::
    Algebra.Function.BoolFun2
      GHC.Integer.Type.Integer Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2IntegerByteString1
                  Algebra.Function.$fBoolFun2IntegerByteString_$cliftBoolFun2 -}
b258d11ab622a73ce9cca21a212197da
  $fBoolFun2IntegerByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerByteString_$s$fLiftElem2IntegerByteStringa -}
e379fad68712edda9b42766ebd40fd68
  $fBoolFun2IntegerByteString_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
d218f1a14770dae229380e41a59d6818
  $fBoolFun2IntegerByteString_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
1c21f92ea4a6f126e68a5203551874e3
  $fBoolFun2IntegerByteString_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
318eaa1f174566375c41bdefa3a13ff9
  $fBoolFun2IntegerByteString_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
b77f6badcdcdb320a244497ed416422a
  $fBoolFun2IntegerByteString_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerByteString_$s$fLiftElem2IntegerByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerChar ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2IntegerChar1
                  Algebra.Function.$fBoolFun2IntegerChar_$cliftBoolFun2 -}
3fb9af9d9a1c863364b993f8f50ab941
  $fBoolFun2IntegerChar1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerChar_$s$fLiftElem2IntegerChara -}
18873cec48d38d90ad33a2dae20a4d75
  $fBoolFun2IntegerChar_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
7aeec564eb56c5a44b471acdd19ad243
  $fBoolFun2IntegerChar_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
a4fe449be3cc6f1687c2981a39533a70
  $fBoolFun2IntegerChar_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
1004b5367155bd4aa8a2be5fd5131d7b
  $fBoolFun2IntegerChar_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
2000c2e8313d96b7b17fe735cf28f122
  $fBoolFun2IntegerChar_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerChar_$s$fLiftElem2IntegerChara ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerDay ::
    Algebra.Function.BoolFun2
      GHC.Integer.Type.Integer Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2IntegerDay1
                  Algebra.Function.$fBoolFun2IntegerDay_$cliftBoolFun2 -}
c0831b6025acd959aa886d30259d84bd
  $fBoolFun2IntegerDay1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerDay_$s$fLiftElem2IntegerDaya -}
2ffb92e9a433df7e2a3fcfdb75101228
  $fBoolFun2IntegerDay_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
6c707ad687e3a00ca2afc40365716712
  $fBoolFun2IntegerDay_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
c350af5694b0158708ff0ada7b09234e
  $fBoolFun2IntegerDay_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
1771dd82fabad67a24d3e355e8078764
  $fBoolFun2IntegerDay_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
339efe3d56e44613413e99ceca1d98ef
  $fBoolFun2IntegerDay_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerDay_$s$fLiftElem2IntegerDaya ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerDouble ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2IntegerDouble1
                  Algebra.Function.$fBoolFun2IntegerDouble_$cliftBoolFun2 -}
b702fb66661ede110bde5beed3f13187
  $fBoolFun2IntegerDouble1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerDouble_$s$fLiftElem2IntegerDoublea -}
e3f939b83a70515a83560ff77804770f
  $fBoolFun2IntegerDouble_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
c91525afce98aa85284ce53bcd7fb5f9
  $fBoolFun2IntegerDouble_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
f80fcc92115c4f05b520d0561e2a2c23
  $fBoolFun2IntegerDouble_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
45db22d39d403b8803db6d41d318f806
  $fBoolFun2IntegerDouble_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
ae8d9a6cea96dec48efd9e0c8cd416d3
  $fBoolFun2IntegerDouble_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerDouble_$s$fLiftElem2IntegerDoublea ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerInt ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2IntegerInt1
                  Algebra.Function.$fBoolFun2IntegerInt_$cliftBoolFun2 -}
0aee200176eb17baf5184dcef974b04d
  $fBoolFun2IntegerInt1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerInt_$s$fLiftElem2IntegerInta -}
b43ede82d2a84142b5c02b792e1eadd6
  $fBoolFun2IntegerInt_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
1d96ae781755fc5339c6351b7f3ee2a6
  $fBoolFun2IntegerInt_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
4e762be59674e4c6afced403a9d95781
  $fBoolFun2IntegerInt_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
cc0273e634f48b20121b29647c21e31a
  $fBoolFun2IntegerInt_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6af1a90b0539599b81954090a0d416ed
  $fBoolFun2IntegerInt_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerInt_$s$fLiftElem2IntegerInta ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerInteger ::
    Algebra.Function.BoolFun2
      GHC.Integer.Type.Integer GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2IntegerInteger1
                  Algebra.Function.$fBoolFun2IntegerInteger_$cliftBoolFun2 -}
6bb8b0ff477c5f12832615c41334adc1
  $fBoolFun2IntegerInteger1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerInteger_$s$fLiftElem2IntegerIntegera -}
96dcda7dce1ac606808a7a2e0ff90386
  $fBoolFun2IntegerInteger_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
924151400abc65b60df42494a24957d5
  $fBoolFun2IntegerInteger_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
1a5e02cc0148a52b71cee52b641cdb21
  $fBoolFun2IntegerInteger_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
cc36180a26c33676fd7d69713a950281
  $fBoolFun2IntegerInteger_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
9ca2b7061ffef7cde6758e6108a09d7e
  $fBoolFun2IntegerInteger_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerInteger_$s$fLiftElem2IntegerIntegera ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerRelvar ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2IntegerRelvar1
                  Algebra.Function.$fBoolFun2IntegerRelvar_$cliftBoolFun2 -}
4892f11f3c4d7e3a09312f63701b6249
  $fBoolFun2IntegerRelvar1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerRelvar_$s$fLiftElem2IntegerRelvara -}
6639fa77e7d3270aacda1735656199e7
  $fBoolFun2IntegerRelvar_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
af141199079b432acaf2ec95e5976098
  $fBoolFun2IntegerRelvar_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
b05239f894ba7b63d662e10b183aeeb6
  $fBoolFun2IntegerRelvar_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
8e300ccd1f2e5f82e955dfe520c505d8
  $fBoolFun2IntegerRelvar_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
b18bc728c134cedd390091d693a0ee3f
  $fBoolFun2IntegerRelvar_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerRelvar_$s$fLiftElem2IntegerRelvara ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerText ::
    Algebra.Function.BoolFun2
      GHC.Integer.Type.Integer Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2IntegerText1
                  Algebra.Function.$fBoolFun2IntegerText_$cliftBoolFun2 -}
29fd3869ad4ccfbd7b8d0be854cedcec
  $fBoolFun2IntegerText1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerText_$s$fLiftElem2IntegerTexta -}
f57ee64a849b7db0559b807d65aacabb
  $fBoolFun2IntegerText_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
ccb5a36b4602a5b62dbd097cc3a6e5b6
  $fBoolFun2IntegerText_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
087d3d13dbb9247d65d7aab33571de9d
  $fBoolFun2IntegerText_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
7c179ba8081913269216e1f46cd4921d
  $fBoolFun2IntegerText_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
43c1efd48d08984f755d4db89bd3348b
  $fBoolFun2IntegerText_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerText_$s$fLiftElem2IntegerTexta ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2IntegerUTCTime ::
    Algebra.Function.BoolFun2
      GHC.Integer.Type.Integer Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2IntegerUTCTime1
                  Algebra.Function.$fBoolFun2IntegerUTCTime_$cliftBoolFun2 -}
36bc2e20a6ff68af08aacc2b7c045897
  $fBoolFun2IntegerUTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2IntegerUTCTime_$s$fLiftElem2IntegerUTCTimea -}
4e9eada7be8fc6ee414997190e1700c1
  $fBoolFun2IntegerUTCTime_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
6debafc30c4a80cdee40f79305716c69
  $fBoolFun2IntegerUTCTime_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
6573f9902a4b92b43c128c3e08896905
  $fBoolFun2IntegerUTCTime_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
b3b245c41a9fff1e9679aaa7c5766a59
  $fBoolFun2IntegerUTCTime_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6bde2bb3a40927e68eadfed92c706075
  $fBoolFun2IntegerUTCTime_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2IntegerUTCTime_$s$fLiftElem2IntegerUTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Integer[] ::
    Algebra.Function.BoolFun2 GHC.Integer.Type.Integer GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Integer[]1
                  Algebra.Function.$fBoolFun2Integer[]_$cliftBoolFun2 -}
6275410543e2b4beaf3e2c13590dfdef
  $fBoolFun2Integer[]1 ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Integer[]_$s$fLiftElem2Integer[]a -}
1734288b1d8e9ab87d202931851c476e
  $fBoolFun2Integer[]_$cliftBoolFun2 ::
    (GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
441f12109cee7ac7bcf60ba722c6e5b3
  $fBoolFun2Integer[]_$s$cliftEl2 ::
    (GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
5ea7e6b007cf69cc20ff5ff238de1d35
  $fBoolFun2Integer[]_$s$cliftEl2' ::
    (GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
d1ce1e7c3995f3a88493ef6e97bbce4d
  $fBoolFun2Integer[]_$s$cliftLeft2 ::
    (GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Integer.Type.Integer
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.J x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
3c42ef9685946111f58bebfe37cd57e4
  $fBoolFun2Integer[]_$s$cliftLeft2' ::
    (GHC.Integer.Type.Integer -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Integer.Type.Integer
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Integer[]_$s$fLiftElem2Integer[]a ::
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Integer[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Integer[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Integer[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Integer[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarBool ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2RelvarBool1
                  Algebra.Function.$fBoolFun2RelvarBool_$cliftBoolFun2 -}
9534a78651753c691e6b7c4bfa28687b
  $fBoolFun2RelvarBool1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarBool_$s$fLiftElem2RelvarBoola -}
deb1d259d73b95f48a0aff73afdc9600
  $fBoolFun2RelvarBool_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
3a5b7df145b7d9447fab3b593a8ff71c
  $fBoolFun2RelvarBool_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
7558a944869175df8fa1072bb6ac8dee
  $fBoolFun2RelvarBool_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
39438206b3be1bcd4dd7f2cf9cea0d60
  $fBoolFun2RelvarBool_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
cf91e8758599838d6f3e31d23cc7fbef
  $fBoolFun2RelvarBool_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarBool_$s$fLiftElem2RelvarBoola ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarByteString ::
    Algebra.Function.BoolFun2
      Relvar.Relvar Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2RelvarByteString1
                  Algebra.Function.$fBoolFun2RelvarByteString_$cliftBoolFun2 -}
362a26edc15c3d2dcd16013f4e5d0363
  $fBoolFun2RelvarByteString1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarByteString_$s$fLiftElem2RelvarByteStringa -}
0740ecd8157423ad5224d32b29545757
  $fBoolFun2RelvarByteString_$cliftBoolFun2 ::
    (Relvar.Relvar
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
8b2a88ba032dac553b7c5dee4ecd2620
  $fBoolFun2RelvarByteString_$s$cliftEl2 ::
    (Relvar.Relvar
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
c5aac4b4b5f9a4a50a07a4a7ad4d4e67
  $fBoolFun2RelvarByteString_$s$cliftEl2' ::
    (Relvar.Relvar
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
4b7fc93c76bcbafc34228fd3171f5b5f
  $fBoolFun2RelvarByteString_$s$cliftLeft2 ::
    (Relvar.Relvar
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7bd7a958ebacf31078173ea796f1d4f3
  $fBoolFun2RelvarByteString_$s$cliftLeft2' ::
    (Relvar.Relvar
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarByteString_$s$fLiftElem2RelvarByteStringa ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarChar ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2RelvarChar1
                  Algebra.Function.$fBoolFun2RelvarChar_$cliftBoolFun2 -}
f91771cfe36267b44552d0c28f19a942
  $fBoolFun2RelvarChar1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarChar_$s$fLiftElem2RelvarChara -}
a09d82bd0a38c7a67e8b2267916c939c
  $fBoolFun2RelvarChar_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
c5bcb490ed6cd76f304917f4e658a3fb
  $fBoolFun2RelvarChar_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
e06fc414c645e3108340079f342d635b
  $fBoolFun2RelvarChar_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
930b5661b0d71abd1ea1c1d0b42a0405
  $fBoolFun2RelvarChar_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
3d015aaa17f5b29ef6888aa240fe55b3
  $fBoolFun2RelvarChar_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarChar_$s$fLiftElem2RelvarChara ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarDay ::
    Algebra.Function.BoolFun2 Relvar.Relvar Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2RelvarDay1
                  Algebra.Function.$fBoolFun2RelvarDay_$cliftBoolFun2 -}
d8c4a57c28c99be51620f97965eeb1c3
  $fBoolFun2RelvarDay1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarDay_$s$fLiftElem2RelvarDaya -}
36f7a4ad16806b6a016948498b09cbad
  $fBoolFun2RelvarDay_$cliftBoolFun2 ::
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
9646331a86fa99ab98ced25edf828020
  $fBoolFun2RelvarDay_$s$cliftEl2 ::
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
269aca7bc09daf83584cc8322e2a6de0
  $fBoolFun2RelvarDay_$s$cliftEl2' ::
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
b596f931beaf67e94f80ae84918a3169
  $fBoolFun2RelvarDay_$s$cliftLeft2 ::
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
b42233fd50b7920f0683fd17e71f763a
  $fBoolFun2RelvarDay_$s$cliftLeft2' ::
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarDay_$s$fLiftElem2RelvarDaya ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarDouble ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2RelvarDouble1
                  Algebra.Function.$fBoolFun2RelvarDouble_$cliftBoolFun2 -}
457bc311296676817977d69538c470ed
  $fBoolFun2RelvarDouble1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarDouble_$s$fLiftElem2RelvarDoublea -}
adffa6327fa2263fe008a8d45ab3512a
  $fBoolFun2RelvarDouble_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
461473b462a360e1ff2202416463f321
  $fBoolFun2RelvarDouble_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
0eb51a8198eb475212526577c10bca29
  $fBoolFun2RelvarDouble_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
587e9bea3a806b78f3d733e2ce0ce4ab
  $fBoolFun2RelvarDouble_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
eeb35cc738928a3f252136a83d942b90
  $fBoolFun2RelvarDouble_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarDouble_$s$fLiftElem2RelvarDoublea ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarInt ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2RelvarInt1
                  Algebra.Function.$fBoolFun2RelvarInt_$cliftBoolFun2 -}
fb56f56bbf3bf46280d743b7f65edef7
  $fBoolFun2RelvarInt1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarInt_$s$fLiftElem2RelvarInta -}
691adeff8183cd6f325448b787dc4e1b
  $fBoolFun2RelvarInt_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
6c3b44993266edec5103da9c0a14fb39
  $fBoolFun2RelvarInt_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
6fef14fefc2d68da27a59204867fd623
  $fBoolFun2RelvarInt_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
d2236d26df8b1b8baed2f32cfbcc8020
  $fBoolFun2RelvarInt_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d10d99652dbd20bdda66e3f5c5f71f9b
  $fBoolFun2RelvarInt_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarInt_$s$fLiftElem2RelvarInta ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarInteger ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2RelvarInteger1
                  Algebra.Function.$fBoolFun2RelvarInteger_$cliftBoolFun2 -}
ac7f018fd633db6c792a0b53189f85b7
  $fBoolFun2RelvarInteger1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarInteger_$s$fLiftElem2RelvarIntegera -}
c70650f4187ad0df062d13c9153d2f68
  $fBoolFun2RelvarInteger_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
e916ac6211a3c266bf04cdae1fa55ee9
  $fBoolFun2RelvarInteger_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
a642cfd53dafa2e140088733acb68805
  $fBoolFun2RelvarInteger_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
81b661b3996e65fc0f85e740faf201c3
  $fBoolFun2RelvarInteger_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
405401091b2acd8e7b121216d0e6e4bb
  $fBoolFun2RelvarInteger_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarInteger_$s$fLiftElem2RelvarIntegera ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarRelvar ::
    Algebra.Function.BoolFun2 Relvar.Relvar Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2RelvarRelvar1
                  Algebra.Function.$fBoolFun2RelvarRelvar_$cliftBoolFun2 -}
ec2a32bac393924f67717be2980049f5
  $fBoolFun2RelvarRelvar1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarRelvar_$s$fLiftElem2RelvarRelvara -}
f583ce5360419663f9176f606d178834
  $fBoolFun2RelvarRelvar_$cliftBoolFun2 ::
    (Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
04abdc7862815197725a474df0091f22
  $fBoolFun2RelvarRelvar_$s$cliftEl2 ::
    (Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
44ace1267718f388c19f445eaa46bc62
  $fBoolFun2RelvarRelvar_$s$cliftEl2' ::
    (Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
4f7b44d00d5211f59b9cb0cc8b00e119
  $fBoolFun2RelvarRelvar_$s$cliftLeft2 ::
    (Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
fa561c850db4fa40e9e9b1b428f06f7b
  $fBoolFun2RelvarRelvar_$s$cliftLeft2' ::
    (Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarRelvar_$s$fLiftElem2RelvarRelvara ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarText ::
    Algebra.Function.BoolFun2 Relvar.Relvar Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2RelvarText1
                  Algebra.Function.$fBoolFun2RelvarText_$cliftBoolFun2 -}
8dc433289956472d782fb0bd4b3fe69c
  $fBoolFun2RelvarText1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarText_$s$fLiftElem2RelvarTexta -}
cb9515e4226ec04822a772e6cd181d35
  $fBoolFun2RelvarText_$cliftBoolFun2 ::
    (Relvar.Relvar -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
581f38315af97d5b5bf1857ecab50bde
  $fBoolFun2RelvarText_$s$cliftEl2 ::
    (Relvar.Relvar -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
cd6b4e00bfff5850fc8a85180747b644
  $fBoolFun2RelvarText_$s$cliftEl2' ::
    (Relvar.Relvar -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
ed5643f6383f0239e0585ed03147be04
  $fBoolFun2RelvarText_$s$cliftLeft2 ::
    (Relvar.Relvar -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
09284fb55eb848d6d0742448cc9c8af0
  $fBoolFun2RelvarText_$s$cliftLeft2' ::
    (Relvar.Relvar -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarText_$s$fLiftElem2RelvarTexta ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2RelvarUTCTime ::
    Algebra.Function.BoolFun2 Relvar.Relvar Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2RelvarUTCTime1
                  Algebra.Function.$fBoolFun2RelvarUTCTime_$cliftBoolFun2 -}
c0c9243411feca16627b9ddd14938909
  $fBoolFun2RelvarUTCTime1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2RelvarUTCTime_$s$fLiftElem2RelvarUTCTimea -}
6d5506bbff53d80ce10742f76dd181b2
  $fBoolFun2RelvarUTCTime_$cliftBoolFun2 ::
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
62e396903d5e58b74a1fba14f1464217
  $fBoolFun2RelvarUTCTime_$s$cliftEl2 ::
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
48157cba2b8315173db6074906903171
  $fBoolFun2RelvarUTCTime_$s$cliftEl2' ::
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
4cc9f26d023b136cd86d57d12efcb4e6
  $fBoolFun2RelvarUTCTime_$s$cliftLeft2 ::
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6168c0dd539cbec60ab4a643a41e7642
  $fBoolFun2RelvarUTCTime_$s$cliftLeft2' ::
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2RelvarUTCTime_$s$fLiftElem2RelvarUTCTimea ::
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Relvar[] ::
    Algebra.Function.BoolFun2 Relvar.Relvar GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Relvar[]1
                  Algebra.Function.$fBoolFun2Relvar[]_$cliftBoolFun2 -}
47b7df46dfa5a19262784a448f946d98
  $fBoolFun2Relvar[]1 ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Relvar[]_$s$fLiftElem2Relvar[]a -}
7bf0229bc788a8b7b950739bbe96f128
  $fBoolFun2Relvar[]_$cliftBoolFun2 ::
    (Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Relvar.Relvar
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
6200a1f7a5d467ceb38adf10e9f365c0
  $fBoolFun2Relvar[]_$s$cliftEl2 ::
    (Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
cc97bd3a1b9cd93203490d300ce5fccb
  $fBoolFun2Relvar[]_$s$cliftEl2' ::
    (Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
aa2da9d6e794972dee2423449048899e
  $fBoolFun2Relvar[]_$s$cliftLeft2 ::
    (Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Relvar.Relvar
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.R x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
79a55181fdcfb77b70a1e1f65cc26413
  $fBoolFun2Relvar[]_$s$cliftLeft2' ::
    (Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Relvar[]_$s$fLiftElem2Relvar[]a ::
    Algebra.Function.LiftElem2
      Relvar.Relvar GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Relvar[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Relvar[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Relvar[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Relvar[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextBool ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2TextBool1
                  Algebra.Function.$fBoolFun2TextBool_$cliftBoolFun2 -}
5bcc092e91d32df90237a68ae5fff17c
  $fBoolFun2TextBool1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextBool_$s$fLiftElem2TextBoola -}
fc2d181ab5526f8dce8820ca2b0edfea
  $fBoolFun2TextBool_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
fc5141f0a3ab8f7fae2e31d3efca8762
  $fBoolFun2TextBool_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
6fd92181bbe2d2ef5378daf2cc58c6af
  $fBoolFun2TextBool_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
7cb62cd08c9dbf160d61008ceea868ff
  $fBoolFun2TextBool_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
f62ac37ef2dfc89b61d6940854a4139a
  $fBoolFun2TextBool_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextBool_$s$fLiftElem2TextBoola ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextByteString ::
    Algebra.Function.BoolFun2
      Data.Text.Internal.Text Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2TextByteString1
                  Algebra.Function.$fBoolFun2TextByteString_$cliftBoolFun2 -}
70b0247a73d8618462aa3b546f0401c8
  $fBoolFun2TextByteString1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextByteString_$s$fLiftElem2TextByteStringa -}
951c1380f5ea8c0203f2c6fb5189cafe
  $fBoolFun2TextByteString_$cliftBoolFun2 ::
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
f11ac7b699d275791ef482e4dc8301e1
  $fBoolFun2TextByteString_$s$cliftEl2 ::
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
fd964bc3d8ee8dc00d3c0540b1367728
  $fBoolFun2TextByteString_$s$cliftEl2' ::
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
0e4ffaf603058b4d4dc6d090ace94422
  $fBoolFun2TextByteString_$s$cliftLeft2 ::
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
5d8ab175b73b1b094d8228350310093b
  $fBoolFun2TextByteString_$s$cliftLeft2' ::
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextByteString_$s$fLiftElem2TextByteStringa ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextChar ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2TextChar1
                  Algebra.Function.$fBoolFun2TextChar_$cliftBoolFun2 -}
9239cf6df55337d709e79c35d6a34871
  $fBoolFun2TextChar1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextChar_$s$fLiftElem2TextChara -}
36f373c4990c9997ac690db62996590c
  $fBoolFun2TextChar_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
54151046d8cab25e5ed0935c2d088e04
  $fBoolFun2TextChar_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
ea6126f3ad325704a71756647b5c171c
  $fBoolFun2TextChar_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
957bc751091a09046fa7811726444172
  $fBoolFun2TextChar_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
612630feadf0a2859486827c2303b96e
  $fBoolFun2TextChar_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextChar_$s$fLiftElem2TextChara ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextDay ::
    Algebra.Function.BoolFun2
      Data.Text.Internal.Text Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2TextDay1
                  Algebra.Function.$fBoolFun2TextDay_$cliftBoolFun2 -}
139321d93ece224d3b22cff50d62a8bb
  $fBoolFun2TextDay1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextDay_$s$fLiftElem2TextDaya -}
882cd399b597ef7e4607398773b6efb3
  $fBoolFun2TextDay_$cliftBoolFun2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
8ec3de8ca979461a8b82208b7191463d
  $fBoolFun2TextDay_$s$cliftEl2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
894e54639c242cb00992605a6ec0a280
  $fBoolFun2TextDay_$s$cliftEl2' ::
    (Data.Text.Internal.Text
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
666bc4b3e9db5e646e1739a59510ff2e
  $fBoolFun2TextDay_$s$cliftLeft2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
dbbc401d466d3c6c92e870d4c8737513
  $fBoolFun2TextDay_$s$cliftLeft2' ::
    (Data.Text.Internal.Text
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextDay_$s$fLiftElem2TextDaya ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextDouble ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2TextDouble1
                  Algebra.Function.$fBoolFun2TextDouble_$cliftBoolFun2 -}
18e833d698afb9b2631d07685f5e9ed7
  $fBoolFun2TextDouble1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextDouble_$s$fLiftElem2TextDoublea -}
a3e5f94afce70f661def9df69f9fd8fa
  $fBoolFun2TextDouble_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
5e0c2ef8a7348355bc8803a1f96dbee7
  $fBoolFun2TextDouble_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
3440dbbe000ca1f0f0d2b0ef3c2eb592
  $fBoolFun2TextDouble_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
9f1dc7eac0a8ef51bf7f1e66a32d69d5
  $fBoolFun2TextDouble_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
be533c54ca670e140196c7c83349ea19
  $fBoolFun2TextDouble_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextDouble_$s$fLiftElem2TextDoublea ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextInt ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2TextInt1
                  Algebra.Function.$fBoolFun2TextInt_$cliftBoolFun2 -}
03f55b64d6e3f315111e9eb8f8836366
  $fBoolFun2TextInt1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextInt_$s$fLiftElem2TextInta -}
9e1208a621f6e1bc46924a1e0137083c
  $fBoolFun2TextInt_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
f2e20224935c74765971d599e32799fd
  $fBoolFun2TextInt_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
7df00fbf453810fbea7c8cc2d340e803
  $fBoolFun2TextInt_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
6b3d7bbeef5e3cb1f2d9cad6b3086791
  $fBoolFun2TextInt_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
75fe9ac52a1bde176a0afc2a4c4d829a
  $fBoolFun2TextInt_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextInt_$s$fLiftElem2TextInta ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextInteger ::
    Algebra.Function.BoolFun2
      Data.Text.Internal.Text GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2TextInteger1
                  Algebra.Function.$fBoolFun2TextInteger_$cliftBoolFun2 -}
21195d8484597609cb30ac51378bcf67
  $fBoolFun2TextInteger1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextInteger_$s$fLiftElem2TextIntegera -}
7843a5d56349dd63a2a89bce8850c341
  $fBoolFun2TextInteger_$cliftBoolFun2 ::
    (Data.Text.Internal.Text
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
12504b58520a29fc4728a3151dca147e
  $fBoolFun2TextInteger_$s$cliftEl2 ::
    (Data.Text.Internal.Text
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
34b8190094cea20544537ec544231578
  $fBoolFun2TextInteger_$s$cliftEl2' ::
    (Data.Text.Internal.Text
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
aa0eca01ad345e21aec5573eae5e3678
  $fBoolFun2TextInteger_$s$cliftLeft2 ::
    (Data.Text.Internal.Text
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
4192b178ee017bc4840b8faa3bc826f6
  $fBoolFun2TextInteger_$s$cliftLeft2' ::
    (Data.Text.Internal.Text
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextInteger_$s$fLiftElem2TextIntegera ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextRelvar ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2TextRelvar1
                  Algebra.Function.$fBoolFun2TextRelvar_$cliftBoolFun2 -}
09884aa9d3ec8303cd994a5ee16880f9
  $fBoolFun2TextRelvar1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextRelvar_$s$fLiftElem2TextRelvara -}
9e1315c8a68ca0e890429ce444bb9e7c
  $fBoolFun2TextRelvar_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
c003697c78a3bf22dba9e038a1606ff0
  $fBoolFun2TextRelvar_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
c56fcdb540a1f171a93c6c51456888c8
  $fBoolFun2TextRelvar_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
40acf046bed35c49755d5e10232f68c8
  $fBoolFun2TextRelvar_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
43312c04ce04180854d7766ce6b9a428
  $fBoolFun2TextRelvar_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextRelvar_$s$fLiftElem2TextRelvara ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextText ::
    Algebra.Function.BoolFun2
      Data.Text.Internal.Text Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2TextText1
                  Algebra.Function.$fBoolFun2TextText_$cliftBoolFun2 -}
7b479ffaf62d98b5dbf9b3deac944f4b
  $fBoolFun2TextText1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextText_$s$fLiftElem2TextTexta -}
d3285b3d44c90031cb97ba5ab58865d5
  $fBoolFun2TextText_$cliftBoolFun2 ::
    (Data.Text.Internal.Text
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
1abc6c95a4916effb6b9aa73b2e0017a
  $fBoolFun2TextText_$s$cliftEl2 ::
    (Data.Text.Internal.Text
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
726c2c209c5432209a35343c393df380
  $fBoolFun2TextText_$s$cliftEl2' ::
    (Data.Text.Internal.Text
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
cfbee9d781bb2c9ddb174954a64add21
  $fBoolFun2TextText_$s$cliftLeft2 ::
    (Data.Text.Internal.Text
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
064e93348ce86be7d623805338617c46
  $fBoolFun2TextText_$s$cliftLeft2' ::
    (Data.Text.Internal.Text
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextText_$s$fLiftElem2TextTexta ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2TextUTCTime ::
    Algebra.Function.BoolFun2
      Data.Text.Internal.Text Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2TextUTCTime1
                  Algebra.Function.$fBoolFun2TextUTCTime_$cliftBoolFun2 -}
e68681f5201245aef6f0541ac09cb752
  $fBoolFun2TextUTCTime1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2TextUTCTime_$s$fLiftElem2TextUTCTimea -}
275fa8344cc6952d89f7e44c00c5520e
  $fBoolFun2TextUTCTime_$cliftBoolFun2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
4508f8d00c675abf9595552a0e3adc77
  $fBoolFun2TextUTCTime_$s$cliftEl2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
8e3168cf78a06c8861ff97441eba6f76
  $fBoolFun2TextUTCTime_$s$cliftEl2' ::
    (Data.Text.Internal.Text
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
a296e336339bb9fd23ffc871bbc4472d
  $fBoolFun2TextUTCTime_$s$cliftLeft2 ::
    (Data.Text.Internal.Text
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
ee7061cbf7993d79aab50bafc3231397
  $fBoolFun2TextUTCTime_$s$cliftLeft2' ::
    (Data.Text.Internal.Text
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2TextUTCTime_$s$fLiftElem2TextUTCTimea ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2Text[] ::
    Algebra.Function.BoolFun2 Data.Text.Internal.Text GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2Text[]1
                  Algebra.Function.$fBoolFun2Text[]_$cliftBoolFun2 -}
c2e0fbd44af9faff0d9c31a41cf6ec32
  $fBoolFun2Text[]1 ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2Text[]_$s$fLiftElem2Text[]a -}
cab8f62b8755d325c3fb3fffdf1d35a3
  $fBoolFun2Text[]_$cliftBoolFun2 ::
    (Data.Text.Internal.Text -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Text.Internal.Text
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
37d119b3e7fe1cfda36ea79b99dabbca
  $fBoolFun2Text[]_$s$cliftEl2 ::
    (Data.Text.Internal.Text -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
e0cfbf0c4083b6551af4cb72a7c93b13
  $fBoolFun2Text[]_$s$cliftEl2' ::
    (Data.Text.Internal.Text -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
1e5296d72d23cc5a9098d92cefd7219f
  $fBoolFun2Text[]_$s$cliftLeft2 ::
    (Data.Text.Internal.Text -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Text.Internal.Text
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.T x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
31c809f01ab596b3a99b5c99f61da1b5
  $fBoolFun2Text[]_$s$cliftLeft2' ::
    (Data.Text.Internal.Text -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Text.Internal.Text
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2Text[]_$s$fLiftElem2Text[]a ::
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2Text[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2Text[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2Text[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2Text[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeBool ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2UTCTimeBool1
                  Algebra.Function.$fBoolFun2UTCTimeBool_$cliftBoolFun2 -}
5aa466e87613bb9e8c9dae023667e455
  $fBoolFun2UTCTimeBool1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeBool_$s$fLiftElem2UTCTimeBoola -}
8dc448d3685768cf1474871b4bf34869
  $fBoolFun2UTCTimeBool_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
a2cb72291d7bbfc762b2cb612360f755
  $fBoolFun2UTCTimeBool_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
da26581e3fbc2373fd0df3f572203f71
  $fBoolFun2UTCTimeBool_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
1b5b5805874e1c57dea968e4b77705eb
  $fBoolFun2UTCTimeBool_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d6ec4eb99d6da540796f6a5b995dea0e
  $fBoolFun2UTCTimeBool_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeBool_$s$fLiftElem2UTCTimeBoola ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeByteString ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2UTCTimeByteString1
                  Algebra.Function.$fBoolFun2UTCTimeByteString_$cliftBoolFun2 -}
d8bb52517f66b3f2128af55d198a4a4c
  $fBoolFun2UTCTimeByteString1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeByteString_$s$fLiftElem2UTCTimeByteStringa -}
96a2b469e8d1586c2b50b65162acff91
  $fBoolFun2UTCTimeByteString_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
9edd15468998d9def59049151f598214
  $fBoolFun2UTCTimeByteString_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
d8ebcf749fdfc56b8f222a2d315cbd4c
  $fBoolFun2UTCTimeByteString_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
bed2d6104c74fa1535366bef048ec006
  $fBoolFun2UTCTimeByteString_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
51bfe593295d2fa2bbdf2c5aa6102130
  $fBoolFun2UTCTimeByteString_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeByteString_$s$fLiftElem2UTCTimeByteStringa ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.ByteString.Internal.ByteString
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeChar ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2UTCTimeChar1
                  Algebra.Function.$fBoolFun2UTCTimeChar_$cliftBoolFun2 -}
2ef871148759776fabddb800be91a164
  $fBoolFun2UTCTimeChar1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeChar_$s$fLiftElem2UTCTimeChara -}
34e7e9209a1742c647999f0e7a2f5865
  $fBoolFun2UTCTimeChar_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
eac290eb0599bdf6a780b272e5a8aeb0
  $fBoolFun2UTCTimeChar_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
a24ed711f2839ce4ec71c0a896c2df59
  $fBoolFun2UTCTimeChar_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
064be4a3301b754d75f935578404edc3
  $fBoolFun2UTCTimeChar_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
76149f4ced72b100a6ea0c5f31b7b4fb
  $fBoolFun2UTCTimeChar_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeChar_$s$fLiftElem2UTCTimeChara ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeDay ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2UTCTimeDay1
                  Algebra.Function.$fBoolFun2UTCTimeDay_$cliftBoolFun2 -}
58a9035dda151a8041e227ccb65332ff
  $fBoolFun2UTCTimeDay1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeDay_$s$fLiftElem2UTCTimeDaya -}
de10f3fd774fbab7379dd1216f638e43
  $fBoolFun2UTCTimeDay_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
5a29f314824ae30009edcbb68d68239b
  $fBoolFun2UTCTimeDay_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
d357904576d48e0dbbc43c383d9e9450
  $fBoolFun2UTCTimeDay_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
a17e2691839d5108f75bbad620b6f0e2
  $fBoolFun2UTCTimeDay_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
7251f168f849f30b6b4b26a36bc4aab9
  $fBoolFun2UTCTimeDay_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeDay_$s$fLiftElem2UTCTimeDaya ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.Time.Calendar.Days.Day
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeDouble ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2UTCTimeDouble1
                  Algebra.Function.$fBoolFun2UTCTimeDouble_$cliftBoolFun2 -}
f9429c46ba55ac796459048d99414851
  $fBoolFun2UTCTimeDouble1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeDouble_$s$fLiftElem2UTCTimeDoublea -}
bea227af1e0220685c888a18033c9974
  $fBoolFun2UTCTimeDouble_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
2af943c0b043f1a645b938a3a50a3d3e
  $fBoolFun2UTCTimeDouble_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
a8c7afac93a0b23b35d0f9d5904df111
  $fBoolFun2UTCTimeDouble_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
6541fc599f6dc48c1a5d1c5a5059b058
  $fBoolFun2UTCTimeDouble_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6181e295338088702a6bbcfd49b012db
  $fBoolFun2UTCTimeDouble_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeDouble_$s$fLiftElem2UTCTimeDoublea ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeInt ::
    Algebra.Function.BoolFun2 Data.Time.Clock.UTC.UTCTime GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2UTCTimeInt1
                  Algebra.Function.$fBoolFun2UTCTimeInt_$cliftBoolFun2 -}
2b77a0562b8acc04484911475e8da87b
  $fBoolFun2UTCTimeInt1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeInt_$s$fLiftElem2UTCTimeInta -}
214060d3ca50e8222780c04f702188bf
  $fBoolFun2UTCTimeInt_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
a956d52371beab3779173d24c3e5bcd8
  $fBoolFun2UTCTimeInt_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
1d0b129b1b9f24957ccc24e72d1124cd
  $fBoolFun2UTCTimeInt_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
dd8365bbf3748a781fe2944578558d14
  $fBoolFun2UTCTimeInt_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
8e6cd58c47e0ebfc18e3eeb1647f9ffa
  $fBoolFun2UTCTimeInt_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeInt_$s$fLiftElem2UTCTimeInta ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeInteger ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2UTCTimeInteger1
                  Algebra.Function.$fBoolFun2UTCTimeInteger_$cliftBoolFun2 -}
38fa0d293777f4e7fe067fa24240a263
  $fBoolFun2UTCTimeInteger1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeInteger_$s$fLiftElem2UTCTimeIntegera -}
13cc94d6332db8bbcae0bac12c1f04fd
  $fBoolFun2UTCTimeInteger_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
72873a455e20311ce63680f16e4739d9
  $fBoolFun2UTCTimeInteger_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
df0bd7e45ae27a810f61afce4a91e6b3
  $fBoolFun2UTCTimeInteger_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
09251658a509b7a28abc40677a359a51
  $fBoolFun2UTCTimeInteger_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0e2a4b41d502e0d0ebf511b8879f3063
  $fBoolFun2UTCTimeInteger_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeInteger_$s$fLiftElem2UTCTimeIntegera ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeRelvar ::
    Algebra.Function.BoolFun2 Data.Time.Clock.UTC.UTCTime Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2UTCTimeRelvar1
                  Algebra.Function.$fBoolFun2UTCTimeRelvar_$cliftBoolFun2 -}
631ece23d5e60b79f7143e5a1a73a2a8
  $fBoolFun2UTCTimeRelvar1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$fLiftElem2UTCTimeRelvara -}
d7c3793b29c74dc8a52a1dfe6047b4c5
  $fBoolFun2UTCTimeRelvar_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
30a3297cbc66470c91ee8deed5fe273f
  $fBoolFun2UTCTimeRelvar_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
5f06522a1e27d5550a3f30f9b5dbd217
  $fBoolFun2UTCTimeRelvar_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
991b71e717eeb7eb33eaae4884966a16
  $fBoolFun2UTCTimeRelvar_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
23f88699cf1332bf1cc5cf09238045b3
  $fBoolFun2UTCTimeRelvar_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeRelvar_$s$fLiftElem2UTCTimeRelvara ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeText ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2UTCTimeText1
                  Algebra.Function.$fBoolFun2UTCTimeText_$cliftBoolFun2 -}
475b7d9c30fcba72883c53daca7c870c
  $fBoolFun2UTCTimeText1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeText_$s$fLiftElem2UTCTimeTexta -}
55611d7cdbd9c1bfce72b730a00a81d0
  $fBoolFun2UTCTimeText_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
0fb77afffb9d865970881d099d11cd48
  $fBoolFun2UTCTimeText_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
d3f19ad4d1d2ee1af98aa9ffea48d7bd
  $fBoolFun2UTCTimeText_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
f4e34ca2e577d873729d48bf3d8804d6
  $fBoolFun2UTCTimeText_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
201a803f3ce0d16aae7a57b256c4598f
  $fBoolFun2UTCTimeText_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeText_$s$fLiftElem2UTCTimeTexta ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTimeUTCTime ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime1
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime_$cliftBoolFun2 -}
494d0b852b955f669f9319b19433de1f
  $fBoolFun2UTCTimeUTCTime1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$fLiftElem2UTCTimeUTCTimea -}
59b439cc44d2357658906534a92c21c4
  $fBoolFun2UTCTimeUTCTime_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
235c3a2b03b4d045df634ad2f58c94b0
  $fBoolFun2UTCTimeUTCTime_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
57a1c5a208de6196d5df9b7a87aed7d2
  $fBoolFun2UTCTimeUTCTime_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
8a7a461b1cafd730f96a0c63faf04923
  $fBoolFun2UTCTimeUTCTime_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
061c0aa754fb4ec88c05ec657f07bd15
  $fBoolFun2UTCTimeUTCTime_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime
     -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTimeUTCTime_$s$fLiftElem2UTCTimeUTCTimea ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime
      Data.Time.Clock.UTC.UTCTime
      GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2UTCTime[] ::
    Algebra.Function.BoolFun2
      Data.Time.Clock.UTC.UTCTime GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2UTCTime[]1
                  Algebra.Function.$fBoolFun2UTCTime[]_$cliftBoolFun2 -}
0cf29de7e1fb601541bd2dcc758a5259
  $fBoolFun2UTCTime[]1 ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2UTCTime[]_$s$fLiftElem2UTCTime[]a -}
661966ab90210e10b5b3a44fde1c6936
  $fBoolFun2UTCTime[]_$cliftBoolFun2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
e3793c3c3252e0ac2bd248c9efc80ad6
  $fBoolFun2UTCTime[]_$s$cliftEl2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
77eec8f83a4a10a7e9f0e55ab50e4c5a
  $fBoolFun2UTCTime[]_$s$cliftEl2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
a4c738e75298733c0bedfc3c13f69439
  $fBoolFun2UTCTime[]_$s$cliftLeft2 ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: Data.Time.Clock.UTC.UTCTime
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.DT x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
add9f023d195cef77c202b805c2ff32e
  $fBoolFun2UTCTime[]_$s$cliftLeft2' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2UTCTime[]_$s$fLiftElem2UTCTime[]a ::
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Bool ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFun2[]Bool1
                  Algebra.Function.$fBoolFun2[]Bool_$cliftBoolFun2 -}
2968362952991ed0965dd34de2b1f46b
  $fBoolFun2[]Bool1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Bool_$s$fLiftElem2[]Boola -}
995a9052f018bc64cdf0da952cfb4b31
  $fBoolFun2[]Bool_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.B x2 -> eta x1 x2 } } } }) -}
8b2d1910bf95d5aadf070ece05018f54
  $fBoolFun2[]Bool_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.B x2 -> Relvar.B (f x1 x2) } } } }) -}
72ba3ed9aa736f5a1c0a2bd865276c29
  $fBoolFun2[]Bool_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (eta x x1) } }) -}
6d4da020d04f7e6313f02581735724f3
  $fBoolFun2[]Bool_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Bool -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.B x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
d18c65b685cd1ab1df404798a23cdd3e
  $fBoolFun2[]Bool_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Bool -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Bool_$s$fLiftElem2[]Boola ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Bool_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Bool_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Bool_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Bool_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]ByteString ::
    Algebra.Function.BoolFun2
      GHC.Base.String Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFun2[]ByteString1
                  Algebra.Function.$fBoolFun2[]ByteString_$cliftBoolFun2 -}
9331a977b3111f50138d6549c33c6be0
  $fBoolFun2[]ByteString1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]ByteString_$s$fLiftElem2[]ByteStringa -}
9808e60550b7f2a9542fd84218eae64d
  $fBoolFun2[]ByteString_$cliftBoolFun2 ::
    (GHC.Base.String
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.BS x2 -> eta x1 x2 } } } }) -}
132ccf4a134e28f837771ce11c325e85
  $fBoolFun2[]ByteString_$s$cliftEl2 ::
    (GHC.Base.String
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.BS x2 -> Relvar.B (f x1 x2) } } } }) -}
88ef32fcd2667232a4fc9402421808f1
  $fBoolFun2[]ByteString_$s$cliftEl2' ::
    (GHC.Base.String
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (eta x x1) } }) -}
1157b28518a86cf7ab36c9fb2c85ac67
  $fBoolFun2[]ByteString_$s$cliftLeft2 ::
    (GHC.Base.String
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.BS x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
6aa217f9dd1b4c9f2b974053db13e593
  $fBoolFun2[]ByteString_$s$cliftLeft2' ::
    (GHC.Base.String
     -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]ByteString_$s$fLiftElem2[]ByteStringa ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]ByteString_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]ByteString_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]ByteString_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]ByteString_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Char ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFun2[]Char1
                  Algebra.Function.$fBoolFun2[]Char_$cliftBoolFun2 -}
ee746b2e2bce5077d1b27a30211ad332
  $fBoolFun2[]Char1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Char_$s$fLiftElem2[]Chara -}
b00606adab15f93259d8117f39997845
  $fBoolFun2[]Char_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.C x2 -> eta x1 x2 } } } }) -}
12fe5127448d3525a7b149940ca58d5f
  $fBoolFun2[]Char_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.C x2 -> Relvar.B (f x1 x2) } } } }) -}
5d869759e433c6951dc466c3aef94780
  $fBoolFun2[]Char_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (eta x x1) } }) -}
a25f0e1a4e593cc58f77a08c9db96c8f
  $fBoolFun2[]Char_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Char -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.C x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
14e3088a95784e98ec3e869e654952c7
  $fBoolFun2[]Char_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Char -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Char_$s$fLiftElem2[]Chara ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Char_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Char_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Char_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Char_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Day ::
    Algebra.Function.BoolFun2
      GHC.Base.String Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFun2[]Day1
                  Algebra.Function.$fBoolFun2[]Day_$cliftBoolFun2 -}
34e4dd8b5d140c3fc487824060752d1f
  $fBoolFun2[]Day1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Day_$s$fLiftElem2[]Daya -}
300db685f94e0cabe7cc2feff4fcdb02
  $fBoolFun2[]Day_$cliftBoolFun2 ::
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DD x2 -> eta x1 x2 } } } }) -}
7f8d20c925460531837e8c8cee84f735
  $fBoolFun2[]Day_$s$cliftEl2 ::
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DD x2 -> Relvar.B (f x1 x2) } } } }) -}
4f20911f6068c2bead8da7d0fe55abef
  $fBoolFun2[]Day_$s$cliftEl2' ::
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (eta x x1) } }) -}
b10f8df2ff569cbd841d02e4293a2676
  $fBoolFun2[]Day_$s$cliftLeft2 ::
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DD x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
b63aae97a7bbc66fb3684206b0c9cc4c
  $fBoolFun2[]Day_$s$cliftLeft2' ::
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Day_$s$fLiftElem2[]Daya ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Day_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Day_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Day_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Day_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Double ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFun2[]Double1
                  Algebra.Function.$fBoolFun2[]Double_$cliftBoolFun2 -}
c124c48772bbb80b5771d735e5e96d92
  $fBoolFun2[]Double1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Double_$s$fLiftElem2[]Doublea -}
56600955cba24a40ebd119a70baf4077
  $fBoolFun2[]Double_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.D x2 -> eta x1 x2 } } } }) -}
b060e5a13cf63d9a4f4eed9f1535a1da
  $fBoolFun2[]Double_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.D x2 -> Relvar.B (f x1 x2) } } } }) -}
c51aca9d6ae6ba91898c53ef5322fc2d
  $fBoolFun2[]Double_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (eta x x1) } }) -}
a8dd8880762454309b69a0ad22fc7405
  $fBoolFun2[]Double_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Double -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.D x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
31231294cdd74269086856b84008565d
  $fBoolFun2[]Double_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Double_$s$fLiftElem2[]Doublea ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Double_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Double_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Double_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Double_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Int ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFun2[]Int1
                  Algebra.Function.$fBoolFun2[]Int_$cliftBoolFun2 -}
53014625a1ef4fe229eca8a5b897a7cf
  $fBoolFun2[]Int1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Int_$s$fLiftElem2[]Inta -}
c8d3c5db7187ee90480df139ab9936e7
  $fBoolFun2[]Int_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.I x2 -> eta x1 x2 } } } }) -}
96c0297b41ad8b1dcd2df7bfcf64de80
  $fBoolFun2[]Int_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.I x2 -> Relvar.B (f x1 x2) } } } }) -}
40e2f2009218517f58c1dd5c877220bf
  $fBoolFun2[]Int_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (eta x x1) } }) -}
979bc05a828b339c1035fafb77dc60ab
  $fBoolFun2[]Int_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Types.Int -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.I x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
abe6403ba28a37c9ed89643c58c2d020
  $fBoolFun2[]Int_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Int -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Int_$s$fLiftElem2[]Inta ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Int_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Int_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Int_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Int_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Integer ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFun2[]Integer1
                  Algebra.Function.$fBoolFun2[]Integer_$cliftBoolFun2 -}
c5040ed2f05ca323740e71b87bf98d08
  $fBoolFun2[]Integer1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Integer_$s$fLiftElem2[]Integera -}
671a9ac1970f57f7827adc95700503fa
  $fBoolFun2[]Integer_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.J x2 -> eta x1 x2 } } } }) -}
6c4cca8b666b451ed164ec742312f288
  $fBoolFun2[]Integer_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.J x2 -> Relvar.B (f x1 x2) } } } }) -}
b899ca30f153aab8cf897801debaaaef
  $fBoolFun2[]Integer_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (eta x x1) } }) -}
3430387b42ce37e81b9619b27c48de20
  $fBoolFun2[]Integer_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.J x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
78e1d83b2d3b9b35fe85c99955fe2ddd
  $fBoolFun2[]Integer_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Integer_$s$fLiftElem2[]Integera ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Integer_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Integer_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Integer_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Integer_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Relvar ::
    Algebra.Function.BoolFun2 GHC.Base.String Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFun2[]Relvar1
                  Algebra.Function.$fBoolFun2[]Relvar_$cliftBoolFun2 -}
aa6c610ba664dee06fd7faa2ee80b871
  $fBoolFun2[]Relvar1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Relvar_$s$fLiftElem2[]Relvara -}
54938f2827fc9bdfe3751a13330ec16e
  $fBoolFun2[]Relvar_$cliftBoolFun2 ::
    (GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.R x2 -> eta x1 x2 } } } }) -}
cfdc541fe4c35d144469403190c9df82
  $fBoolFun2[]Relvar_$s$cliftEl2 ::
    (GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.R x2 -> Relvar.B (f x1 x2) } } } }) -}
c8766aaf81fa4073e8b9a092b054e77d
  $fBoolFun2[]Relvar_$s$cliftEl2' ::
    (GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (eta x x1) } }) -}
ac7bd3131e1621bd4aa7210ee4615190
  $fBoolFun2[]Relvar_$s$cliftLeft2 ::
    (GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Relvar.Relvar -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.R x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
0a40267056fd051410a38beeefaab42d
  $fBoolFun2[]Relvar_$s$cliftLeft2' ::
    (GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> Relvar.Relvar -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Relvar_$s$fLiftElem2[]Relvara ::
    Algebra.Function.LiftElem2
      GHC.Base.String Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Relvar_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Relvar_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Relvar_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Relvar_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]Text ::
    Algebra.Function.BoolFun2 GHC.Base.String Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFun2[]Text1
                  Algebra.Function.$fBoolFun2[]Text_$cliftBoolFun2 -}
8e1a73c2c3b07ad6759c89d270ba45e8
  $fBoolFun2[]Text1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]Text_$s$fLiftElem2[]Texta -}
5841a2b406610ebdefdb5ca769ed521a
  $fBoolFun2[]Text_$cliftBoolFun2 ::
    (GHC.Base.String -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.T x2 -> eta x1 x2 } } } }) -}
be6a5db4d86327f0a8ba770eb5ea1f38
  $fBoolFun2[]Text_$s$cliftEl2 ::
    (GHC.Base.String -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.T x2 -> Relvar.B (f x1 x2) } } } }) -}
47f538169038be6788d5a3b97bd75162
  $fBoolFun2[]Text_$s$cliftEl2' ::
    (GHC.Base.String -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (eta x x1) } }) -}
6fc696fb1b2aa66b68df8e300348239a
  $fBoolFun2[]Text_$s$cliftLeft2 ::
    (GHC.Base.String -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.T x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
27938cae84c4115053b91dd920a411d5
  $fBoolFun2[]Text_$s$cliftLeft2' ::
    (GHC.Base.String -> Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]Text_$s$fLiftElem2[]Texta ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]Text_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]Text_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]Text_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]Text_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[]UTCTime ::
    Algebra.Function.BoolFun2
      GHC.Base.String Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFun2[]UTCTime1
                  Algebra.Function.$fBoolFun2[]UTCTime_$cliftBoolFun2 -}
9deb509044f8f31de66f0138fb0a5dc8
  $fBoolFun2[]UTCTime1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[]UTCTime_$s$fLiftElem2[]UTCTimea -}
d50346af73df37439b20e3986fc27caf
  $fBoolFun2[]UTCTime_$cliftBoolFun2 ::
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.DT x2 -> eta x1 x2 } } } }) -}
d648560ddec630eef26f2e20df83885e
  $fBoolFun2[]UTCTime_$s$cliftEl2 ::
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.DT x2 -> Relvar.B (f x1 x2) } } } }) -}
0a174f9cd8c638d9eb9cf0375b3a7107
  $fBoolFun2[]UTCTime_$s$cliftEl2' ::
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (eta x x1) } }) -}
7ac7b7510dd6ebf772f73edacb69823e
  $fBoolFun2[]UTCTime_$s$cliftLeft2 ::
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.DT x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
18f4bcfc55e27a93547e3bec5bea32e6
  $fBoolFun2[]UTCTime_$s$cliftLeft2' ::
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String
                          -> Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[]UTCTime_$s$fLiftElem2[]UTCTimea ::
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftEl2 -}
ec583295288e3ab05b211674031b25e8
  $fBoolFun2[][] ::
    Algebra.Function.BoolFun2 GHC.Base.String GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun2[][]1
                  Algebra.Function.$fBoolFun2[][]_$cliftBoolFun2 -}
6db67584b370fd1ee3d33dfd0e7f6bf2
  $fBoolFun2[][]1 ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun2[][]_$s$fLiftElem2[][]a -}
e51cf5503b6c911a17d764ba5f6c12dd
  $fBoolFun2[][]_$cliftBoolFun2 ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ eta :: GHC.Base.String
                          -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case Algebra.Function.$fBoolFun2BoolBool1
                           ret_ty GHC.Types.Bool
                           of {}
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Types.False
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Types.False Relvar.S x2 -> eta x1 x2 } } } }) -}
e69df23237046d4debfafa082808c7b9
  $fBoolFun2[][]_$s$cliftEl2 ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> Relvar.Nil
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> Relvar.Nil
                                  Relvar.S x2 -> Relvar.B (f x1 x2) } } } }) -}
9d6ca782a00f67903065b398a090b05e
  $fBoolFun2[][]_$s$cliftEl2' ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (eta x x1) } }) -}
490de8f1401baf0ec48c0e02a458de94
  $fBoolFun2[][]_$s$cliftLeft2 ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(C1(U))><S,1*U>,
     Unfolding: (\ f :: GHC.Base.String
                        -> GHC.Base.String -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool4
                        : y xs
                        -> case x of wild2 {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                             Relvar.S x1
                             -> case y of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                                  Relvar.S x2
                                  -> GHC.Base.Just @ GHC.Types.Bool (f x1 x2) } } } }) -}
e404ff4edfee9cea0d45da8c586f828c
  $fBoolFun2[][]_$s$cliftLeft2' ::
    (GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ eta :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x
                   -> case eta2 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (eta x x1) } }) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fBoolFun2[][]_$s$fLiftElem2[][]a ::
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun2[][]_$s$cliftLeft2'
                  Algebra.Function.$fBoolFun2[][]_$s$cliftLeft2
                  Algebra.Function.$fBoolFun2[][]_$s$cliftEl2'
                  Algebra.Function.$fBoolFun2[][]_$s$cliftEl2 -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunBool :: Algebra.Function.BoolFun GHC.Types.Bool
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  Algebra.Function.$fBoolFunBool1
                  Algebra.Function.$fBoolFunBool_$cliftBoolFun -}
36831e8273a00a7fe200a962713f745a
  $fBoolFunBool1 ::
    Algebra.Function.LiftElem GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunBool_$s$fLiftElemBoola -}
d89ad2f62cc54a750d0d0fd76a321a49
  $fBoolFunBool_$cliftBoolFun ::
    (GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Bool eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.B x1 -> eta x1 } }) -}
71ccdfc6bd9a0aba6a3ccbf4b26c1197
  $fBoolFunBool_$s$cliftEl ::
    (GHC.Types.Bool -> GHC.Types.Bool) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Bool -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.B x1 -> Relvar.B (f x1) } }) -}
398deb49a23caf74d93de9f53babb3d6
  $fBoolFunBool_$s$cliftEl' ::
    (GHC.Types.Bool -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.B x -> Relvar.B (eta x) }) -}
a4c5607491ee162668ec6be9a5d1ff8b
  $fBoolFunBool_$s$cliftLeft ::
    (GHC.Types.Bool -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Bool -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.B x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
0aacdeba9ffb2293f7bffc5fca8bfad1
  $fBoolFunBool_$s$cliftLeft' ::
    (GHC.Types.Bool -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Bool -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunBool_$s$fLiftElemBoola ::
    Algebra.Function.LiftElem GHC.Types.Bool GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  Relvar.$fElementableBool
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunBool_$s$cliftLeft'
                  Algebra.Function.$fBoolFunBool_$s$cliftLeft
                  Algebra.Function.$fBoolFunBool_$s$cliftEl'
                  Algebra.Function.$fBoolFunBool_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunByteString ::
    Algebra.Function.BoolFun Data.ByteString.Internal.ByteString
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  Algebra.Function.$fBoolFunByteString1
                  Algebra.Function.$fBoolFunByteString_$cliftBoolFun -}
6d78e6ea6a53c15a92732c18b34d2b45
  $fBoolFunByteString1 ::
    Algebra.Function.LiftElem
      Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunByteString_$s$fLiftElemByteStringa -}
31739dc68ff93fadbe65f44cce220bfb
  $fBoolFunByteString_$cliftBoolFun ::
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.BS x1 -> eta x1 } }) -}
4d1fd529bd6fcb73750760869fa81fb3
  $fBoolFunByteString_$s$cliftEl ::
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.BS x1 -> Relvar.B (f x1) } }) -}
17c044ab45cb88896efde3210d351196
  $fBoolFunByteString_$s$cliftEl' ::
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.BS x -> Relvar.B (eta x) }) -}
9cc062cac6a23e9d070d808080477ba0
  $fBoolFunByteString_$s$cliftLeft ::
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.BS x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
d593d4fb0e6d8735ed22a00132f67c33
  $fBoolFunByteString_$s$cliftLeft' ::
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.BS x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunByteString_$s$fLiftElemByteStringa ::
    Algebra.Function.LiftElem
      Data.ByteString.Internal.ByteString GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  Relvar.$fElementableByteString
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunByteString_$s$cliftLeft'
                  Algebra.Function.$fBoolFunByteString_$s$cliftLeft
                  Algebra.Function.$fBoolFunByteString_$s$cliftEl'
                  Algebra.Function.$fBoolFunByteString_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunChar :: Algebra.Function.BoolFun GHC.Types.Char
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  Algebra.Function.$fBoolFunChar1
                  Algebra.Function.$fBoolFunChar_$cliftBoolFun -}
100c4818c53a45b4a1539fb52cd6bca9
  $fBoolFunChar1 ::
    Algebra.Function.LiftElem GHC.Types.Char GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunChar_$s$fLiftElemChara -}
a559d9d3ecd7563b9bc41d6899c5bec3
  $fBoolFunChar_$cliftBoolFun ::
    (GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Bool eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.C x1 -> eta x1 } }) -}
7fa27f5646fbdff25cea61d52bb8852b
  $fBoolFunChar_$s$cliftEl ::
    (GHC.Types.Char -> GHC.Types.Bool) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Char -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.C x1 -> Relvar.B (f x1) } }) -}
a718d073a332e1934a2c9d5c4fdb144d
  $fBoolFunChar_$s$cliftEl' ::
    (GHC.Types.Char -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.C x -> Relvar.B (eta x) }) -}
ae72cb8b4e65d7bae202d9a2973330ad
  $fBoolFunChar_$s$cliftLeft ::
    (GHC.Types.Char -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Char -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.C x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
a2372dcfe08c9cae02d8fccb7591012f
  $fBoolFunChar_$s$cliftLeft' ::
    (GHC.Types.Char -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Char -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.C x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunChar_$s$fLiftElemChara ::
    Algebra.Function.LiftElem GHC.Types.Char GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  Relvar.$fElementableChar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunChar_$s$cliftLeft'
                  Algebra.Function.$fBoolFunChar_$s$cliftLeft
                  Algebra.Function.$fBoolFunChar_$s$cliftEl'
                  Algebra.Function.$fBoolFunChar_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunDay ::
    Algebra.Function.BoolFun Data.Time.Calendar.Days.Day
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  Algebra.Function.$fBoolFunDay1
                  Algebra.Function.$fBoolFunDay_$cliftBoolFun -}
b74094a6b719e0c6baf30d28c1ae252d
  $fBoolFunDay1 ::
    Algebra.Function.LiftElem
      Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunDay_$s$fLiftElemDaya -}
8b75aaa43a56225954faa386eb853ea2
  $fBoolFunDay_$cliftBoolFun ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.DD x1 -> eta x1 } }) -}
750ac1bf65ceaa5d5daa30e4a5108160
  $fBoolFunDay_$s$cliftEl ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DD x1 -> Relvar.B (f x1) } }) -}
6c7d1ace131be52e7255f1c825f68ad7
  $fBoolFunDay_$s$cliftEl' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.DD x -> Relvar.B (eta x) }) -}
fa612f62de1229982a48dbeece1e225d
  $fBoolFunDay_$s$cliftLeft ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DD x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
b4b468d1e7a0a27f19126e040ab64e17
  $fBoolFunDay_$s$cliftLeft' ::
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DD x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunDay_$s$fLiftElemDaya ::
    Algebra.Function.LiftElem
      Data.Time.Calendar.Days.Day GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  Relvar.$fElementableDay
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunDay_$s$cliftLeft'
                  Algebra.Function.$fBoolFunDay_$s$cliftLeft
                  Algebra.Function.$fBoolFunDay_$s$cliftEl'
                  Algebra.Function.$fBoolFunDay_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunDouble :: Algebra.Function.BoolFun GHC.Types.Double
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Algebra.Function.$fBoolFunDouble1
                  Algebra.Function.$fBoolFunDouble_$cliftBoolFun -}
d4a68fada57fb2ed0ece7928cdf23419
  $fBoolFunDouble1 ::
    Algebra.Function.LiftElem GHC.Types.Double GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunDouble_$s$fLiftElemDoublea -}
6ac893f76308cb745b5c23d9f589dc45
  $fBoolFunDouble_$cliftBoolFun ::
    (GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.D x1 -> eta x1 } }) -}
f055d15307c9aa47e9117e20e3e634cb
  $fBoolFunDouble_$s$cliftEl ::
    (GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Double -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.D x1 -> Relvar.B (f x1) } }) -}
d661047d066e31f0875468dd963eb9ba
  $fBoolFunDouble_$s$cliftEl' ::
    (GHC.Types.Double -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.D x -> Relvar.B (eta x) }) -}
672b7610495ecdd99cc5af8dfff3d319
  $fBoolFunDouble_$s$cliftLeft ::
    (GHC.Types.Double -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Double -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.D x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
ef4b4509a1a1993b29add36f76fb909e
  $fBoolFunDouble_$s$cliftLeft' ::
    (GHC.Types.Double -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Double -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.D x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunDouble_$s$fLiftElemDoublea ::
    Algebra.Function.LiftElem GHC.Types.Double GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  Relvar.$fElementableDouble
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunDouble_$s$cliftLeft'
                  Algebra.Function.$fBoolFunDouble_$s$cliftLeft
                  Algebra.Function.$fBoolFunDouble_$s$cliftEl'
                  Algebra.Function.$fBoolFunDouble_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunInt :: Algebra.Function.BoolFun GHC.Types.Int
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Algebra.Function.$fBoolFunInt1
                  Algebra.Function.$fBoolFunInt_$cliftBoolFun -}
4c26e5278b5babf94cfb98ece6e71c45
  $fBoolFunInt1 ::
    Algebra.Function.LiftElem GHC.Types.Int GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunInt_$s$fLiftElemInta -}
09612ce062aeaa5d6c2007e7dcdfbfca
  $fBoolFunInt_$cliftBoolFun ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Bool eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.I x1 -> eta x1 } }) -}
476e36a9fbffc98b0c85612a5a6eb843
  $fBoolFunInt_$s$cliftEl ::
    (GHC.Types.Int -> GHC.Types.Bool) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Int -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.I x1 -> Relvar.B (f x1) } }) -}
01f974cea6da02ceff968bf158c9d82f
  $fBoolFunInt_$s$cliftEl' ::
    (GHC.Types.Int -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.I x -> Relvar.B (eta x) }) -}
8e72c5278543a1dd881c9bdea5ebe539
  $fBoolFunInt_$s$cliftLeft ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Types.Int -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.I x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
1a7650a99e41bf93a0db07b18d4e765e
  $fBoolFunInt_$s$cliftLeft' ::
    (GHC.Types.Int -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Types.Int -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.I x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunInt_$s$fLiftElemInta ::
    Algebra.Function.LiftElem GHC.Types.Int GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  Relvar.$fElementableInt
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunInt_$s$cliftLeft'
                  Algebra.Function.$fBoolFunInt_$s$cliftLeft
                  Algebra.Function.$fBoolFunInt_$s$cliftEl'
                  Algebra.Function.$fBoolFunInt_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunInteger ::
    Algebra.Function.BoolFun GHC.Integer.Type.Integer
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  Algebra.Function.$fBoolFunInteger1
                  Algebra.Function.$fBoolFunInteger_$cliftBoolFun -}
25dfae514f76155e2802814d69d08018
  $fBoolFunInteger1 ::
    Algebra.Function.LiftElem GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunInteger_$s$fLiftElemIntegera -}
7baa0086cc5d61b6eeb516ee5009923a
  $fBoolFunInteger_$cliftBoolFun ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.J x1 -> eta x1 } }) -}
643dae6013fa0408e50944f46b70aa6c
  $fBoolFunInteger_$s$cliftEl ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.J x1 -> Relvar.B (f x1) } }) -}
a4e46322a83c04fc0af0d566558d8fc9
  $fBoolFunInteger_$s$cliftEl' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.J x -> Relvar.B (eta x) }) -}
e67abb916a750d657b5ab5d9909678c2
  $fBoolFunInteger_$s$cliftLeft ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.J x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
580525463ba2cc2979920a00f14af37c
  $fBoolFunInteger_$s$cliftLeft' ::
    (GHC.Integer.Type.Integer -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Integer.Type.Integer -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.J x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunInteger_$s$fLiftElemIntegera ::
    Algebra.Function.LiftElem GHC.Integer.Type.Integer GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  Relvar.$fElementableInteger
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunInteger_$s$cliftLeft'
                  Algebra.Function.$fBoolFunInteger_$s$cliftLeft
                  Algebra.Function.$fBoolFunInteger_$s$cliftEl'
                  Algebra.Function.$fBoolFunInteger_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunRelvar :: Algebra.Function.BoolFun Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  Algebra.Function.$fBoolFunRelvar1
                  Algebra.Function.$fBoolFunRelvar_$cliftBoolFun -}
65725a2cb00c9ba9adee4b37ada0d4e4
  $fBoolFunRelvar1 ::
    Algebra.Function.LiftElem Relvar.Relvar GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunRelvar_$s$fLiftElemRelvara -}
02487756a8910f9b67f55fcb752a910a
  $fBoolFunRelvar_$cliftBoolFun ::
    (Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Bool eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.R x1 -> eta x1 } }) -}
0f3fe79afa1e868a227a0f1e2f56e346
  $fBoolFunRelvar_$s$cliftEl ::
    (Relvar.Relvar -> GHC.Types.Bool) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Relvar.Relvar -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.R x1 -> Relvar.B (f x1) } }) -}
0fc384670acaa9b74da37578a228d3a8
  $fBoolFunRelvar_$s$cliftEl' ::
    (Relvar.Relvar -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.R x -> Relvar.B (eta x) }) -}
0477203dc64a33210c7397713e8f1cd0
  $fBoolFunRelvar_$s$cliftLeft ::
    (Relvar.Relvar -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Relvar.Relvar -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.R x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
b7442807eec9753af7f775d5caa97fc5
  $fBoolFunRelvar_$s$cliftLeft' ::
    (Relvar.Relvar -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Relvar.Relvar -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.R x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunRelvar_$s$fLiftElemRelvara ::
    Algebra.Function.LiftElem Relvar.Relvar GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  Relvar.$fElementableRelvar
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunRelvar_$s$cliftLeft'
                  Algebra.Function.$fBoolFunRelvar_$s$cliftLeft
                  Algebra.Function.$fBoolFunRelvar_$s$cliftEl'
                  Algebra.Function.$fBoolFunRelvar_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunText :: Algebra.Function.BoolFun Data.Text.Internal.Text
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  Algebra.Function.$fBoolFunText1
                  Algebra.Function.$fBoolFunText_$cliftBoolFun -}
2e30b3222a3f6bbafb762e7b1720b504
  $fBoolFunText1 ::
    Algebra.Function.LiftElem Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunText_$s$fLiftElemTexta -}
a541554edaf656093205ef3932f65713
  $fBoolFunText_$cliftBoolFun ::
    (Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.T x1 -> eta x1 } }) -}
bb1c8d97ab1953b1792870cab29562f2
  $fBoolFunText_$s$cliftEl ::
    (Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.T x1 -> Relvar.B (f x1) } }) -}
f764b6068002063e808c9e423cc87619
  $fBoolFunText_$s$cliftEl' ::
    (Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.T x -> Relvar.B (eta x) }) -}
9e0094ca8e3afda28fd0943878e5d41b
  $fBoolFunText_$s$cliftLeft ::
    (Data.Text.Internal.Text -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Text.Internal.Text -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.T x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
e7f9b99a8c23b2922e207278039732b3
  $fBoolFunText_$s$cliftLeft' ::
    (Data.Text.Internal.Text -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Text.Internal.Text -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.T x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunText_$s$fLiftElemTexta ::
    Algebra.Function.LiftElem Data.Text.Internal.Text GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  Relvar.$fElementableText
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunText_$s$cliftLeft'
                  Algebra.Function.$fBoolFunText_$s$cliftLeft
                  Algebra.Function.$fBoolFunText_$s$cliftEl'
                  Algebra.Function.$fBoolFunText_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFunUTCTime ::
    Algebra.Function.BoolFun Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  Algebra.Function.$fBoolFunUTCTime1
                  Algebra.Function.$fBoolFunUTCTime_$cliftBoolFun -}
4b646a2325f698e628b6971e9b5ec31f
  $fBoolFunUTCTime1 ::
    Algebra.Function.LiftElem
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFunUTCTime_$s$fLiftElemUTCTimea -}
caf65750d5cb7013a8e171926465e10b
  $fBoolFunUTCTime_$cliftBoolFun ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.DT x1 -> eta x1 } }) -}
3a8970a9dbfc6a3010cd331cba165f26
  $fBoolFunUTCTime_$s$cliftEl ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.DT x1 -> Relvar.B (f x1) } }) -}
27f925e8037c5e675c4f989bbfca8c69
  $fBoolFunUTCTime_$s$cliftEl' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.DT x -> Relvar.B (eta x) }) -}
f6dcb5752160cb1933fe8d4a4dd2ab03
  $fBoolFunUTCTime_$s$cliftLeft ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.DT x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
50743676ac2fa6439c8ad4e5d3dc74f4
  $fBoolFunUTCTime_$s$cliftLeft' ::
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool
                   eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.DT x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFunUTCTime_$s$fLiftElemUTCTimea ::
    Algebra.Function.LiftElem
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  Relvar.$fElementableUTCTime
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFunUTCTime_$s$cliftLeft'
                  Algebra.Function.$fBoolFunUTCTime_$s$cliftLeft
                  Algebra.Function.$fBoolFunUTCTime_$s$cliftEl'
                  Algebra.Function.$fBoolFunUTCTime_$s$cliftEl -}
e0377be8625ec08c0443e2ea7ae1def7
  $fBoolFun[] :: Algebra.Function.BoolFun GHC.Base.String
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  Algebra.Function.$fBoolFun[]1
                  Algebra.Function.$fBoolFun[]_$cliftBoolFun -}
120eb1d4eeb0b399bb38b5a3c91c5bd6
  $fBoolFun[]1 ::
    Algebra.Function.LiftElem GHC.Base.String GHC.Types.Bool
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Algebra.Function.$fBoolFun[]_$s$fLiftElem[]a -}
8587d5e8cb1181612d75403c1bb98b9a
  $fBoolFun[]_$cliftBoolFun ::
    (GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Bool
                   eta1 :: [Relvar.Elem] ->
                 case eta1 of wild {
                   []
                   -> case Algebra.Function.$fBoolFun2BoolBool2
                      ret_ty GHC.Types.Bool
                      of {}
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Types.False Relvar.S x1 -> eta x1 } }) -}
5f6303ac93f1372bdfa79ff8d08f79cf
  $fBoolFun[]_$s$cliftEl ::
    (GHC.Base.String -> GHC.Types.Bool) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Base.String -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> Relvar.Nil Relvar.S x1 -> Relvar.B (f x1) } }) -}
4e5eeee826071293389dc61566610a20
  $fBoolFun[]_$s$cliftEl' ::
    (GHC.Base.String -> GHC.Types.Bool) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> Relvar.Nil Relvar.S x -> Relvar.B (eta x) }) -}
60437cfa3b952c79e4eb7ab0c6c7cd82
  $fBoolFun[]_$s$cliftLeft ::
    (GHC.Base.String -> GHC.Types.Bool)
    -> [Relvar.Elem] -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ f :: GHC.Base.String -> GHC.Types.Bool ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool5
                   : x xs
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                        Relvar.S x1 -> GHC.Base.Just @ GHC.Types.Bool (f x1) } }) -}
0254a600ea48221acedca175d991a866
  $fBoolFun[]_$s$cliftLeft' ::
    (GHC.Base.String -> GHC.Types.Bool)
    -> Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: GHC.Base.String -> GHC.Types.Bool eta1 :: Relvar.Elem ->
                 case eta1 of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.S x -> GHC.Base.Just @ GHC.Types.Bool (eta x) }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fBoolFun[]_$s$fLiftElem[]a ::
    Algebra.Function.LiftElem GHC.Base.String GHC.Types.Bool
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  Relvar.$fElementable[]0
                  Relvar.$fElementableBool
                  Algebra.Function.$fBoolFun[]_$s$cliftLeft'
                  Algebra.Function.$fBoolFun[]_$s$cliftLeft
                  Algebra.Function.$fBoolFun[]_$s$cliftEl'
                  Algebra.Function.$fBoolFun[]_$s$cliftEl -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolBoola ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
fc22357ef18065806b5944de46204fbc
  $fLiftElem2BoolBoola_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7a8b83e36cc4682519cbcdef2dce76fe
  $fLiftElem2BoolBoola_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2' @ a w w2 w3 w4 w5) -}
d3910cfcfe67991efa77fac8c26badb0
  $fLiftElem2BoolBoola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
060cd793d65a26fb13cabdf33010e745
  $fLiftElem2BoolBoola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2' @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolByteStringa ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
661ab2938366e5a71501c5b5aa0c1cb7
  $fLiftElem2BoolByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
2fd3ae9533400ed300a8cfa77dfa674e
  $fLiftElem2BoolByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
8dd0a138ee36ece3c75380227c766acb
  $fLiftElem2BoolByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ed251a98b2f70af611b9ed8179d3294f
  $fLiftElem2BoolByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'1 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolChara ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2346311a2090058164c9aa50e58a5c9e
  $fLiftElem2BoolChara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4f332b7824c5a22cea32ed3e74373baf
  $fLiftElem2BoolChara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
12a4a9704beb3c0b188a3e4ce6ce9f11
  $fLiftElem2BoolChara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
10e84119e80de85c8240aec7d4182707
  $fLiftElem2BoolChara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'2 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolDaya ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
5c89f42ae17f6634298b165488a7d48c
  $fLiftElem2BoolDaya_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5b62341dbdb5532f4e1d21408e26bea6
  $fLiftElem2BoolDaya_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
744999b8f757a709fdd6a8a24605a2ca
  $fLiftElem2BoolDaya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
40147d39f3179f11cad86d0c394e23d5
  $fLiftElem2BoolDaya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'3 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolDoublea ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
c15ed517970933793a6b69716df3c86f
  $fLiftElem2BoolDoublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d746a871afee2e9732c0c0e4777e153e
  $fLiftElem2BoolDoublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
aee7e9a644480f59b6351aa8fe856f31
  $fLiftElem2BoolDoublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
94574af81d2c39ef34bbb068b327b10d
  $fLiftElem2BoolDoublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'4 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolInta ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2e112419833dca9539a684f1a417db38
  $fLiftElem2BoolInta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
70446ac9c80a6e938de811494ea9455d
  $fLiftElem2BoolInta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4ca0ef8812abcfbcc5c8e46c9864a4fe
  $fLiftElem2BoolInta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4166783f341fbcf4bff720c965092597
  $fLiftElem2BoolInta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'5 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolIntegera ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Bool GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
29918bded5c32ee7f2fb4922809b5774
  $fLiftElem2BoolIntegera_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1ac5f6e7d34960d6baf9fce5df7e36fa
  $fLiftElem2BoolIntegera_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
8aa042db6f4f26a6d2e174275ae39fb5
  $fLiftElem2BoolIntegera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
30db4d2a034e08e14cf109a205d42cac
  $fLiftElem2BoolIntegera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'6 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolRelvara ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a1d122f8b2f9f3f47715010a1e108aa9
  $fLiftElem2BoolRelvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Bool -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1c341682c4a7fe04aac16480859e84ef
  $fLiftElem2BoolRelvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Bool -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
1e3dda0cb3ffb634c72a425a893c30e5
  $fLiftElem2BoolRelvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Bool -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e5587e6cdfc7145a0f45652c8e17b18a
  $fLiftElem2BoolRelvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Bool -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'7 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolTexta ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
53705dbe2733d920db2a7b952bfaf3bf
  $fLiftElem2BoolTexta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
507f52da174387335b22cae0b59783bd
  $fLiftElem2BoolTexta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
3aeb57230984ff428442be5030000116
  $fLiftElem2BoolTexta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
232fc1ef131012c0bb48c4445a789b49
  $fLiftElem2BoolTexta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'8 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2BoolUTCTimea ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Bool Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
b770f2dfbf59682ff5caa12646269abe
  $fLiftElem2BoolUTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
987eab1ca396b3d2d6c3895c08f2de0f
  $fLiftElem2BoolUTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
81303125857a81fa539e4f31551c32e3
  $fLiftElem2BoolUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9f75c3ae1cc4a6810b27332bf27a68f1
  $fLiftElem2BoolUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'9 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Bool[]a ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Bool GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Bool[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Bool[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Bool[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Bool[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f3150eb480ff069b98dea2132cee47ce
  $fLiftElem2Bool[]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Bool[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
f1abfff91f31568d8286d9308c345c0c
  $fLiftElem2Bool[]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
fad10c974053866d5a44f38ef6e40453
  $fLiftElem2Bool[]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Bool[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c733a25c97d875f8073ca8fb8c15a379
  $fLiftElem2Bool[]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Bool -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'10 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringBoola ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
662157e6bb839cd3f27842aac84ad085
  $fLiftElem2ByteStringBoola_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c377459d75c48b05b331f67b7cea1723
  $fLiftElem2ByteStringBoola_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
3d116376ebc562c695f30efdad9714ed
  $fLiftElem2ByteStringBoola_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7f3917d8f927c140de4080cbded02dbd
  $fLiftElem2ByteStringBoola_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'11 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringByteStringa ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString
      Data.ByteString.Internal.ByteString
      a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
e6682f56994a22ec30ec7a17b8820891
  $fLiftElem2ByteStringByteStringa_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a566703bf8100c44b69a1b95d8ef2e6d
  $fLiftElem2ByteStringByteStringa_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'1 @ a w w2 w3 w4 w5) -}
9e1c9ab445f481f4969830e894596449
  $fLiftElem2ByteStringByteStringa_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1cfd20fb0914b2abca161785941c2e49
  $fLiftElem2ByteStringByteStringa_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'12 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringChara ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
5d7a40041616c1518c1a43705608aa02
  $fLiftElem2ByteStringChara_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8fbe99d70ba867bf841a82713b8f72c4
  $fLiftElem2ByteStringChara_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
7270db6925228f2c017adf3d48cc5e93
  $fLiftElem2ByteStringChara_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c56a95d1a533abf76cc6749724781800
  $fLiftElem2ByteStringChara_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'13 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringDaya ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
824bac6cabba407b3ba4f1c7c17c4f8b
  $fLiftElem2ByteStringDaya_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
93c6c5c1585ba7df4204aa65d7894877
  $fLiftElem2ByteStringDaya_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
b75b631b27d69ea8ae0775d4b0cf1f33
  $fLiftElem2ByteStringDaya_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
87de51155838fb025056f0f28513dc20
  $fLiftElem2ByteStringDaya_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'14 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringDoublea ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2096decaa13fec3922f28fd965f5b75e
  $fLiftElem2ByteStringDoublea_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7dad3ffde572c17bb61cf1948b788c53
  $fLiftElem2ByteStringDoublea_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
6ba1bd767a60ed068254f4af4196b935
  $fLiftElem2ByteStringDoublea_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
542d71870b767327e1c04e92e46561b6
  $fLiftElem2ByteStringDoublea_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'15 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringInta ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
ec1da1f7b638a0f045f58a327f60aa70
  $fLiftElem2ByteStringInta_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0894a20a8b42a31c1a9139ffc3608a5a
  $fLiftElem2ByteStringInta_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
c327ac87648952ac2bd4a74ae125d626
  $fLiftElem2ByteStringInta_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
373b3ce319d16a5e692d65bc89eb8798
  $fLiftElem2ByteStringInta_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'16 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringIntegera ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
9b43666e93e22757b0fb9ab3a33f07ee
  $fLiftElem2ByteStringIntegera_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d9ed0789bc228da78da5bbc34836bc24
  $fLiftElem2ByteStringIntegera_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString
                          -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
904fbdd36544827bd2c32be71e161a68
  $fLiftElem2ByteStringIntegera_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
73822ac55348534d8af5f8119e04858d
  $fLiftElem2ByteStringIntegera_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'17 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringRelvara ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
0da890939492bb385291593581e6f51a
  $fLiftElem2ByteStringRelvara_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
36253eb8ec465b675c3ccc37ed142147
  $fLiftElem2ByteStringRelvara_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
e9f13d6709677e5ba11c47e85feb45a5
  $fLiftElem2ByteStringRelvara_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
fc530e741ba66ab8846cffe696ab91a5
  $fLiftElem2ByteStringRelvara_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'18 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringTexta ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
34de074b9a06b282be7f283625e9e401
  $fLiftElem2ByteStringTexta_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8af3e3e9fa5382c558359b4b3dc10f72
  $fLiftElem2ByteStringTexta_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString
                          -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
29d54cd0bd3f4c3175c612f17c0f1b82
  $fLiftElem2ByteStringTexta_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
2dd6a78f6d697bd961f6a905ce375db8
  $fLiftElem2ByteStringTexta_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'19 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteStringUTCTimea ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
6cbdef1c4f0ffd88402005811116fdca
  $fLiftElem2ByteStringUTCTimea_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
198ba6e0ffea8a8fe32213c7fb100f67
  $fLiftElem2ByteStringUTCTimea_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString
                          -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
2d2856ee184ad885350436e1e7c2633e
  $fLiftElem2ByteStringUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
20cdec29a1c7721027df37fa76b912e1
  $fLiftElem2ByteStringUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'20 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2ByteString[]a ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.ByteString.Internal.ByteString GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2ByteString[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteString[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteString[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2ByteString[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
9c4327078a0074aa730df1261b3104e2
  $fLiftElem2ByteString[]a_$cliftEl2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteString[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
63326dc70c3be36a1e4722857ca1d8d9
  $fLiftElem2ByteString[]a_$cliftEl2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
c566ab79fd2c6e64e47a36e3e20d0970
  $fLiftElem2ByteString[]a_$cliftLeft2 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2ByteString[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e22523b4e10a38e4326525b501bb1a00
  $fLiftElem2ByteString[]a_$cliftLeft2' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: Data.ByteString.Internal.ByteString -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'21 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharBoola ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
e90bb2fe231a9e967d2593a852e9d1c7
  $fLiftElem2CharBoola_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
eac90513fc1286e90ed67a618b63ce6b
  $fLiftElem2CharBoola_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
9efeaa18f7e546f8bcd617d515bc060f
  $fLiftElem2CharBoola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
42c2fc8208299a9401ec547d21359d94
  $fLiftElem2CharBoola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'22 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharByteStringa ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
b8bde09eac4050d25ec424eed95fb578
  $fLiftElem2CharByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
26517a4ef021b9e13220756d117453ec
  $fLiftElem2CharByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
768c9357a805951991ff46ba30a543f4
  $fLiftElem2CharByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dff3cebd4b07d508f3533f01f4803b56
  $fLiftElem2CharByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'23 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharChara ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
305948ce63dfaa30a0993280cf707011
  $fLiftElem2CharChara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ade2b737879ba05c7694fd2e4ceeee2c
  $fLiftElem2CharChara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'2 @ a w w2 w3 w4 w5) -}
c7a1ca9b492d2c50be6f95a9ec920f94
  $fLiftElem2CharChara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
21d3e659890aa244ecc951d8c864d353
  $fLiftElem2CharChara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'24 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharDaya ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
21d05b210aece06abbb1ee42da7a438d
  $fLiftElem2CharDaya_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
26f86412b1ca07dfdc01f9e1b31108e3
  $fLiftElem2CharDaya_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
65e3a4eb3ce32d41949af42cb92a1160
  $fLiftElem2CharDaya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5fc23056a15626489fd20a803fc18b20
  $fLiftElem2CharDaya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'25 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharDoublea ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
90d2eac2adce3a0a7cfb1cb113cbc3db
  $fLiftElem2CharDoublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
defc8b7fbf149ddfb09fdb8d5d2f2ea8
  $fLiftElem2CharDoublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
bb513b6b017ce964163e7fc9cf6493e9
  $fLiftElem2CharDoublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0fc31ad9d885e900bf4247777054645e
  $fLiftElem2CharDoublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'26 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharInta ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
7da9e2048b9db3f1a7b929b9ac498ec8
  $fLiftElem2CharInta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e93a0fcc5189cc36759098fbace48654
  $fLiftElem2CharInta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a9c3ad9cb882523fb5a95ecd35c7e071
  $fLiftElem2CharInta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
851142cce1b417023a52c7814302f94e
  $fLiftElem2CharInta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'27 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharIntegera ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Char GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
8d99783619c64ddcb3e9f938057d733d
  $fLiftElem2CharIntegera_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dc91eb8d886e045602240486e2b15982
  $fLiftElem2CharIntegera_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4390c8f48cc1674105442a6efb199850
  $fLiftElem2CharIntegera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7bbe64919b7e486d243103bcdfb60d72
  $fLiftElem2CharIntegera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'28 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharRelvara ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
1db5f814ab878ebdc6d4cfcbacdf6712
  $fLiftElem2CharRelvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Char -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
80ddd116a4e12b3c98b7b6a42ebe911c
  $fLiftElem2CharRelvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Char -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a1f08debf297904e04b849a5b346afdd
  $fLiftElem2CharRelvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Char -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4dd01b6a3d3f4a408526ca272a7b25fa
  $fLiftElem2CharRelvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Char -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'29 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharTexta ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
759d2376419e4a4dcfb6966433ccfb9f
  $fLiftElem2CharTexta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
19c6af08d3f9970525cd6e537b2dbbdd
  $fLiftElem2CharTexta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4d5cfb7f8a7b145af33f51492f94c594
  $fLiftElem2CharTexta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
cd0d2424f428103b46b22b3f08186d98
  $fLiftElem2CharTexta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'30 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2CharUTCTimea ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Char Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2CharUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2CharUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f0d035ea5619cb6b5fe03e35edc628f9
  $fLiftElem2CharUTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
6323b078ce71b796c855543ff414cee0
  $fLiftElem2CharUTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
e14ff94304ed6e5b56c8b9580ad00d1f
  $fLiftElem2CharUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2CharUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b1c48f205e3aab7791fc2399fe10ed18
  $fLiftElem2CharUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'31 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Char[]a ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Char GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Char[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Char[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Char[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Char[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
156c54aa7b7a70687c04ce464d757f5c
  $fLiftElem2Char[]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Char[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5a7ae3b581e3807324c9d55f9ae11ed6
  $fLiftElem2Char[]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a491a456b532ce0ed2b4244526764f96
  $fLiftElem2Char[]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Char[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d53b3878b0ea209d34ec7174cf13ff4a
  $fLiftElem2Char[]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Char -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'32 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayBoola ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f786a6bb7d59a01216b3a7a9774aaff4
  $fLiftElem2DayBoola_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0edbac3425652ee8f76c3fc966af7144
  $fLiftElem2DayBoola_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
70bfb5e61a30d097d109c8449aa1e9f9
  $fLiftElem2DayBoola_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
647b3ff010d7501b8c0068259f195139
  $fLiftElem2DayBoola_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'33 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayByteStringa ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
d0684820a14b15292501ed85b2470f4e
  $fLiftElem2DayByteStringa_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b555f66e231ccea7b81d476ce1476aba
  $fLiftElem2DayByteStringa_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day
                          -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
6149ee8d1f0c6082c46df0bfe463d5d5
  $fLiftElem2DayByteStringa_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
90b621192eb3d8f2babe45543194b3c7
  $fLiftElem2DayByteStringa_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'34 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayChara ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a8f21d4287a6531091d9fa0ebb8f97c7
  $fLiftElem2DayChara_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1a0ea74baf752614537fb027fd55179a
  $fLiftElem2DayChara_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
1286539c10b094c68ee14322fc455370
  $fLiftElem2DayChara_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c83627b842aff06942e62964d65ab1e6
  $fLiftElem2DayChara_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'35 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayDaya ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f89a5d4e89b588f27a2cfaecf9bbe272
  $fLiftElem2DayDaya_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
980997777f5c972bbbc728035dd75baa
  $fLiftElem2DayDaya_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'3 @ a w w2 w3 w4 w5) -}
62929b245c33776a275001f60131cb3e
  $fLiftElem2DayDaya_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
67dbca09cd142aaa14ee17f3548c72d3
  $fLiftElem2DayDaya_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'36 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayDoublea ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
ccf3997e18c159de874c2af6a65bcdee
  $fLiftElem2DayDoublea_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
52c5f974d189d3c474d03f664f9792c8
  $fLiftElem2DayDoublea_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a067a8ec6a0a9fbdf91a78eb60e7ed2e
  $fLiftElem2DayDoublea_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
03c0b08a75123f70784d0a0ab1f4048d
  $fLiftElem2DayDoublea_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'37 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayInta ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
97dbcb8e9bb75e88c51b3c919f577584
  $fLiftElem2DayInta_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9ed0ca63a51afb54662fdfeb9556e46c
  $fLiftElem2DayInta_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
96f14b799f209fc39fe48e6eb285dcbc
  $fLiftElem2DayInta_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bb5a6cdfe455aa5ecce17b7c14cd54f7
  $fLiftElem2DayInta_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'38 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayIntegera ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
6b1935a16c2fb619b59a1058b8865b97
  $fLiftElem2DayIntegera_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3f04d0e8cad8e2fc83e576cb8b1edd6b
  $fLiftElem2DayIntegera_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
5f552fea36d21ac79571a906a1d03181
  $fLiftElem2DayIntegera_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
04bddd92b8585887e10707d66b4ef246
  $fLiftElem2DayIntegera_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'39 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayRelvara ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
21287e9d812457b068b87ddd694d0b17
  $fLiftElem2DayRelvara_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
6dfce1b1f1da065249ee56ff5b00545a
  $fLiftElem2DayRelvara_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4b273a1f43bbc375043042473035c6a7
  $fLiftElem2DayRelvara_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a823ce04806d9468291d98a1ffaa3332
  $fLiftElem2DayRelvara_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'40 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayTexta ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
c7fd566f8ba23d853cb564722d04c5cb
  $fLiftElem2DayTexta_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7d6c518acd7499f1336aca11a6a4cf8e
  $fLiftElem2DayTexta_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
9eae821fbec1d3594ac6ed5c21b64349
  $fLiftElem2DayTexta_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9dfd5488769ef29b9aee7b27b4b65384
  $fLiftElem2DayTexta_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'41 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DayUTCTimea ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DayUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DayUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a4a51e24c4e51be5fc15639c6e0c9cdb
  $fLiftElem2DayUTCTimea_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c0f51b763c85dbb74b099d2978d2c012
  $fLiftElem2DayUTCTimea_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4453877ebcac61aeae58a368607a58b8
  $fLiftElem2DayUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DayUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1458b5b44740a993f2b183dd8c536335
  $fLiftElem2DayUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'42 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Day[]a ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Calendar.Days.Day GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Day[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Day[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Day[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Day[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
9534a64724b8efdd044a3f9a004aeb92
  $fLiftElem2Day[]a_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Day[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
de1eadf317e3e2579049e61d90a8b5e8
  $fLiftElem2Day[]a_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
5c9ef96a03c92130968caff71d353a93
  $fLiftElem2Day[]a_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Day[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
afde816da8930a18c44047ecf710238f
  $fLiftElem2Day[]a_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Calendar.Days.Day -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'43 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleBoola ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
7968871b7ed24b92a19892bfb768dd44
  $fLiftElem2DoubleBoola_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
294df69d8d233afe7c1fad022d463b09
  $fLiftElem2DoubleBoola_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
5248a82e74fff30aba53b58e1323a954
  $fLiftElem2DoubleBoola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
2295657f543b1736dd352165c3f147a3
  $fLiftElem2DoubleBoola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'44 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleByteStringa ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
5e5bdd4bbe2e0e559d8d8d2b682ea352
  $fLiftElem2DoubleByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b2e43f018150c170e136119068b7546f
  $fLiftElem2DoubleByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
af800083153f3f29f5f5aca164bcdb3e
  $fLiftElem2DoubleByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bf3b7d421702dd46b481c7a399bb7a8e
  $fLiftElem2DoubleByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'45 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleChara ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
53703a9e80259aa2ad83349855a715e5
  $fLiftElem2DoubleChara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
40d55b02e4d7b97b5bc612776baefce9
  $fLiftElem2DoubleChara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
c2a8a5d1444651fa471b8b8f24c125f8
  $fLiftElem2DoubleChara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
03182ddc1b723d70e0a894b0f747117f
  $fLiftElem2DoubleChara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'46 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleDaya ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
edf0c913a6adb93362c3a9bd08b41608
  $fLiftElem2DoubleDaya_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3ec5356ced6281f69c3164c73070f903
  $fLiftElem2DoubleDaya_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
1d37cf7fdf597bcf97f107c69a02efbf
  $fLiftElem2DoubleDaya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
06f51d68fb9f0adb2a5d1cb9c26b2d1c
  $fLiftElem2DoubleDaya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'47 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleDoublea ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
054119399a5cd0129de78f61cad18291
  $fLiftElem2DoubleDoublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
57010e6529003a9f4d833805f1fd41bc
  $fLiftElem2DoubleDoublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'4 @ a w w2 w3 w4 w5) -}
ce54d73a2002f69da0032d46a0dfa24b
  $fLiftElem2DoubleDoublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
fe547a7da1cc655b02b0cc89e3d4d4a3
  $fLiftElem2DoubleDoublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'48 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleInta ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a0f03845a561ebc470eab029694c2f2b
  $fLiftElem2DoubleInta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
429c49bfe9306d21bd85af9dea1f0269
  $fLiftElem2DoubleInta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
d0d22f00384be72363af2a5c6ffb68ae
  $fLiftElem2DoubleInta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
edff65f1a80d33acdaf593a71e9aadb2
  $fLiftElem2DoubleInta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'49 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleIntegera ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Double GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
569e9f7bd245ac694ce07c0fc30b75ca
  $fLiftElem2DoubleIntegera_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
da97a2231999da63a0d77dc8431a40cd
  $fLiftElem2DoubleIntegera_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0b688e1242cbee437e63b7be1a2c907f
  $fLiftElem2DoubleIntegera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
782c9822f3b265f01c92b5f9bcdd86ac
  $fLiftElem2DoubleIntegera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'50 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleRelvara ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
40e39839cd580489971328474773cc5c
  $fLiftElem2DoubleRelvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Double -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b89e9f624712106155789dc1a58ceccb
  $fLiftElem2DoubleRelvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Double -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
474f5f38484a04fe64480ea288b7f602
  $fLiftElem2DoubleRelvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Double -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
269d46cc3e9642e001422a57d91b5424
  $fLiftElem2DoubleRelvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Double -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'51 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleTexta ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
34ac0806b487abaf53f0d735c71acf60
  $fLiftElem2DoubleTexta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d8bcc7000becf1f190e387e0adb92025
  $fLiftElem2DoubleTexta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
ab40dbe4095271d3e07c00afa00fb0b1
  $fLiftElem2DoubleTexta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
32bcd56988b598a31b4b8b2a3db27e4a
  $fLiftElem2DoubleTexta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'52 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2DoubleUTCTimea ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Double Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
fa78119a975165dbdc0cf93b8fddd4aa
  $fLiftElem2DoubleUTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0021db582bce8ab34ca2bb4426fa6b35
  $fLiftElem2DoubleUTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
62405dbd1d22860b6c82fc906cda0755
  $fLiftElem2DoubleUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
91813f9dddb2957c2142baaba769c922
  $fLiftElem2DoubleUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'53 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Double[]a ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Double GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Double[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Double[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Double[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Double[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
cf9afbd7862892efff7d6da7b26e4b98
  $fLiftElem2Double[]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Double[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
aed1cd21ce0674a197aa98248289d4b5
  $fLiftElem2Double[]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
45e15ec7fc6d0d9606d5a845eab8135d
  $fLiftElem2Double[]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Double[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
22d8f6a1c37001bc545e5c289e853c5e
  $fLiftElem2Double[]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Double -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'54 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntBoola ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
135e986711a2f274eb8edff05fd5769f
  $fLiftElem2IntBoola_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5e0f540e0cc09648df1a06572d346b01
  $fLiftElem2IntBoola_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4332c0dc369c9e787074022eeace52e5
  $fLiftElem2IntBoola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5f241940ba75484b89f5a5e26778be7b
  $fLiftElem2IntBoola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'55 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntByteStringa ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f5dd895e3d73d34f68cea0583b6d29d4
  $fLiftElem2IntByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
59ee3efaf1c88c06c485ce23255c8f94
  $fLiftElem2IntByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
2c92a80b74d16b4482ad583b267077ba
  $fLiftElem2IntByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a7f6e70fdf20a4b565ae7e28e83db7d8
  $fLiftElem2IntByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'56 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntChara ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
16961fa5ece91317891d5ef02bba56f6
  $fLiftElem2IntChara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
667f7153e0acbc2eca90401af3f901f9
  $fLiftElem2IntChara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
c6a3c9e9a89feec6317a2a587b637006
  $fLiftElem2IntChara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
00f551f4aa56d813c5d13996ba65c748
  $fLiftElem2IntChara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'57 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntDaya ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
69985eb88e35bba792c18ca865d34349
  $fLiftElem2IntDaya_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0706476e1caba880f1c32f55c4a0ce82
  $fLiftElem2IntDaya_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
b9cc8bbc82401c52e86f5735fbd44735
  $fLiftElem2IntDaya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c89ca4846f9c8a1243177b6dbe2e65c5
  $fLiftElem2IntDaya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'58 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntDoublea ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
467e1c9eb6ed8be2bb84f6b11ae40030
  $fLiftElem2IntDoublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c7727a653260e86bcf9797880eda1a28
  $fLiftElem2IntDoublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
69340bdebdc57ca0615505cca6fb24a2
  $fLiftElem2IntDoublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bd165e3187d244bd7af784aa4a0d2235
  $fLiftElem2IntDoublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'59 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntInta ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
107a36d0d515b84fab8573a44ef2d55d
  $fLiftElem2IntInta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c4a36c8e1e4dc92366563a3af3ead924
  $fLiftElem2IntInta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'5 @ a w w2 w3 w4 w5) -}
b3a843ae392b2947dbfece92d42bbcdb
  $fLiftElem2IntInta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4a6e76b147f60e682f3fbf652aeae89b
  $fLiftElem2IntInta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'60 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntIntegera ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f56bced2788bee114e782971167b9a84
  $fLiftElem2IntIntegera_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a69034e548a0ed35840c3d3f8d768398
  $fLiftElem2IntIntegera_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a84eb5ddaaa6ffc3f41d62e9f35d4346
  $fLiftElem2IntIntegera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
56a1964bd1796f4bf3a6de1135d25a23
  $fLiftElem2IntIntegera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'61 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntRelvara ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
6e9f65c1fdc7c99541726d0c8d252736
  $fLiftElem2IntRelvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Int -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
88a210ea21868214db2e068199322456
  $fLiftElem2IntRelvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Int -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
8d92de2ef2203368de74577c1e588d32
  $fLiftElem2IntRelvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Int -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8c014675e83c5cf9d5912223217dc522
  $fLiftElem2IntRelvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Types.Int -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'62 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntTexta ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
7ff7953d2c62b01307a9affa1fd66dea
  $fLiftElem2IntTexta_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7f57d8a12660ec7923dac2441f2a97e2
  $fLiftElem2IntTexta_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
2d8d3c8de397ae3191e612dd014424c8
  $fLiftElem2IntTexta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1b96d5134690a010a22a24cbccfc6a4e
  $fLiftElem2IntTexta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'63 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntUTCTimea ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Types.Int Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
c252259646c9b13071692c05b46f8c5f
  $fLiftElem2IntUTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5bffa0db7dbe0bc39d17f324b4e85cff
  $fLiftElem2IntUTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
e736da256fae20c5050fa9fdcd82f6d2
  $fLiftElem2IntUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
df70e878e93188f80856eacfbc3b1b51
  $fLiftElem2IntUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'64 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Int[]a ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Types.Int GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Int[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Int[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Int[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Int[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
41d98d77e5c9709b7f4e830925ae4bfd
  $fLiftElem2Int[]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Int[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dc26a909c5907aea95cd05b7b00105be
  $fLiftElem2Int[]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
eeff21e0c7f88fb31ed34c5ccfa91b7a
  $fLiftElem2Int[]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Int[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
83e17dfb7c5d3e24258a7b5528708f8d
  $fLiftElem2Int[]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Types.Int -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'65 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerBoola ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f1b3ef7704ae8d7a2da400d87b44aca2
  $fLiftElem2IntegerBoola_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d742e9360af1cde091b75c4a5987e2b2
  $fLiftElem2IntegerBoola_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0f7280340fc489b0d3cd84c2796c71ce
  $fLiftElem2IntegerBoola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
462c7c2eb782b85a4d2e660b28cd2f7e
  $fLiftElem2IntegerBoola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'66 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerByteStringa ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a8ed603191d03c1c0eb2b50014bcc327
  $fLiftElem2IntegerByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d3dc369afebbfa09a1efc4d774b4263d
  $fLiftElem2IntegerByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer
                          -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
f83c0ef97e90f60f27743dd5e198fe21
  $fLiftElem2IntegerByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3f8c85af7f8e9a233fea2fbcba290001
  $fLiftElem2IntegerByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'67 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerChara ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
27b2f93484a252d86f9f2ac0d1827489
  $fLiftElem2IntegerChara_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
432d1d91acb27ac55190788a64aa6c45
  $fLiftElem2IntegerChara_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
b62eca9baecd05f66c898051bda2360b
  $fLiftElem2IntegerChara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1b93ac860fa492802d35c9a5bf9b8f6f
  $fLiftElem2IntegerChara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'68 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerDaya ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
49839dcb2f362e395084e145dcee1aff
  $fLiftElem2IntegerDaya_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e9f53384eaedd317cbbb9531df538ab2
  $fLiftElem2IntegerDaya_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
737b7344a4a9b089a795b98a758e7e37
  $fLiftElem2IntegerDaya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d03ca3dd025ac3f758c0d4373fc503bf
  $fLiftElem2IntegerDaya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'69 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerDoublea ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
15111e168563b0a06e0223441a390dba
  $fLiftElem2IntegerDoublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
879a788abc64b5cccd6d530153f5638a
  $fLiftElem2IntegerDoublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
195f03fa8258756951ba09b0c9624271
  $fLiftElem2IntegerDoublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5f9a18a49dd1597a5a37b02fb1f77e03
  $fLiftElem2IntegerDoublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'70 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerInta ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Integer.Type.Integer GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
35b5e1e59e533e60cb7f156e98d9b3d8
  $fLiftElem2IntegerInta_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e8ddbe5e303f94cb467bbfb2b1cc891c
  $fLiftElem2IntegerInta_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
191d6fcd3f7bd8276a3c258b479bcb0a
  $fLiftElem2IntegerInta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
208cf0c3fa396ba99ef3ebe5982af553
  $fLiftElem2IntegerInta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'71 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerIntegera ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2a8b6697ae96426e8ff61b2c14662c2a
  $fLiftElem2IntegerIntegera_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dee30fcf159a5d42a2bfe08e410722e0
  $fLiftElem2IntegerIntegera_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'6 @ a w w2 w3 w4 w5) -}
8fc965d09a1efa806104a60b4ef1e67d
  $fLiftElem2IntegerIntegera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b088568aa5b0de6df27a8112d7b347d6
  $fLiftElem2IntegerIntegera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'72 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerRelvara ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Integer.Type.Integer Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
906e46857374cd6e3420197903989e74
  $fLiftElem2IntegerRelvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4b7365dcd7cf2e3d93bbd67dd3735c75
  $fLiftElem2IntegerRelvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
598d8e57d390b721016cf065f87f6ea3
  $fLiftElem2IntegerRelvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
96abfc84ea2f81f5edaeb7d744d797c2
  $fLiftElem2IntegerRelvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'73 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerTexta ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
654d5ce518361fa1ef8c74962d0c4c34
  $fLiftElem2IntegerTexta_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
fa7e6b16264da2b90f8d8c3a60197a36
  $fLiftElem2IntegerTexta_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
93fdb51d875bb1b2871886b0c94a1d6f
  $fLiftElem2IntegerTexta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
f3a0b62936ec49ebf3f92b65d714113f
  $fLiftElem2IntegerTexta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'74 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2IntegerUTCTimea ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
76e3e128ca82420ab052a7826938e44b
  $fLiftElem2IntegerUTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8c27eef3d47fb5a14a21970019c5f260
  $fLiftElem2IntegerUTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a2a05101f59935fec8dc72ecdc4fadcd
  $fLiftElem2IntegerUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3e15b392fc1eba1fff109109cdf4ae3e
  $fLiftElem2IntegerUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'75 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Integer[]a ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Integer.Type.Integer GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Integer[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Integer[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Integer[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Integer[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
41c84675fb1f59b337fd5c398fcd9833
  $fLiftElem2Integer[]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Integer[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b741b20230c0ffbe31950ca5b2840642
  $fLiftElem2Integer[]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
53bd4f1d6380a0347c2b20622b49eed0
  $fLiftElem2Integer[]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Integer[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
27f80c9deab0c576f18ba591d15fb901
  $fLiftElem2Integer[]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Integer.Type.Integer -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'76 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarBoola ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2cbbc1ebd9e01eaf1e24dedf5a8abc20
  $fLiftElem2RelvarBoola_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c9119d0d7e365cff6b55cf0ddc18bd8a
  $fLiftElem2RelvarBoola_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
cb1d6c20e414f22d753b83dcd969b846
  $fLiftElem2RelvarBoola_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5958fb625a1aac7ca07904815b93bbd5
  $fLiftElem2RelvarBoola_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'77 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarByteStringa ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
948f0857c28fe6df3850ca5c7e6e9011
  $fLiftElem2RelvarByteStringa_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
eb6d5bc35440703132debf555be0054a
  $fLiftElem2RelvarByteStringa_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4367c65c076e8456218d85c7600ffe67
  $fLiftElem2RelvarByteStringa_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b069462ae25ac7342c9d19ff1d39a063
  $fLiftElem2RelvarByteStringa_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'78 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarChara ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
5874e6553f1c2b1dfcfbe86049f9d309
  $fLiftElem2RelvarChara_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
305ba702c7914f1187bba33e3f393548
  $fLiftElem2RelvarChara_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
02555213958ef9022622199097e9f438
  $fLiftElem2RelvarChara_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
49874b30680a46de7dc16482eb5bce6f
  $fLiftElem2RelvarChara_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'79 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarDaya ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f4c11cb5166053e6e4cdff286227a717
  $fLiftElem2RelvarDaya_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d221486d19169771625c24694e9645ef
  $fLiftElem2RelvarDaya_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
cd0f51fdd4a1c013961b55fea2a2ba89
  $fLiftElem2RelvarDaya_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
06c7368f4f8009f2c1710dd01e215182
  $fLiftElem2RelvarDaya_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'80 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarDoublea ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
403dc82f7b59073b69d06db88edef00a
  $fLiftElem2RelvarDoublea_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
cf4cf14b358f4e241b0fdeeaba809674
  $fLiftElem2RelvarDoublea_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0a4ab41eaafbbbb789948aef18529e55
  $fLiftElem2RelvarDoublea_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ce9bc6db18f07d82947550f383ba5f4d
  $fLiftElem2RelvarDoublea_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'81 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarInta ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
e881e949c4400c857160c03ebdf7df42
  $fLiftElem2RelvarInta_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
145fd3659d8226b983d435177ede13a0
  $fLiftElem2RelvarInta_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0999921acd1f185cd407942d03bc730d
  $fLiftElem2RelvarInta_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
38782677956fc5ff3e8ca0bf55b154d3
  $fLiftElem2RelvarInta_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'82 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarIntegera ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
d7574ae6866d4ad0546fedad92aef9cb
  $fLiftElem2RelvarIntegera_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
fad1f7a4e96535b9e89bc2b6da4d221d
  $fLiftElem2RelvarIntegera_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
1929e0991c899e766bfac4ead25f0621
  $fLiftElem2RelvarIntegera_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
988ce6df1b23c25a0f4e529aab03371d
  $fLiftElem2RelvarIntegera_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'83 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarRelvara ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
98fc210c62288058afdebf931ec7a791
  $fLiftElem2RelvarRelvara_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dde4135186f13dfa35bda24c36321eb3
  $fLiftElem2RelvarRelvara_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'7 @ a w w2 w3 w4 w5) -}
1b6baad3a6bed8231878c7ff8dfcce83
  $fLiftElem2RelvarRelvara_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e8ef1369fe6c7f3f70060b64002213e4
  $fLiftElem2RelvarRelvara_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'84 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarTexta ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f06b69ed6bbbab8b8964c550b58fcbb1
  $fLiftElem2RelvarTexta_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e395f41fa802eb06a75b36a879333755
  $fLiftElem2RelvarTexta_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
c7054137da0e4603d69879fe22b9e952
  $fLiftElem2RelvarTexta_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ec4b02cae51a295daeb9ead4f71f14da
  $fLiftElem2RelvarTexta_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'85 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2RelvarUTCTimea ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Relvar.Relvar Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
4e405a26611dd763ad1beaa72c427e52
  $fLiftElem2RelvarUTCTimea_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4fae3cb690350d5a301338910aa5d25a
  $fLiftElem2RelvarUTCTimea_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
4af2e286139744cdde96060b8d29015b
  $fLiftElem2RelvarUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d688e8647b3cabf447412139b25cb5ac
  $fLiftElem2RelvarUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'86 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Relvar[]a ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Relvar.Relvar GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Relvar[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Relvar[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Relvar[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Relvar[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
09fe9d8ab23819e4e91d03f8eda93987
  $fLiftElem2Relvar[]a_$cliftEl2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Relvar[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
148ae85f5251610ed13ae5ea5449ef4c
  $fLiftElem2Relvar[]a_$cliftEl2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
d06616fc69310c866a12c2ce831c3080
  $fLiftElem2Relvar[]a_$cliftLeft2 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Relvar[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b2745748bca2ed02dfad7ed654cf8b90
  $fLiftElem2Relvar[]a_$cliftLeft2' ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Relvar.Relvar -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: Relvar.Relvar -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'87 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextBoola ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Data.Text.Internal.Text GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
719099b2c5be20029cb374a97abc8fda
  $fLiftElem2TextBoola_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8b070f377bc9e21dbaea0c2816a3e53d
  $fLiftElem2TextBoola_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
1206ed6eeb4d25eb7b36d673ba06fe51
  $fLiftElem2TextBoola_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bbf2b1df550b426f7a9c2b75209e5714
  $fLiftElem2TextBoola_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'88 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextByteStringa ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
bd83dacfe2b6733973e0ca588ad8043c
  $fLiftElem2TextByteStringa_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ed998996ec935ea19dbccdf86fcd73e6
  $fLiftElem2TextByteStringa_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text
                          -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
6943ce7d3624db81dc3acddf6e4c4baf
  $fLiftElem2TextByteStringa_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
65fc9aabc052edc8296311eb8525c19a
  $fLiftElem2TextByteStringa_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'89 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextChara ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Data.Text.Internal.Text GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
6009734b86ff9de9272590e24c9572be
  $fLiftElem2TextChara_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9a211961a453a3ddc2875dda2c57639e
  $fLiftElem2TextChara_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
d7ef944871e2c693bb1f1d6195ce90ef
  $fLiftElem2TextChara_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
cfa465c33a4dc10621d86f143181476b
  $fLiftElem2TextChara_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'90 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextDaya ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2d77f5d3cd0ad9d82504934badddd8fe
  $fLiftElem2TextDaya_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
aba80510c9a8951d66be4fb699f6f790
  $fLiftElem2TextDaya_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
9eb843f3faf460803d76051e2b7fc26f
  $fLiftElem2TextDaya_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d3471a5ee6eb75d9b4f9dc36d863c234
  $fLiftElem2TextDaya_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'91 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextDoublea ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
2c455cf6660cf182abb9f5df57b505c1
  $fLiftElem2TextDoublea_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
31834cf221d57d3dc632b8e6cb4ccb72
  $fLiftElem2TextDoublea_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
228f8612d8c61ae1be8b6768500db341
  $fLiftElem2TextDoublea_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
abacadb8db431def5df990c7cf029467
  $fLiftElem2TextDoublea_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'92 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextInta ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Data.Text.Internal.Text GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
74e30ac53280caf120c3fe8b86adde8b
  $fLiftElem2TextInta_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
7a0ad76667a1e20fd1fb3dfafcc007b2
  $fLiftElem2TextInta_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0b55d1d983a4964584a6b8af9e3759d7
  $fLiftElem2TextInta_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9a66bccb886d8332d4877c0e85607821
  $fLiftElem2TextInta_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'93 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextIntegera ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
7bed75dec75c12b395d5d1cf421cae6f
  $fLiftElem2TextIntegera_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1006765ab467ef2d2edd119515de6ccc
  $fLiftElem2TextIntegera_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
cf2100e1b329fa49d40c6675d278572e
  $fLiftElem2TextIntegera_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
9095a9ef140f4b4fe36a97a85917fc54
  $fLiftElem2TextIntegera_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'94 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextRelvara ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 Data.Text.Internal.Text Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
78a25ba329f1a9a0c403574810925bac
  $fLiftElem2TextRelvara_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
810f40cf9bf83a24bb90c3b1fc9cedf4
  $fLiftElem2TextRelvara_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
938e65b2e6bca9308f445e22c0f540d7
  $fLiftElem2TextRelvara_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
6c0d87858c0c1a685219351d83ff149a
  $fLiftElem2TextRelvara_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'95 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextTexta ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
119b9b207c7cda39646e7438096d7da1
  $fLiftElem2TextTexta_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c92bc2b356726c88aadc25be29128335
  $fLiftElem2TextTexta_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'8 @ a w w2 w3 w4 w5) -}
33775b0786ac8fa6e6fe248b1c805c8b
  $fLiftElem2TextTexta_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b88b7cf21c4840136d16b41764ce0e00
  $fLiftElem2TextTexta_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'96 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2TextUTCTimea ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2TextUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2TextUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
c11e2d9110da9ebe97cf583324356830
  $fLiftElem2TextUTCTimea_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
17531384f4993533621a66eccf2ddf51
  $fLiftElem2TextUTCTimea_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
3372398b87f7758093cb23f197710773
  $fLiftElem2TextUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2TextUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
955f0c8858d91adc43e38dc5b4403e35
  $fLiftElem2TextUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'97 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2Text[]a ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Text.Internal.Text GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2Text[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Text[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Text[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2Text[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
fed93ece2b17782645970c7814afb5af
  $fLiftElem2Text[]a_$cliftEl2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2Text[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
132404dd1e6212502e6cc4a1dcb5305b
  $fLiftElem2Text[]a_$cliftEl2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
29a892d45d7a3575e45d9501bdc9126e
  $fLiftElem2Text[]a_$cliftLeft2 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2Text[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ca1edc5a112747304aa458c992011172
  $fLiftElem2Text[]a_$cliftLeft2' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Text.Internal.Text -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'98 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeBoola ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
43dfb258d742e96b139eca50ea5b1710
  $fLiftElem2UTCTimeBoola_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
63108dc824f9413a7cf55b72804ade68
  $fLiftElem2UTCTimeBoola_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
5b7796154049004cc31dbaae022e92ba
  $fLiftElem2UTCTimeBoola_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bb74e87b3f7ca0bd42e7eaff02d1cbad
  $fLiftElem2UTCTimeBoola_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'99 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeByteStringa ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
da85bfff44f627a967bc3e1368a59e75
  $fLiftElem2UTCTimeByteStringa_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5246a73d27fc7cdbde36bb94ab08b095
  $fLiftElem2UTCTimeByteStringa_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0546aada2efb41b85eb840d710f48886
  $fLiftElem2UTCTimeByteStringa_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
5f2e6b17396876023bd7a0b9feb1fd6e
  $fLiftElem2UTCTimeByteStringa_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'100 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeChara ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeChara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeChara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeChara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeChara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
958bfaf442fd9bb4fc813a0348d17264
  $fLiftElem2UTCTimeChara_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeChara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
816bd0fdd9b38b30cc972511e0c55c66
  $fLiftElem2UTCTimeChara_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
91b4599c9a09625799e15d083f4d7525
  $fLiftElem2UTCTimeChara_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeChara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3820f329860db4256dbf4684e5b641ae
  $fLiftElem2UTCTimeChara_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'101 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeDaya ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
732d3c3229c6cef9e568ea7bb6ae64f6
  $fLiftElem2UTCTimeDaya_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a2c6cb677122c7a85e031de91f5bccb6
  $fLiftElem2UTCTimeDaya_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime
                          -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a3b66477c22fa7b3916e135a1b04659d
  $fLiftElem2UTCTimeDaya_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a50ff39d4fabe8e012a28a86dedd2b15
  $fLiftElem2UTCTimeDaya_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'102 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeDoublea ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
38d5c982e8f69ea5f223734a8d1e6242
  $fLiftElem2UTCTimeDoublea_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3bfa2965252e56fa2690ebdcfcac2953
  $fLiftElem2UTCTimeDoublea_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
21924a1e65dbd6fbd5eb7387cb80475d
  $fLiftElem2UTCTimeDoublea_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
8db1ceacb04a70d0445cf5df41396169
  $fLiftElem2UTCTimeDoublea_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'103 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeInta ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeInta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeInta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeInta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeInta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
ea05e8af0e5bb7f28d4165a1fe09b1e3
  $fLiftElem2UTCTimeInta_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeInta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c7bb4a05f48ff892746b2a089bd059d8
  $fLiftElem2UTCTimeInta_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
f611e7d50e69e15780522a610d50651c
  $fLiftElem2UTCTimeInta_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeInta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
2e8e4c398d9a95ab66c233e98349db21
  $fLiftElem2UTCTimeInta_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'104 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeIntegera ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
728bfad4ae1599a1b119d13259f0196d
  $fLiftElem2UTCTimeIntegera_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
ca3a3b78e13f6b84a502c38eb32ac45b
  $fLiftElem2UTCTimeIntegera_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
bd572c6d68c17bc5ddf910a10df38237
  $fLiftElem2UTCTimeIntegera_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
74dbd4f57323af9aae8c9ca73258f4cf
  $fLiftElem2UTCTimeIntegera_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'105 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeRelvara ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
09f966fddaee0d5e2fd6027c09083b44
  $fLiftElem2UTCTimeRelvara_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e6cd43355e94826d349c22ee5dd02b02
  $fLiftElem2UTCTimeRelvara_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
178887c3cc41984d260acfcaddbe2924
  $fLiftElem2UTCTimeRelvara_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b8f7f5ab01e75a48a64b5289705e94b3
  $fLiftElem2UTCTimeRelvara_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'106 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeTexta ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
9a04e5ac16773d333e67a6d29029b334
  $fLiftElem2UTCTimeTexta_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
96b83d59eb14e4725ac5a9f9bc590b46
  $fLiftElem2UTCTimeTexta_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
ce389f11645b830163045878c06be76b
  $fLiftElem2UTCTimeTexta_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d2d2d13f70c855faf4847f4be78fb8f7
  $fLiftElem2UTCTimeTexta_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'107 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTimeUTCTimea ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
6f33daa31e8e8c289a794e39d10782b2
  $fLiftElem2UTCTimeUTCTimea_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
f687e0536ac77c84de2c2f01d0dac462
  $fLiftElem2UTCTimeUTCTimea_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'9 @ a w w2 w3 w4 w5) -}
bf5ed1f9922ff503eed1fb85b5c27a25
  $fLiftElem2UTCTimeUTCTimea_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime
                        -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c78e51e0d04c1a5e7f7bf2bcd3c0ac95
  $fLiftElem2UTCTimeUTCTimea_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'108 @ a w w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2UTCTime[]a ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      Data.Time.Clock.UTC.UTCTime GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2UTCTime[]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTime[]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTime[]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2UTCTime[]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a92a33956345331234078c726a3d05e4
  $fLiftElem2UTCTime[]a_$cliftEl2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTime[]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
dc76af8b1f180591845b00a218b43b82
  $fLiftElem2UTCTime[]a_$cliftEl2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Base.String
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a0610fe62e9ea6b382d42a6ab2b4dfbd
  $fLiftElem2UTCTime[]a_$cliftLeft2 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2UTCTime[]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
3d7c205df060903160fe7de824212225
  $fLiftElem2UTCTime[]a_$cliftLeft2' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'109 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Boola ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String GHC.Types.Bool a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Boola_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Boola_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Boola_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Boola_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
a1dce5c44368a14c855b06b1aacaae31
  $fLiftElem2[]Boola_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Boola_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
33b0c50f763d248f492caa0eca54cffd
  $fLiftElem2[]Boola_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Bool
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
d9d50f61aac92830f00dff393e7a9a91
  $fLiftElem2[]Boola_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Bool -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Boola_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1159c96c24721cee363fdce972d62e72
  $fLiftElem2[]Boola_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Types.Bool -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'110 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]ByteStringa ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Base.String Data.ByteString.Internal.ByteString a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable
                                          Data.ByteString.Internal.ByteString
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]ByteStringa_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]ByteStringa_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]ByteStringa_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]ByteStringa_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
4a05b7655dccf530f665d095f576c914
  $fLiftElem2[]ByteStringa_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]ByteStringa_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
38b5621c62196dfd971046e71648d877
  $fLiftElem2[]ByteStringa_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
0d8329d7e2bb7586dcc9b42bf8d7a78e
  $fLiftElem2[]ByteStringa_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable
                                       Data.ByteString.Internal.ByteString
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]ByteStringa_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
4d174e0529f5653295277f31d7883612
  $fLiftElem2[]ByteStringa_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> Data.ByteString.Internal.ByteString -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'111 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Chara ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String GHC.Types.Char a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Types.Char
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Chara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Chara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Chara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Chara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
41b7febf749a5ef00d4c482845e77d73
  $fLiftElem2[]Chara_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Chara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
eff84b2298383dd7c4ca394146a08e8e
  $fLiftElem2[]Chara_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> GHC.Types.Char -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Char
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
32763cef15ae7f505c4a4e134819318e
  $fLiftElem2[]Chara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Char -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Char
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Chara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
eba1116cfadef2bdf901dd95dd848c40
  $fLiftElem2[]Chara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Types.Char -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'112 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Daya ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Calendar.Days.Day a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Daya_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Daya_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Daya_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Daya_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
d290243749b42810f8f6b24539284af4
  $fLiftElem2[]Daya_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Daya_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
b05d5b1dc8fae195d010d6c39c9ed749
  $fLiftElem2[]Daya_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
b67b816b311f331c353d0a5d66f7be82
  $fLiftElem2[]Daya_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Daya_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
537da72289a5b20dfc9fa3b5e46dae44
  $fLiftElem2[]Daya_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> Data.Time.Calendar.Days.Day -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'113 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Doublea ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String GHC.Types.Double a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Types.Double
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Doublea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Doublea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Doublea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Doublea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
3155b334dd4e76e196d0feacb20afe76
  $fLiftElem2[]Doublea_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Doublea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
aa1c01c78de94c754acccc42803e4a00
  $fLiftElem2[]Doublea_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> GHC.Types.Double -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Double
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
d646151e1337e8a5b68bf74cc8cd6206
  $fLiftElem2[]Doublea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Double -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Double
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Doublea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1a00608af5c211a592ba2497b16edaee
  $fLiftElem2[]Doublea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Types.Double -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'114 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Inta ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String GHC.Types.Int a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Types.Int
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Inta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Inta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Inta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Inta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
73948e533fb35a68754ca899a41b3145
  $fLiftElem2[]Inta_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Inta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
bd4cf051e103cc967b5f55beda53a886
  $fLiftElem2[]Inta_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> GHC.Types.Int -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Types.Int
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
277a7d096ecb87f058e9c1beaef6f594
  $fLiftElem2[]Inta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Int -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Types.Int
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Inta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
03b973253f93eb19e930ddbbb6c5b33d
  $fLiftElem2[]Inta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Types.Int -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'115 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Integera ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Base.String GHC.Integer.Type.Integer a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Integera_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Integera_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Integera_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Integera_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
cc40ebf44c7cba24ad4011c3ccb57056
  $fLiftElem2[]Integera_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Integera_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
2e83c78339305a93da866e89ebf34308
  $fLiftElem2[]Integera_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ GHC.Integer.Type.Integer
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
3ea35643b78a5760490851df87dc5e0a
  $fLiftElem2[]Integera_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Integera_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
c6e49bfcab127ace23b7de1ba2870063
  $fLiftElem2[]Integera_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Integer.Type.Integer -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'116 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Relvara ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String Relvar.Relvar a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable Relvar.Relvar
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Relvara_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Relvara_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Relvara_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Relvara_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
878c8f033ef2889c61d4e0bed1faad1f
  $fLiftElem2[]Relvara_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Base.String -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Relvara_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a32fe9045bb6f38e578a966e1d029604
  $fLiftElem2[]Relvara_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Base.String -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> Relvar.Relvar -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Relvar.Relvar
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
a365ab32fb27cefcb15446af314e6778
  $fLiftElem2[]Relvara_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Base.String -> Relvar.Relvar -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Relvar.Relvar
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Relvara_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
1b3ca72e827f3f936fa994a8859210c5
  $fLiftElem2[]Relvara_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (GHC.Base.String -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> Relvar.Relvar -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'117 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]Texta ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Text.Internal.Text a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]Texta_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Texta_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Texta_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]Texta_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
f9aaf852a0eab820e8937de864080668
  $fLiftElem2[]Texta_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Texta_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
a3a1393765d2b1d50542468aa0e9b16d
  $fLiftElem2[]Texta_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Text.Internal.Text
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
9eb55367c2bdf8eae10cf34054b236b8
  $fLiftElem2[]Texta_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Text.Internal.Text -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]Texta_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
0a3dc94b4cc20ba4247d0b59f79cd3b8
  $fLiftElem2[]Texta_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> Data.Text.Internal.Text -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'118 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[]UTCTimea ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem2
      GHC.Base.String Data.Time.Clock.UTC.UTCTime a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[]UTCTimea_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]UTCTimea_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]UTCTimea_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[]UTCTimea_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
10acb1ea261a1b4be66ec307d9ebfddf
  $fLiftElem2[]UTCTimea_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]UTCTimea_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
d180f034bb2fdc91f7ec4a485aeff6f5
  $fLiftElem2[]UTCTimea_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Unfolding: (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem
                   eta2 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             $dElementable1
                             eta2 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y'
                        -> Relvar.toElem @ a $dElementable2 (eta x' y') } }) -}
aa98e0cb0056c5a3daf55b9c73f5b0e3
  $fLiftElem2[]UTCTimea_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[]UTCTimea_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
e85324aad77d06d0628f5fe3fab41162
  $fLiftElem2[]UTCTimea_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'119 @ a w w1 w3 w4 w5) -}
6c03224f5ae07779e3df55c8a17b1fd0
  $fLiftElem2[][]a ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem2 GHC.Base.String GHC.Base.String a
  DFunId[2]
  {- Arity: 3, Strictness: <L,U(U,U)><L,A><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable GHC.Base.String
                      $dElementable2 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable
                  $dElementable2
                  (Algebra.Function.$fLiftElem2[][]a_$cliftLeft2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[][]a_$cliftLeft2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[][]a_$cliftEl2'
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2)
                  (Algebra.Function.$fLiftElem2[][]a_$cliftEl2
                     @ a
                     $dElementable
                     $dElementable1
                     $dElementable2) -}
e6298009e175f3759b6d4a52fc20f35f
  $fLiftElem2[][]a_$cliftEl2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Relvar.Nil
                        : y xs
                        -> Algebra.Function.$fLiftElem2[][]a_$cliftEl2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
189df4e1c632bd6d770bfb9ccba977ac
  $fLiftElem2[][]a_$cliftEl2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftEl2'10 @ a w w2 w3 w4 w5) -}
72cc91f08f988cd95d1555a3de4dfc46
  $fLiftElem2[][]a_$cliftLeft2 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 5,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><S,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable GHC.Base.String
                   $dElementable2 :: Relvar.Elementable a
                   f :: GHC.Base.String -> GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x ds1
                   -> case ds1 of wild1 {
                        [] -> Algebra.Function.$fBoolFun2BoolBool1 @ a
                        : y xs
                        -> Algebra.Function.$fLiftElem2[][]a_$cliftLeft2'
                             @ a
                             $dElementable
                             $dElementable1
                             $dElementable2
                             f
                             x
                             y } }) -}
6e9fcc702a7f68900731fe732ae06717
  $fLiftElem2[][]a_$cliftLeft2' ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,A><L,A><L,1*C1(C1(U))><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, True)
                (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Elementable a
                   w3 :: GHC.Base.String -> GHC.Base.String -> a
                   w4 :: Relvar.Elem
                   w5 :: Relvar.Elem ->
                 Algebra.Function.$w$cliftLeft2'120 @ a w w3 w4 w5) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemBoola ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Types.Bool a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Bool
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Types.Bool
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemBoola_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemBoola_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemBoola_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemBoola_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
4b0cff9118fb7a453254825843b6ebe7
  $fLiftElemBoola_$cliftEl ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemBoola_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
63d58f298686ae1a5c00bde0d84dfe9c
  $fLiftElemBoola_$cliftEl' ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
766a8f966d9af56ffe8a0bf5ee3eea43
  $fLiftElemBoola_$cliftLeft ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Bool -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemBoola_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
d9539738e1c98b81ecc37212a633ffc2
  $fLiftElemBoola_$cliftLeft' ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Bool
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Bool -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool $dElementable eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemByteStringa ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem Data.ByteString.Internal.ByteString a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable
                                         Data.ByteString.Internal.ByteString
                      $dElementable1 :: Relvar.Elementable a.
                  @ Data.ByteString.Internal.ByteString
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemByteStringa_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemByteStringa_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemByteStringa_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemByteStringa_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
29ce29d1e795d966a4fee56c191b6248
  $fLiftElemByteStringa_$cliftEl ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemByteStringa_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
139fdd612fe3e7dc2a844f417d6b6417
  $fLiftElemByteStringa_$cliftEl' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
63af02776878ccb71cc58c199b4db81b
  $fLiftElemByteStringa_$cliftLeft ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.ByteString.Internal.ByteString -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemByteStringa_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
63e59efb5cc61aa22d6010b7a6a41a33
  $fLiftElemByteStringa_$cliftLeft' ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable
                                      Data.ByteString.Internal.ByteString
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.ByteString.Internal.ByteString -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemChara ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Types.Char a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Char
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Types.Char
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemChara_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemChara_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemChara_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemChara_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
4c135bacf6b1230b64bca1e89b09de53
  $fLiftElemChara_$cliftEl ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemChara_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
49c3e0b77048c4ee46aab5844e10adff
  $fLiftElemChara_$cliftEl' ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
1b47489a2e7fb7d2887c71ca14ab7d94
  $fLiftElemChara_$cliftLeft ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Char -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemChara_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
bf38b16c5cd350fa9f3c4775eca43052
  $fLiftElemChara_$cliftLeft' ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Char
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Char -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char $dElementable eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemDaya ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem Data.Time.Calendar.Days.Day a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                      $dElementable1 :: Relvar.Elementable a.
                  @ Data.Time.Calendar.Days.Day
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemDaya_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDaya_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDaya_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDaya_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
d6c2682cf802ba70a052d6016d0c52bc
  $fLiftElemDaya_$cliftEl ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemDaya_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
0870eee6d620aed1fdd3eea45ea315b7
  $fLiftElemDaya_$cliftEl' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
704aad051262fd37832446c19c217375
  $fLiftElemDaya_$cliftLeft ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Time.Calendar.Days.Day -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemDaya_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
4effea55f9a822576a55f1701bd4d37e
  $fLiftElemDaya_$cliftLeft' ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Time.Calendar.Days.Day -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Calendar.Days.Day
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemDoublea ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Types.Double a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Double
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Types.Double
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemDoublea_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDoublea_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDoublea_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemDoublea_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
f7408f9df661246ddd7ddfc7e0cabdd5
  $fLiftElemDoublea_$cliftEl ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemDoublea_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
64480a62731b02707ab53d1430b210a0
  $fLiftElemDoublea_$cliftEl' ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
5b1024cb018b69a1a5a8d63a2ea8ff93
  $fLiftElemDoublea_$cliftLeft ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Double -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemDoublea_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
ca88b7fca8a2242f32f3193b8c125674
  $fLiftElemDoublea_$cliftLeft' ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Double
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Double -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Types.Double
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemInta ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Types.Int a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Types.Int
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Types.Int
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemInta_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemInta_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemInta_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemInta_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
35c1c94aa1b94756b225529380fff377
  $fLiftElemInta_$cliftEl ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemInta_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
8fb3f13baa591f4e65933a55e666bf25
  $fLiftElemInta_$cliftEl' ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
78f9349324b0ba5f5ec42af9b8194a5e
  $fLiftElemInta_$cliftLeft ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Types.Int -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemInta_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
c96dfb112c7f19626d2cf879cf9c967c
  $fLiftElemInta_$cliftLeft' ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Types.Int
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Types.Int -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int $dElementable eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemIntegera ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Integer.Type.Integer a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Integer.Type.Integer
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemIntegera_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemIntegera_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemIntegera_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemIntegera_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
65f04a12593967082f661799329f89a2
  $fLiftElemIntegera_$cliftEl ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemIntegera_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
e130de345a55f971ba66813aaaf45d74
  $fLiftElemIntegera_$cliftEl' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
d028a3b3265eeabc8f712826abcd5ea1
  $fLiftElemIntegera_$cliftLeft ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Integer.Type.Integer -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemIntegera_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
641da2ed96986b59f89460c49ac9433a
  $fLiftElemIntegera_$cliftLeft' ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Integer.Type.Integer
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Integer.Type.Integer -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ GHC.Integer.Type.Integer
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemRelvara ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    Algebra.Function.LiftElem Relvar.Relvar a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Relvar.Relvar
                      $dElementable1 :: Relvar.Elementable a.
                  @ Relvar.Relvar
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemRelvara_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemRelvara_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemRelvara_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemRelvara_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
5ed544d77e08cb99b01cb86f0902030c
  $fLiftElemRelvara_$cliftEl ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemRelvara_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
5cfbc5b2a86c766218dd15c4f5195a73
  $fLiftElemRelvara_$cliftEl' ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
7c3206f0998940bbd540c2cc035577a6
  $fLiftElemRelvara_$cliftLeft ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable a
                   f :: Relvar.Relvar -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemRelvara_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
1638741959d7a9ae2b388077b6d1481f
  $fLiftElemRelvara_$cliftLeft' ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Relvar.Relvar
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Relvar.Relvar -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar $dElementable eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemTexta ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem Data.Text.Internal.Text a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                      $dElementable1 :: Relvar.Elementable a.
                  @ Data.Text.Internal.Text
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemTexta_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemTexta_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemTexta_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemTexta_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
639290e5380aeac8c7cf869e9e8f3251
  $fLiftElemTexta_$cliftEl ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemTexta_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
c94694274d626a11f1f86994063b05e1
  $fLiftElemTexta_$cliftEl' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
835aba59e78f7306a19e4ed3092f0d2f
  $fLiftElemTexta_$cliftLeft ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Text.Internal.Text -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemTexta_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
bfb18d34467a769aadbbc9c145bd2cb1
  $fLiftElemTexta_$cliftLeft' ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Text.Internal.Text
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Text.Internal.Text -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Text.Internal.Text
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElemUTCTimea ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    Algebra.Function.LiftElem Data.Time.Clock.UTC.UTCTime a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                      $dElementable1 :: Relvar.Elementable a.
                  @ Data.Time.Clock.UTC.UTCTime
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElemUTCTimea_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemUTCTimea_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemUTCTimea_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElemUTCTimea_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
bd7890f4e649f5bc71179309c58b9668
  $fLiftElemUTCTimea_$cliftEl ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElemUTCTimea_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
a920fbdc2956a92a178944fd4c8abbe2
  $fLiftElemUTCTimea_$cliftEl' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
ff29e82e36eae37ba21e9cca007a60c4
  $fLiftElemUTCTimea_$cliftLeft ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> a)
    -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable a
                   f :: Data.Time.Clock.UTC.UTCTime -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElemUTCTimea_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
2dda5d2229fc3ddb32a672080572e453
  $fLiftElemUTCTimea_$cliftLeft' ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   $dElementable1 :: Relvar.Elementable a
                   eta :: Data.Time.Clock.UTC.UTCTime -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.Time.Clock.UTC.UTCTime
                        $dElementable
                        eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
2c098d7a4961b368b3e66bc71a3b6ff6
  $fLiftElem[]a ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    Algebra.Function.LiftElem GHC.Base.String a
  DFunId[1]
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      $dElementable :: Relvar.Elementable GHC.Base.String
                      $dElementable1 :: Relvar.Elementable a.
                  @ GHC.Base.String
                  @ a
                  $dElementable
                  $dElementable1
                  (Algebra.Function.$fLiftElem[]a_$cliftLeft'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElem[]a_$cliftLeft
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElem[]a_$cliftEl'
                     @ a
                     $dElementable
                     $dElementable1)
                  (Algebra.Function.$fLiftElem[]a_$cliftEl
                     @ a
                     $dElementable
                     $dElementable1) -}
7ea55c80d1dfa20f1ad72b8cdf782f9b
  $fLiftElem[]a_$cliftEl ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> a) -> [Relvar.Elem] -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Relvar.Nil
                   : x xs
                   -> Algebra.Function.$fLiftElem[]a_$cliftEl'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
cbb97f2a53d880ad4d034c70f913664a
  $fLiftElem[]a_$cliftEl' ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> a) -> Relvar.Elem -> Relvar.Elem
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(1*C1(U),A)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x' -> Relvar.toElem @ a $dElementable1 (eta x') }) -}
038c1804740b0218283771e724eafbc8
  $fLiftElem[]a_$cliftLeft ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> a) -> [Relvar.Elem] -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable a
                   f :: GHC.Base.String -> a
                   ds :: [Relvar.Elem] ->
                 case ds of wild {
                   [] -> Algebra.Function.$fBoolFun2BoolBool2 @ a
                   : x xs
                   -> Algebra.Function.$fLiftElem[]a_$cliftLeft'
                        @ a
                        $dElementable
                        $dElementable1
                        f
                        x }) -}
c4bdf09f6d331fcbe2d111c17dd928be
  $fLiftElem[]a_$cliftLeft' ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> a) -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,A><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   $dElementable :: Relvar.Elementable GHC.Base.String
                   $dElementable1 :: Relvar.Elementable a
                   eta :: GHC.Base.String -> a
                   eta1 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String $dElementable eta1 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x' -> GHC.Base.Just @ a (eta x') }) -}
84c78a7c8fc354202160ea984842e362
  $w$cliftEl2' ::
    (Relvar.Elementable GHC.Types.Bool, Relvar.Elementable a) =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
c6cb437e9d67297d1992725c1cb33bca
  $w$cliftEl2'1 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable a) =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable a
                   w2 :: Data.ByteString.Internal.ByteString
                         -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w
                             w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
02ad98d20305975eb1ad34e0476196a9
  $w$cliftEl2'10 ::
    (Relvar.Elementable GHC.Base.String, Relvar.Elementable a) =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Base.String -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
5b3102c9d3f15886c42184c6b6c7f621
  $w$cliftEl2'2 ::
    (Relvar.Elementable GHC.Types.Char, Relvar.Elementable a) =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Types.Char -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
562646511407663ed239e0a499059e1a
  $w$cliftEl2'3 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable a) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable a
                   w2 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w
                             w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
f0e55af7c1514682998c4f117134b22f
  $w$cliftEl2'4 ::
    (Relvar.Elementable GHC.Types.Double, Relvar.Elementable a) =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Types.Double -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
4bba6e0aee56f7d99e7499ceda51ceb0
  $w$cliftEl2'5 ::
    (Relvar.Elementable GHC.Types.Int, Relvar.Elementable a) =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Types.Int -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
e472f840b81a541c5e1a0b03828b77e7
  $w$cliftEl2'6 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable a) =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable a
                   w2 :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
d7c971e3cc00b1a0e17756ebaddd1be4
  $w$cliftEl2'7 ::
    (Relvar.Elementable Relvar.Relvar, Relvar.Elementable a) =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable a
                   w2 :: Relvar.Relvar -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
2827d5768334bce725ecab180fc8bf56
  $w$cliftEl2'8 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable a) =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable a
                   w2 :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
1b9b55ff31182d451f6d6140ba7c7675
  $w$cliftEl2'9 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable a) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*U(1*C1(U),A)><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable a
                   w2 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> Relvar.Nil
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w
                             w4 of wild1 {
                        GHC.Base.Nothing -> Relvar.Nil
                        GHC.Base.Just y' -> Relvar.toElem @ a w1 (w2 x' y') } }) -}
d75702baa3f689a23c97c8691d606f38
  $w$cliftLeft2' ::
    Relvar.Elementable GHC.Types.Bool =>
    (GHC.Types.Bool -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: GHC.Types.Bool -> GHC.Types.Bool -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
ba870fcbd48a122508dea8ba4511179e
  $w$cliftLeft2'1 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Types.Bool -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
a394804da67e0c88aebc95c0f1f9e43a
  $w$cliftLeft2'10 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Base.String) =>
    (GHC.Types.Bool -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: GHC.Types.Bool -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
cdfedee6ae8d8d498c822a997ad35130
  $w$cliftLeft2'100 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (Data.Time.Clock.UTC.UTCTime
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
513361a868bd7c71d8972678d2fabead
  $w$cliftLeft2'101 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Char) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
e9f8589076a7fc2fd7c8b956f0c5956d
  $w$cliftLeft2'102 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
6d14c174a7164cdaeacaafb472a795db
  $w$cliftLeft2'103 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Double) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c3f8270346be2060469074d221fff09e
  $w$cliftLeft2'104 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Int) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
9d3e0f0f5dada85049738e8cb3710cf2
  $w$cliftLeft2'105 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
5897d88b8e877312364ac4bb4d5080ab
  $w$cliftLeft2'106 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Relvar.Relvar) =>
    (Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Data.Time.Clock.UTC.UTCTime -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
62941514c30da2e26431e61527cf9268
  $w$cliftLeft2'107 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Data.Time.Clock.UTC.UTCTime -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4afe6bb57f0b08be1964ce6e102a3661
  $w$cliftLeft2'108 ::
    Relvar.Elementable Data.Time.Clock.UTC.UTCTime =>
    (Data.Time.Clock.UTC.UTCTime -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Data.Time.Clock.UTC.UTCTime
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w
                             w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
3377ccb96070ad699dfb9dac3d50cd94
  $w$cliftLeft2'109 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Base.String) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
74bf39f52fbe187bcb2cfa3a167c15e4
  $w$cliftLeft2'11 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Bool) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
3547283f87e5cbfc261184bce7fd3916
  $w$cliftLeft2'110 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Bool) =>
    (GHC.Base.String -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: GHC.Base.String -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
b180f408a81d4b1421c0b8eb7df90b69
  $w$cliftLeft2'111 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Base.String -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Base.String -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
baa55812e3373c6f854fefa6955040bd
  $w$cliftLeft2'112 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Char) =>
    (GHC.Base.String -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: GHC.Base.String -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
9fd020892118ad576a238cdc1f5d8424
  $w$cliftLeft2'113 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Base.String -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Base.String -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
f181cc46c11220c163031ef6d04dd1e7
  $w$cliftLeft2'114 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Double) =>
    (GHC.Base.String -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: GHC.Base.String -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
b98f6ca0b9b060405315eb8f51fefbbb
  $w$cliftLeft2'115 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Types.Int) =>
    (GHC.Base.String -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: GHC.Base.String -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
43dd58eba4d8fd4dac00ff7ca1c1b4c3
  $w$cliftLeft2'116 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (GHC.Base.String -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: GHC.Base.String -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
1a7b2861e41e952dfdc2891e5c2e2f63
  $w$cliftLeft2'117 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Base.String -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Base.String -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c68baf6a1508d2d93de45e64f5cb62ec
  $w$cliftLeft2'118 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Base.String -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Base.String -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
5cf1f220e860956868254ee9a10bbcb8
  $w$cliftLeft2'119 ::
    (Relvar.Elementable GHC.Base.String,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Base.String -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
82f37abe4eba1a0ca162413e1a8d2a78
  $w$cliftLeft2'12 ::
    Relvar.Elementable Data.ByteString.Internal.ByteString =>
    (Data.ByteString.Internal.ByteString
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Data.ByteString.Internal.ByteString
                         -> Data.ByteString.Internal.ByteString -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w
                             w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
a5998b47225610b4d0fa87b91c8f9270
  $w$cliftLeft2'120 ::
    Relvar.Elementable GHC.Base.String =>
    (GHC.Base.String -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Base.String
                   w1 :: GHC.Base.String -> GHC.Base.String -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Base.String w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
edae7fd7e82c56d359a092747f1c26ad
  $w$cliftLeft2'13 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Char) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Data.ByteString.Internal.ByteString -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4d640641b18f9014db9ddb578f02a57b
  $w$cliftLeft2'14 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Data.ByteString.Internal.ByteString
                         -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7e175f800bb3cdc35e2ce558e6c941d0
  $w$cliftLeft2'15 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Double) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Data.ByteString.Internal.ByteString -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
fa3e7e7973bcffb4272314f4054fd3b9
  $w$cliftLeft2'16 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Types.Int) =>
    (Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Data.ByteString.Internal.ByteString -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
1bc8d092354586b8352e51bc0076fd1f
  $w$cliftLeft2'17 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (Data.ByteString.Internal.ByteString
     -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Data.ByteString.Internal.ByteString
                         -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
b51c8029f663cc5486b90d4bbad83c62
  $w$cliftLeft2'18 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Relvar.Relvar) =>
    (Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Data.ByteString.Internal.ByteString -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
2f4e9b82315544f13c9eeb30daf0a7d1
  $w$cliftLeft2'19 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Data.ByteString.Internal.ByteString
                         -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
1c5bba75c67c24a7533d3ef16104917d
  $w$cliftLeft2'2 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Char) =>
    (GHC.Types.Bool -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: GHC.Types.Bool -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
80bde808be568d7e7d886e21ea249d5f
  $w$cliftLeft2'20 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (Data.ByteString.Internal.ByteString
     -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Data.ByteString.Internal.ByteString
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
e7f4409460a830637cd0bd0efcc1a731
  $w$cliftLeft2'21 ::
    (Relvar.Elementable Data.ByteString.Internal.ByteString,
     Relvar.Elementable GHC.Base.String) =>
    (Data.ByteString.Internal.ByteString -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Data.ByteString.Internal.ByteString -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem
                        @ Data.ByteString.Internal.ByteString
                        w
                        w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
63284904e5cb6bb3f446e0d368beb786
  $w$cliftLeft2'22 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Bool) =>
    (GHC.Types.Char -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: GHC.Types.Char -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
9d3146b90d9d9c6109de10e68d50aae1
  $w$cliftLeft2'23 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Types.Char -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
9e16d40a13d7bf1668a982aab1a8ee2d
  $w$cliftLeft2'24 ::
    Relvar.Elementable GHC.Types.Char =>
    (GHC.Types.Char -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: GHC.Types.Char -> GHC.Types.Char -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
cd16a494b67891723fb7e23b2705b9bb
  $w$cliftLeft2'25 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Types.Char -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7810a11a142abdef35a4e19c868a86e7
  $w$cliftLeft2'26 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Double) =>
    (GHC.Types.Char -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: GHC.Types.Char -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
eed108f7fad41345e73d2b41150cde95
  $w$cliftLeft2'27 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Types.Int) =>
    (GHC.Types.Char -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: GHC.Types.Char -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
821eec07b7859d9a09119c1381426324
  $w$cliftLeft2'28 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (GHC.Types.Char -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: GHC.Types.Char -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c68fbf4633f263e23950b49c7dbf13d4
  $w$cliftLeft2'29 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Types.Char -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Types.Char -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
1395071fe39f99694612abc3a6adb4c5
  $w$cliftLeft2'3 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Types.Bool -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
e5c042b0c08bbea0481ca2fbecade5ab
  $w$cliftLeft2'30 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Types.Char -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Types.Char -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
558109c9555b93e8e5e91f41d080d215
  $w$cliftLeft2'31 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Types.Char -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
6af320d4138aab2b33f36ed815c3cb50
  $w$cliftLeft2'32 ::
    (Relvar.Elementable GHC.Types.Char,
     Relvar.Elementable GHC.Base.String) =>
    (GHC.Types.Char -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Char
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: GHC.Types.Char -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Char w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
fe9948d056c6f2fd671939903eca6434
  $w$cliftLeft2'33 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Bool) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
0f46afa80aedc6f9bf1dbdbfbcd09065
  $w$cliftLeft2'34 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (Data.Time.Calendar.Days.Day
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Data.Time.Calendar.Days.Day
                         -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7448b39cc737d9351acde2e4fe83bbee
  $w$cliftLeft2'35 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Char) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
3c8e98a0cb7335404b8a9961161af4ca
  $w$cliftLeft2'36 ::
    Relvar.Elementable Data.Time.Calendar.Days.Day =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Calendar.Days.Day -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w
                             w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
d34201f1c58e0d1b4dc33329473cca45
  $w$cliftLeft2'37 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Double) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
f33344e8ce0fa31b9d030207ddb19532
  $w$cliftLeft2'38 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Types.Int) =>
    (Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
cc5ac41205abe8f0112fb53d0bd64ce1
  $w$cliftLeft2'39 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
bc7e7a990a9b166b6f68e519c11196f7
  $w$cliftLeft2'4 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Double) =>
    (GHC.Types.Bool -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: GHC.Types.Bool -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
fddc39f4c07768596ab14447dfca0088
  $w$cliftLeft2'40 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Relvar.Relvar) =>
    (Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Data.Time.Calendar.Days.Day -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4e85af877baa4548c497670e54dd2519
  $w$cliftLeft2'41 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Data.Time.Calendar.Days.Day -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
b85e515bc7e2b0a9a214cb18d114424f
  $w$cliftLeft2'42 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Data.Time.Calendar.Days.Day
                         -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
64458b819542751c4d6b8697d6468fa2
  $w$cliftLeft2'43 ::
    (Relvar.Elementable Data.Time.Calendar.Days.Day,
     Relvar.Elementable GHC.Base.String) =>
    (Data.Time.Calendar.Days.Day -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Data.Time.Calendar.Days.Day -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Calendar.Days.Day w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
f6b3cb7993618e7ed9ac9d6399c79624
  $w$cliftLeft2'44 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Bool) =>
    (GHC.Types.Double -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: GHC.Types.Double -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c09eb5276146e6d23c355b9a28f267b4
  $w$cliftLeft2'45 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Types.Double -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
9c6f24274a53da3cd5520eec7aabfabb
  $w$cliftLeft2'46 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Char) =>
    (GHC.Types.Double -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: GHC.Types.Double -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4b11badc85470ca725102aa6bee574ff
  $w$cliftLeft2'47 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Types.Double -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c6d91ea6eff29f4032fe453d38d167e3
  $w$cliftLeft2'48 ::
    Relvar.Elementable GHC.Types.Double =>
    (GHC.Types.Double -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: GHC.Types.Double -> GHC.Types.Double -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
4b0af1fc16cf5cf39c5fd93b3143d503
  $w$cliftLeft2'49 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Types.Int) =>
    (GHC.Types.Double -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: GHC.Types.Double -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7e4daad1d0fe17f240e9bc7710341783
  $w$cliftLeft2'5 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Types.Int) =>
    (GHC.Types.Bool -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: GHC.Types.Bool -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
0661231f51892d7c387ad6cfa08ba91a
  $w$cliftLeft2'50 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (GHC.Types.Double -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: GHC.Types.Double -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
950575962699feb2d73da12bcf4d5fb8
  $w$cliftLeft2'51 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Types.Double -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Types.Double -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c2c88a096c6b0fef97dc178ecf6e9c62
  $w$cliftLeft2'52 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Types.Double -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Types.Double -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
12ff8b55635a438347d356a9cf6b8ede
  $w$cliftLeft2'53 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Types.Double -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
6ed71b23f459577e9c001794a6a6ee5a
  $w$cliftLeft2'54 ::
    (Relvar.Elementable GHC.Types.Double,
     Relvar.Elementable GHC.Base.String) =>
    (GHC.Types.Double -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Double
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: GHC.Types.Double -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Double w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
fb53903176a1e167797cb681394df59c
  $w$cliftLeft2'55 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Bool) =>
    (GHC.Types.Int -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: GHC.Types.Int -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
aebb95d6a955becc1556785266c6bc36
  $w$cliftLeft2'56 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Types.Int -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
93f408a7ff4f735d7eee39a583eeddd5
  $w$cliftLeft2'57 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Char) =>
    (GHC.Types.Int -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: GHC.Types.Int -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
44c9f3443879058063e2b0ff22d31915
  $w$cliftLeft2'58 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Types.Int -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
277b76d9a880a405625c09dfb2e8a392
  $w$cliftLeft2'59 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Types.Double) =>
    (GHC.Types.Int -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: GHC.Types.Int -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
df2b59354120c0f85ae2a64340622ee2
  $w$cliftLeft2'6 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (GHC.Types.Bool -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: GHC.Types.Bool -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
0997c5495a5699ad696c4d79e10197b4
  $w$cliftLeft2'60 ::
    Relvar.Elementable GHC.Types.Int =>
    (GHC.Types.Int -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: GHC.Types.Int -> GHC.Types.Int -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
12e56baabfacfbb455e13d63b7f2e17b
  $w$cliftLeft2'61 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (GHC.Types.Int -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: GHC.Types.Int -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7a47b376c66c9bd2ca03bcfb4a28ae59
  $w$cliftLeft2'62 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Types.Int -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Types.Int -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
eb9d10efd88766c9eae12c717af5326d
  $w$cliftLeft2'63 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Types.Int -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Types.Int -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
0192749ba28a03f4c9714be2de0f7802
  $w$cliftLeft2'64 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Types.Int -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
8b65aeb4345cf89fe475e2d42fc75c83
  $w$cliftLeft2'65 ::
    (Relvar.Elementable GHC.Types.Int,
     Relvar.Elementable GHC.Base.String) =>
    (GHC.Types.Int -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Int
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: GHC.Types.Int -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Int w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
d6986893e77264e466119f54e07be079
  $w$cliftLeft2'66 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Bool) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: GHC.Integer.Type.Integer -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
c8c875f7ba4252e879928cea24d81b2c
  $w$cliftLeft2'67 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (GHC.Integer.Type.Integer
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: GHC.Integer.Type.Integer
                         -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
aa5cdec8dc8c1fc62995f074d15d0ddc
  $w$cliftLeft2'68 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Char) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: GHC.Integer.Type.Integer -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
79f8f2ad474f0b8833f420c3bffcc7d7
  $w$cliftLeft2'69 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
6924b76c7b65f2260e5eb672fefdc7e6
  $w$cliftLeft2'7 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Types.Bool -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Types.Bool -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
cbc918e24eae1d7a067b2751eb4c497b
  $w$cliftLeft2'70 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Double) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: GHC.Integer.Type.Integer -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
65f2cc4eac900649863bb05b5b209cc6
  $w$cliftLeft2'71 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Types.Int) =>
    (GHC.Integer.Type.Integer -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: GHC.Integer.Type.Integer -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
dc76e3737bbc8daf3c7075d4d7886a3b
  $w$cliftLeft2'72 ::
    Relvar.Elementable GHC.Integer.Type.Integer =>
    (GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
8645f4c5bf1e4151d993d9d2006dbd18
  $w$cliftLeft2'73 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Relvar.Relvar) =>
    (GHC.Integer.Type.Integer -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: GHC.Integer.Type.Integer -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7fdffb01b9f3902afb3a11efb578c466
  $w$cliftLeft2'74 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Integer.Type.Integer -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
897b09bbbb1e29dee7de1a4b12fbec11
  $w$cliftLeft2'75 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Integer.Type.Integer -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
0c1c00904290470a822c64a040e29540
  $w$cliftLeft2'76 ::
    (Relvar.Elementable GHC.Integer.Type.Integer,
     Relvar.Elementable GHC.Base.String) =>
    (GHC.Integer.Type.Integer -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Integer.Type.Integer
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: GHC.Integer.Type.Integer -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Integer.Type.Integer w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
ce25f8e0056bda7cde6c225e92cea591
  $w$cliftLeft2'77 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Bool) =>
    (Relvar.Relvar -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Relvar.Relvar -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
6059bc63637724a63eabf31102628a5f
  $w$cliftLeft2'78 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Relvar.Relvar -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
846c229860f5cc09c925cd0b9d10564e
  $w$cliftLeft2'79 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Char) =>
    (Relvar.Relvar -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Relvar.Relvar -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
af9aea73a1031ec5cd5633bc4c115978
  $w$cliftLeft2'8 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (GHC.Types.Bool -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: GHC.Types.Bool -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
05f99de27658eaa79e43871098e6ec7f
  $w$cliftLeft2'80 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Relvar.Relvar -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
352b278d80cd1db8ec3464b32acf05e8
  $w$cliftLeft2'81 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Double) =>
    (Relvar.Relvar -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Relvar.Relvar -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
38585c7c63cc203bbd86ee9ebf4804e5
  $w$cliftLeft2'82 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Types.Int) =>
    (Relvar.Relvar -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Relvar.Relvar -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4c807b56fcb459c706b80b6ae07944f2
  $w$cliftLeft2'83 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (Relvar.Relvar -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Relvar.Relvar -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
8784b8a2e597c89bb6e08386915b687a
  $w$cliftLeft2'84 ::
    Relvar.Elementable Relvar.Relvar =>
    (Relvar.Relvar -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Relvar -> Relvar.Relvar -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
6ee0d7fe8afa0ecb4fa5552eb303893c
  $w$cliftLeft2'85 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Text.Internal.Text) =>
    (Relvar.Relvar -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Text.Internal.Text
                   w2 :: Relvar.Relvar -> Data.Text.Internal.Text -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
fbdd26fb5618e92176c600f172043289
  $w$cliftLeft2'86 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Relvar.Relvar -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
2afb06a9c20887191339efcb9cef0210
  $w$cliftLeft2'87 ::
    (Relvar.Elementable Relvar.Relvar,
     Relvar.Elementable GHC.Base.String) =>
    (Relvar.Relvar -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Relvar.Relvar
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Relvar.Relvar -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Relvar.Relvar w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
86923b5de5ae6f408af1d79a8a15b491
  $w$cliftLeft2'88 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Bool) =>
    (Data.Text.Internal.Text -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Data.Text.Internal.Text -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
901daaa72c063ea1da1f6ad3472a3747
  $w$cliftLeft2'89 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.ByteString.Internal.ByteString) =>
    (Data.Text.Internal.Text
     -> Data.ByteString.Internal.ByteString -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.ByteString.Internal.ByteString
                   w2 :: Data.Text.Internal.Text
                         -> Data.ByteString.Internal.ByteString -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.ByteString.Internal.ByteString
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
44f1dab3e6a987ae9467c3d5d27c4873
  $w$cliftLeft2'9 ::
    (Relvar.Elementable GHC.Types.Bool,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable GHC.Types.Bool
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: GHC.Types.Bool -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ GHC.Types.Bool w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
feca196cd865a75d6c54bfbfac998a57
  $w$cliftLeft2'90 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Char) =>
    (Data.Text.Internal.Text -> GHC.Types.Char -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Char
                   w2 :: Data.Text.Internal.Text -> GHC.Types.Char -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Char w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
bb11cf0d740cd8e0c7497d6c0f33d45c
  $w$cliftLeft2'91 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Calendar.Days.Day) =>
    (Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Time.Calendar.Days.Day
                   w2 :: Data.Text.Internal.Text -> Data.Time.Calendar.Days.Day -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Calendar.Days.Day
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
4443f5d1b4585d0ee038c285c9c3e3de
  $w$cliftLeft2'92 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Double) =>
    (Data.Text.Internal.Text -> GHC.Types.Double -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Double
                   w2 :: Data.Text.Internal.Text -> GHC.Types.Double -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Double w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
21068f7562a5d15aa80e3c49e727f9cf
  $w$cliftLeft2'93 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Types.Int) =>
    (Data.Text.Internal.Text -> GHC.Types.Int -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Types.Int
                   w2 :: Data.Text.Internal.Text -> GHC.Types.Int -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Int w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
3bad2b094037f91dcf9cc038748af257
  $w$cliftLeft2'94 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Integer.Type.Integer) =>
    (Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Integer.Type.Integer
                   w2 :: Data.Text.Internal.Text -> GHC.Integer.Type.Integer -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Integer.Type.Integer w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
794209b19650027ec9aeefcb9ea0bd86
  $w$cliftLeft2'95 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Relvar.Relvar) =>
    (Data.Text.Internal.Text -> Relvar.Relvar -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Relvar.Relvar
                   w2 :: Data.Text.Internal.Text -> Relvar.Relvar -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Relvar.Relvar w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
7f11c30d988407cb801ca9ef5a5a9589
  $w$cliftLeft2'96 ::
    Relvar.Elementable Data.Text.Internal.Text =>
    (Data.Text.Internal.Text -> Data.Text.Internal.Text -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),U(A,C(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Data.Text.Internal.Text -> Data.Text.Internal.Text -> a
                   w2 :: Relvar.Elem
                   w3 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w1 x' y') } }) -}
ece6b914d67010fb8dc932cd5f73bb81
  $w$cliftLeft2'97 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable Data.Time.Clock.UTC.UTCTime) =>
    (Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w2 :: Data.Text.Internal.Text -> Data.Time.Clock.UTC.UTCTime -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem
                             @ Data.Time.Clock.UTC.UTCTime
                             w1
                             w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
459eea160c8fafa35d28f2121097b6f2
  $w$cliftLeft2'98 ::
    (Relvar.Elementable Data.Text.Internal.Text,
     Relvar.Elementable GHC.Base.String) =>
    (Data.Text.Internal.Text -> GHC.Base.String -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Text.Internal.Text
                   w1 :: Relvar.Elementable GHC.Base.String
                   w2 :: Data.Text.Internal.Text -> GHC.Base.String -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Text.Internal.Text w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Base.String w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
e9bc7b033ad4cc6c30de7c0de22a174b
  $w$cliftLeft2'99 ::
    (Relvar.Elementable Data.Time.Clock.UTC.UTCTime,
     Relvar.Elementable GHC.Types.Bool) =>
    (Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a)
    -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*C1(C1(U))><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   w :: Relvar.Elementable Data.Time.Clock.UTC.UTCTime
                   w1 :: Relvar.Elementable GHC.Types.Bool
                   w2 :: Data.Time.Clock.UTC.UTCTime -> GHC.Types.Bool -> a
                   w3 :: Relvar.Elem
                   w4 :: Relvar.Elem ->
                 case Relvar.fromElem @ Data.Time.Clock.UTC.UTCTime w w3 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ a
                   GHC.Base.Just x'
                   -> case Relvar.fromElem @ GHC.Types.Bool w1 w4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just y' -> GHC.Base.Just @ a (w2 x' y') } }) -}
e0377be8625ec08c0443e2ea7ae1def7
  class Algebra.Function.LiftElem a GHC.Types.Bool => BoolFun a where
    liftBoolFun {- Has default method -} ::
      (a -> GHC.Types.Bool) -> [Relvar.Elem] -> GHC.Types.Bool
ec583295288e3ab05b211674031b25e8
  class Algebra.Function.LiftElem2 a1 a2 GHC.Types.Bool =>
        BoolFun2 a1 a2 where
    liftBoolFun2 {- Has default method -} ::
      (a1 -> a2 -> GHC.Types.Bool) -> [Relvar.Elem] -> GHC.Types.Bool
e883d66f240d8c01e93943349f985e34
  class Algebra.Function.LiftElem3 a1 a2 a3 GHC.Types.Bool =>
        BoolFun3 a1 a2 a3 where
    liftBoolFun3 {- Has default method -} ::
      (a1 -> a2 -> a3 -> GHC.Types.Bool)
      -> [Relvar.Elem] -> GHC.Types.Bool
2c098d7a4961b368b3e66bc71a3b6ff6
  class (Relvar.Elementable a, Relvar.Elementable b) =>
        LiftElem a b where
    liftLeft' {- Has default method -} ::
      (a -> b) -> Relvar.Elem -> GHC.Base.Maybe b
    liftLeft {- Has default method -} ::
      (a -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
    liftEl' {- Has default method -} ::
      (a -> b) -> Relvar.Elem -> Relvar.Elem
    liftEl {- Has default method -} ::
      (a -> b) -> [Relvar.Elem] -> Relvar.Elem
6c03224f5ae07779e3df55c8a17b1fd0
  class (Relvar.Elementable a1, Relvar.Elementable a2,
         Relvar.Elementable b) =>
        LiftElem2 a1 a2 b where
    liftLeft2' {- Has default method -} ::
      (a1 -> a2 -> b) -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe b
    liftLeft2 {- Has default method -} ::
      (a1 -> a2 -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
    liftEl2' {- Has default method -} ::
      (a1 -> a2 -> b) -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
    liftEl2 {- Has default method -} ::
      (a1 -> a2 -> b) -> [Relvar.Elem] -> Relvar.Elem
9e516c13a8d4ca242372e953f05e1dbf
  class (Relvar.Elementable a1, Relvar.Elementable a2,
         Relvar.Elementable a3, Relvar.Elementable b) =>
        LiftElem3 a1 a2 a3 b where
    liftLeft3' {- Has default method -} ::
      (a1 -> a2 -> a3 -> b)
      -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem -> GHC.Base.Maybe b
    liftLeft3 {- Has default method -} ::
      (a1 -> a2 -> a3 -> b) -> [Relvar.Elem] -> GHC.Base.Maybe b
    liftEl3' {- Has default method -} ::
      (a1 -> a2 -> a3 -> b)
      -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem -> Relvar.Elem
    liftEl3 {- Has default method -} ::
      (a1 -> a2 -> a3 -> b) -> [Relvar.Elem] -> Relvar.Elem
instance Algebra.Function.BoolFun2 [GHC.Types.Bool, GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2BoolBool
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2BoolByteString
instance Algebra.Function.BoolFun2 [GHC.Types.Bool, GHC.Types.Char]
  = Algebra.Function.$fBoolFun2BoolChar
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2BoolDay
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2BoolDouble
instance Algebra.Function.BoolFun2 [GHC.Types.Bool, GHC.Types.Int]
  = Algebra.Function.$fBoolFun2BoolInt
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2BoolInteger
instance Algebra.Function.BoolFun2 [GHC.Types.Bool, Relvar.Relvar]
  = Algebra.Function.$fBoolFun2BoolRelvar
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2BoolText
instance Algebra.Function.BoolFun2 [GHC.Types.Bool,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2BoolUTCTime
instance Algebra.Function.BoolFun2 [GHC.Types.Bool, []]
  = Algebra.Function.$fBoolFun2Bool[]
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2ByteStringBool
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2ByteStringByteString
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2ByteStringChar
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2ByteStringDay
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2ByteStringDouble
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2ByteStringInt
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2ByteStringInteger
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2ByteStringRelvar
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2ByteStringText
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2ByteStringUTCTime
instance Algebra.Function.BoolFun2 [Data.ByteString.Internal.ByteString,
                                    []]
  = Algebra.Function.$fBoolFun2ByteString[]
instance Algebra.Function.BoolFun2 [GHC.Types.Char, GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2CharBool
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2CharByteString
instance Algebra.Function.BoolFun2 [GHC.Types.Char, GHC.Types.Char]
  = Algebra.Function.$fBoolFun2CharChar
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2CharDay
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2CharDouble
instance Algebra.Function.BoolFun2 [GHC.Types.Char, GHC.Types.Int]
  = Algebra.Function.$fBoolFun2CharInt
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2CharInteger
instance Algebra.Function.BoolFun2 [GHC.Types.Char, Relvar.Relvar]
  = Algebra.Function.$fBoolFun2CharRelvar
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2CharText
instance Algebra.Function.BoolFun2 [GHC.Types.Char,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2CharUTCTime
instance Algebra.Function.BoolFun2 [GHC.Types.Char, []]
  = Algebra.Function.$fBoolFun2Char[]
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2DayBool
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2DayByteString
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2DayChar
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2DayDay
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2DayDouble
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2DayInt
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2DayInteger
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2DayRelvar
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2DayText
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2DayUTCTime
instance Algebra.Function.BoolFun2 [Data.Time.Calendar.Days.Day,
                                    []]
  = Algebra.Function.$fBoolFun2Day[]
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2DoubleBool
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2DoubleByteString
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2DoubleChar
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2DoubleDay
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2DoubleDouble
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2DoubleInt
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2DoubleInteger
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2DoubleRelvar
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2DoubleText
instance Algebra.Function.BoolFun2 [GHC.Types.Double,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2DoubleUTCTime
instance Algebra.Function.BoolFun2 [GHC.Types.Double, []]
  = Algebra.Function.$fBoolFun2Double[]
instance Algebra.Function.BoolFun2 [GHC.Types.Int, GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2IntBool
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2IntByteString
instance Algebra.Function.BoolFun2 [GHC.Types.Int, GHC.Types.Char]
  = Algebra.Function.$fBoolFun2IntChar
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2IntDay
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2IntDouble
instance Algebra.Function.BoolFun2 [GHC.Types.Int, GHC.Types.Int]
  = Algebra.Function.$fBoolFun2IntInt
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2IntInteger
instance Algebra.Function.BoolFun2 [GHC.Types.Int, Relvar.Relvar]
  = Algebra.Function.$fBoolFun2IntRelvar
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2IntText
instance Algebra.Function.BoolFun2 [GHC.Types.Int,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2IntUTCTime
instance Algebra.Function.BoolFun2 [GHC.Types.Int, []]
  = Algebra.Function.$fBoolFun2Int[]
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2IntegerBool
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2IntegerByteString
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2IntegerChar
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2IntegerDay
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2IntegerDouble
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2IntegerInt
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2IntegerInteger
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2IntegerRelvar
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2IntegerText
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2IntegerUTCTime
instance Algebra.Function.BoolFun2 [GHC.Integer.Type.Integer, []]
  = Algebra.Function.$fBoolFun2Integer[]
instance Algebra.Function.BoolFun2 [Relvar.Relvar, GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2RelvarBool
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2RelvarByteString
instance Algebra.Function.BoolFun2 [Relvar.Relvar, GHC.Types.Char]
  = Algebra.Function.$fBoolFun2RelvarChar
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2RelvarDay
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2RelvarDouble
instance Algebra.Function.BoolFun2 [Relvar.Relvar, GHC.Types.Int]
  = Algebra.Function.$fBoolFun2RelvarInt
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2RelvarInteger
instance Algebra.Function.BoolFun2 [Relvar.Relvar, Relvar.Relvar]
  = Algebra.Function.$fBoolFun2RelvarRelvar
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2RelvarText
instance Algebra.Function.BoolFun2 [Relvar.Relvar,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2RelvarUTCTime
instance Algebra.Function.BoolFun2 [Relvar.Relvar, []]
  = Algebra.Function.$fBoolFun2Relvar[]
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2TextBool
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2TextByteString
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2TextChar
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2TextDay
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2TextDouble
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2TextInt
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2TextInteger
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2TextRelvar
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2TextText
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2TextUTCTime
instance Algebra.Function.BoolFun2 [Data.Text.Internal.Text, []]
  = Algebra.Function.$fBoolFun2Text[]
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2UTCTimeBool
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2UTCTimeByteString
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    GHC.Types.Char]
  = Algebra.Function.$fBoolFun2UTCTimeChar
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2UTCTimeDay
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    GHC.Types.Double]
  = Algebra.Function.$fBoolFun2UTCTimeDouble
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    GHC.Types.Int]
  = Algebra.Function.$fBoolFun2UTCTimeInt
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2UTCTimeInteger
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    Relvar.Relvar]
  = Algebra.Function.$fBoolFun2UTCTimeRelvar
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2UTCTimeText
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime
instance Algebra.Function.BoolFun2 [Data.Time.Clock.UTC.UTCTime,
                                    []]
  = Algebra.Function.$fBoolFun2UTCTime[]
instance Algebra.Function.BoolFun2 [[], GHC.Types.Bool]
  = Algebra.Function.$fBoolFun2[]Bool
instance Algebra.Function.BoolFun2 [[],
                                    Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFun2[]ByteString
instance Algebra.Function.BoolFun2 [[], GHC.Types.Char]
  = Algebra.Function.$fBoolFun2[]Char
instance Algebra.Function.BoolFun2 [[],
                                    Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFun2[]Day
instance Algebra.Function.BoolFun2 [[], GHC.Types.Double]
  = Algebra.Function.$fBoolFun2[]Double
instance Algebra.Function.BoolFun2 [[], GHC.Types.Int]
  = Algebra.Function.$fBoolFun2[]Int
instance Algebra.Function.BoolFun2 [[], GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFun2[]Integer
instance Algebra.Function.BoolFun2 [[], Relvar.Relvar]
  = Algebra.Function.$fBoolFun2[]Relvar
instance Algebra.Function.BoolFun2 [[], Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFun2[]Text
instance Algebra.Function.BoolFun2 [[],
                                    Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFun2[]UTCTime
instance Algebra.Function.BoolFun2 [[], []]
  = Algebra.Function.$fBoolFun2[][]
instance Algebra.Function.BoolFun [GHC.Types.Bool]
  = Algebra.Function.$fBoolFunBool
instance Algebra.Function.BoolFun [Data.ByteString.Internal.ByteString]
  = Algebra.Function.$fBoolFunByteString
instance Algebra.Function.BoolFun [GHC.Types.Char]
  = Algebra.Function.$fBoolFunChar
instance Algebra.Function.BoolFun [Data.Time.Calendar.Days.Day]
  = Algebra.Function.$fBoolFunDay
instance Algebra.Function.BoolFun [GHC.Types.Double]
  = Algebra.Function.$fBoolFunDouble
instance Algebra.Function.BoolFun [GHC.Types.Int]
  = Algebra.Function.$fBoolFunInt
instance Algebra.Function.BoolFun [GHC.Integer.Type.Integer]
  = Algebra.Function.$fBoolFunInteger
instance Algebra.Function.BoolFun [Relvar.Relvar]
  = Algebra.Function.$fBoolFunRelvar
instance Algebra.Function.BoolFun [Data.Text.Internal.Text]
  = Algebra.Function.$fBoolFunText
instance Algebra.Function.BoolFun [Data.Time.Clock.UTC.UTCTime]
  = Algebra.Function.$fBoolFunUTCTime
instance Algebra.Function.BoolFun [[]]
  = Algebra.Function.$fBoolFun[]
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2BoolBoola
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2BoolByteStringa
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2BoolChara
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2BoolDaya
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2BoolDoublea
instance Algebra.Function.LiftElem2 [GHC.Types.Bool, GHC.Types.Int,
                                     .]
  = Algebra.Function.$fLiftElem2BoolInta
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2BoolIntegera
instance Algebra.Function.LiftElem2 [GHC.Types.Bool, Relvar.Relvar,
                                     .]
  = Algebra.Function.$fLiftElem2BoolRelvara
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2BoolTexta
instance Algebra.Function.LiftElem2 [GHC.Types.Bool,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2BoolUTCTimea
instance Algebra.Function.LiftElem2 [GHC.Types.Bool, [], .]
  = Algebra.Function.$fLiftElem2Bool[]a
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2ByteStringBoola
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2ByteStringByteStringa
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2ByteStringChara
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2ByteStringDaya
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2ByteStringDoublea
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2ByteStringInta
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2ByteStringIntegera
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2ByteStringRelvara
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2ByteStringTexta
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2ByteStringUTCTimea
instance Algebra.Function.LiftElem2 [Data.ByteString.Internal.ByteString,
                                     [], .]
  = Algebra.Function.$fLiftElem2ByteString[]a
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2CharBoola
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2CharByteStringa
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2CharChara
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2CharDaya
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2CharDoublea
instance Algebra.Function.LiftElem2 [GHC.Types.Char, GHC.Types.Int,
                                     .]
  = Algebra.Function.$fLiftElem2CharInta
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2CharIntegera
instance Algebra.Function.LiftElem2 [GHC.Types.Char, Relvar.Relvar,
                                     .]
  = Algebra.Function.$fLiftElem2CharRelvara
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2CharTexta
instance Algebra.Function.LiftElem2 [GHC.Types.Char,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2CharUTCTimea
instance Algebra.Function.LiftElem2 [GHC.Types.Char, [], .]
  = Algebra.Function.$fLiftElem2Char[]a
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2DayBoola
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2DayByteStringa
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2DayChara
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2DayDaya
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2DayDoublea
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2DayInta
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2DayIntegera
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2DayRelvara
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2DayTexta
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2DayUTCTimea
instance Algebra.Function.LiftElem2 [Data.Time.Calendar.Days.Day,
                                     [], .]
  = Algebra.Function.$fLiftElem2Day[]a
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2DoubleBoola
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2DoubleByteStringa
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2DoubleChara
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2DoubleDaya
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2DoubleDoublea
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2DoubleInta
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2DoubleIntegera
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2DoubleRelvara
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2DoubleTexta
instance Algebra.Function.LiftElem2 [GHC.Types.Double,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2DoubleUTCTimea
instance Algebra.Function.LiftElem2 [GHC.Types.Double, [], .]
  = Algebra.Function.$fLiftElem2Double[]a
instance Algebra.Function.LiftElem2 [GHC.Types.Int, GHC.Types.Bool,
                                     .]
  = Algebra.Function.$fLiftElem2IntBoola
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2IntByteStringa
instance Algebra.Function.LiftElem2 [GHC.Types.Int, GHC.Types.Char,
                                     .]
  = Algebra.Function.$fLiftElem2IntChara
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2IntDaya
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2IntDoublea
instance Algebra.Function.LiftElem2 [GHC.Types.Int, GHC.Types.Int,
                                     .]
  = Algebra.Function.$fLiftElem2IntInta
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2IntIntegera
instance Algebra.Function.LiftElem2 [GHC.Types.Int, Relvar.Relvar,
                                     .]
  = Algebra.Function.$fLiftElem2IntRelvara
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2IntTexta
instance Algebra.Function.LiftElem2 [GHC.Types.Int,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2IntUTCTimea
instance Algebra.Function.LiftElem2 [GHC.Types.Int, [], .]
  = Algebra.Function.$fLiftElem2Int[]a
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2IntegerBoola
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2IntegerByteStringa
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2IntegerChara
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2IntegerDaya
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2IntegerDoublea
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2IntegerInta
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2IntegerIntegera
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2IntegerRelvara
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2IntegerTexta
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2IntegerUTCTimea
instance Algebra.Function.LiftElem2 [GHC.Integer.Type.Integer, [],
                                     .]
  = Algebra.Function.$fLiftElem2Integer[]a
instance Algebra.Function.LiftElem2 [Relvar.Relvar, GHC.Types.Bool,
                                     .]
  = Algebra.Function.$fLiftElem2RelvarBoola
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2RelvarByteStringa
instance Algebra.Function.LiftElem2 [Relvar.Relvar, GHC.Types.Char,
                                     .]
  = Algebra.Function.$fLiftElem2RelvarChara
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2RelvarDaya
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2RelvarDoublea
instance Algebra.Function.LiftElem2 [Relvar.Relvar, GHC.Types.Int,
                                     .]
  = Algebra.Function.$fLiftElem2RelvarInta
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2RelvarIntegera
instance Algebra.Function.LiftElem2 [Relvar.Relvar, Relvar.Relvar,
                                     .]
  = Algebra.Function.$fLiftElem2RelvarRelvara
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2RelvarTexta
instance Algebra.Function.LiftElem2 [Relvar.Relvar,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2RelvarUTCTimea
instance Algebra.Function.LiftElem2 [Relvar.Relvar, [], .]
  = Algebra.Function.$fLiftElem2Relvar[]a
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2TextBoola
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2TextByteStringa
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2TextChara
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2TextDaya
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2TextDoublea
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2TextInta
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2TextIntegera
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2TextRelvara
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2TextTexta
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2TextUTCTimea
instance Algebra.Function.LiftElem2 [Data.Text.Internal.Text, [],
                                     .]
  = Algebra.Function.$fLiftElem2Text[]a
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2UTCTimeBoola
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2UTCTimeByteStringa
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2UTCTimeChara
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2UTCTimeDaya
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2UTCTimeDoublea
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2UTCTimeInta
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElem2UTCTimeIntegera
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2UTCTimeRelvara
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElem2UTCTimeTexta
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2UTCTimeUTCTimea
instance Algebra.Function.LiftElem2 [Data.Time.Clock.UTC.UTCTime,
                                     [], .]
  = Algebra.Function.$fLiftElem2UTCTime[]a
instance Algebra.Function.LiftElem2 [[], GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElem2[]Boola
instance Algebra.Function.LiftElem2 [[],
                                     Data.ByteString.Internal.ByteString, .]
  = Algebra.Function.$fLiftElem2[]ByteStringa
instance Algebra.Function.LiftElem2 [[], GHC.Types.Char, .]
  = Algebra.Function.$fLiftElem2[]Chara
instance Algebra.Function.LiftElem2 [[],
                                     Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElem2[]Daya
instance Algebra.Function.LiftElem2 [[], GHC.Types.Double, .]
  = Algebra.Function.$fLiftElem2[]Doublea
instance Algebra.Function.LiftElem2 [[], GHC.Types.Int, .]
  = Algebra.Function.$fLiftElem2[]Inta
instance Algebra.Function.LiftElem2 [[], GHC.Integer.Type.Integer,
                                     .]
  = Algebra.Function.$fLiftElem2[]Integera
instance Algebra.Function.LiftElem2 [[], Relvar.Relvar, .]
  = Algebra.Function.$fLiftElem2[]Relvara
instance Algebra.Function.LiftElem2 [[], Data.Text.Internal.Text,
                                     .]
  = Algebra.Function.$fLiftElem2[]Texta
instance Algebra.Function.LiftElem2 [[],
                                     Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElem2[]UTCTimea
instance Algebra.Function.LiftElem2 [[], [], .]
  = Algebra.Function.$fLiftElem2[][]a
instance Algebra.Function.LiftElem [GHC.Types.Bool, .]
  = Algebra.Function.$fLiftElemBoola
instance Algebra.Function.LiftElem [Data.ByteString.Internal.ByteString,
                                    .]
  = Algebra.Function.$fLiftElemByteStringa
instance Algebra.Function.LiftElem [GHC.Types.Char, .]
  = Algebra.Function.$fLiftElemChara
instance Algebra.Function.LiftElem [Data.Time.Calendar.Days.Day, .]
  = Algebra.Function.$fLiftElemDaya
instance Algebra.Function.LiftElem [GHC.Types.Double, .]
  = Algebra.Function.$fLiftElemDoublea
instance Algebra.Function.LiftElem [GHC.Types.Int, .]
  = Algebra.Function.$fLiftElemInta
instance Algebra.Function.LiftElem [GHC.Integer.Type.Integer, .]
  = Algebra.Function.$fLiftElemIntegera
instance Algebra.Function.LiftElem [Relvar.Relvar, .]
  = Algebra.Function.$fLiftElemRelvara
instance Algebra.Function.LiftElem [Data.Text.Internal.Text, .]
  = Algebra.Function.$fLiftElemTexta
instance Algebra.Function.LiftElem [Data.Time.Clock.UTC.UTCTime, .]
  = Algebra.Function.$fLiftElemUTCTimea
instance Algebra.Function.LiftElem [[], .]
  = Algebra.Function.$fLiftElem[]a
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Types.Bool
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemBoola_$cliftEl @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFunBool_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Types.Char
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemChara_$cliftEl @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFunChar_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Base.String
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem[]a_$cliftEl @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
  = Algebra.Function.$fBoolFun[]_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          Data.Text.Internal.Text
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemTexta_$cliftEl @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFunText_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Types.Int
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemInta_$cliftEl @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
  = Algebra.Function.$fBoolFunInt_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Integer.Type.Integer
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemIntegera_$cliftEl @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunInteger_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          GHC.Types.Double
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDoublea_$cliftEl @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunDouble_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          Data.Time.Calendar.Days.Day
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDaya_$cliftEl @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
  = Algebra.Function.$fBoolFunDay_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          Data.Time.Clock.UTC.UTCTime
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemUTCTimea_$cliftEl @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunUTCTime_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          Data.ByteString.Internal.ByteString
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemByteStringa_$cliftEl @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
  = Algebra.Function.$fBoolFunByteString_$s$cliftEl
"SPEC $cliftEl @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                          Relvar.Relvar
                                       $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemRelvara_$cliftEl @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunRelvar_$s$cliftEl
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemBoola_$cliftEl' @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFunBool_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemChara_$cliftEl' @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFunChar_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem[]a_$cliftEl' @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
  = Algebra.Function.$fBoolFun[]_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemTexta_$cliftEl' @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFunText_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemInta_$cliftEl' @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFunInt_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemIntegera_$cliftEl' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
  = Algebra.Function.$fBoolFunInteger_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDoublea_$cliftEl' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunDouble_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDaya_$cliftEl' @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFunDay_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemUTCTimea_$cliftEl' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
  = Algebra.Function.$fBoolFunUTCTime_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemByteStringa_$cliftEl' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
  = Algebra.Function.$fBoolFunByteString_$s$cliftEl'
"SPEC $cliftEl' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemRelvara_$cliftEl' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunRelvar_$s$cliftEl'
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolBoola_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2BoolBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolChara_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2BoolChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Bool[]a_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2Bool[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolTexta_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2BoolText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolInta_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2BoolInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolIntegera_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDoublea_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDaya_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2BoolDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Bool
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolRelvara_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharBoola_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2CharBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharChara_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2CharChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Char[]a_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2Char[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharTexta_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2CharText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharInta_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2CharInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharIntegera_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDoublea_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDaya_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2CharDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Char
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharRelvara_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Boola_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[]Bool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Chara_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[]Char_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[][]a_$cliftEl2 @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2[][]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Texta_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[]Text_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Inta_$cliftEl2 @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
                                               $dElementable2
  = Algebra.Function.$fBoolFun2[]Int_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Integera_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Integer_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Doublea_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Double_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Daya_$cliftEl2 @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
                                               $dElementable2
  = Algebra.Function.$fBoolFun2[]Day_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]UTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]ByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]ByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Base.String
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Relvara_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Relvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextBoola_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2TextBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextChara_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2TextChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Text[]a_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2Text[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextTexta_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2TextText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextInta_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2TextInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextIntegera_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDoublea_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDaya_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2TextDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Text.Internal.Text
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextRelvara_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntBoola_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntChara_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Int[]a_$cliftEl2 @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
                                               $dElementable2
  = Algebra.Function.$fBoolFun2Int[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntTexta_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntInta_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2IntInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntIntegera_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDoublea_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDaya_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2IntDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Int
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntRelvara_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerBoola_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntegerBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerChara_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntegerChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Integer[]a_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Integer[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerTexta_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntegerText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerInta_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerIntegera_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDoublea_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDaya_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Integer.Type.Integer
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerRelvara_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleBoola_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DoubleBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleChara_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DoubleChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Double[]a_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Double[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleTexta_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DoubleText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleInta_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleIntegera_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDoublea_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDaya_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           GHC.Types.Double
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleRelvara_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayBoola_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2DayBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayChara_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2DayChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Day[]a_$cliftEl2 @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
                                               $dElementable2
  = Algebra.Function.$fBoolFun2Day[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayTexta_$cliftEl2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2DayText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayInta_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2DayInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayIntegera_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDoublea_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDaya_$cliftEl2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2DayDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Calendar.Days.Day
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayRelvara_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeChara_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTime[]a_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftEl2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeInta_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.Time.Clock.UTC.UTCTime
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringBoola_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringChara_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteString[]a_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2ByteString[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringTexta_$cliftEl2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringInta_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftEl2 @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftEl2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDaya_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                              $dElementable
                                                              $dElementable1
                                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Data.ByteString.Internal.ByteString
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftEl2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarBoola_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2RelvarBool_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarChara_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2RelvarChar_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Base.String
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Relvar[]a_$cliftEl2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Relvar[]_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable Data.Text.Internal.Text
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarTexta_$cliftEl2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2RelvarText_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarInta_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInt_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarIntegera_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDoublea_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDaya_$cliftEl2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDay_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftEl2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftEl2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftEl2
"SPEC $cliftEl2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                           Relvar.Relvar
                                        $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                        $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarRelvara_$cliftEl2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftEl2
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolBoola_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2BoolBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolChara_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2BoolChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Bool[]a_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2Bool[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolTexta_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2BoolText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolInta_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2BoolInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolIntegera_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2BoolInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDoublea_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDaya_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2BoolDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2BoolByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolRelvara_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharBoola_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2CharBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharChara_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2CharChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Char[]a_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2Char[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharTexta_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2CharText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharInta_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2CharInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharIntegera_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2CharInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDoublea_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDaya_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2CharDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2CharByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharRelvara_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Boola_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[]Bool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Chara_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[]Char_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[][]a_$cliftEl2' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
                                               $dElementable2
  = Algebra.Function.$fBoolFun2[][]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Texta_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[]Text_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Inta_$cliftEl2' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[]Int_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Integera_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2[]Integer_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Doublea_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Double_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Daya_$cliftEl2' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[]Day_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]UTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]ByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2[]ByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Relvara_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Relvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextBoola_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2TextBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextChara_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2TextChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Text[]a_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2Text[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextTexta_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2TextText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextInta_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2TextInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextIntegera_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2TextInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDoublea_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDaya_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2TextDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2TextByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextRelvara_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntBoola_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2IntBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntChara_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2IntChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Int[]a_$cliftEl2' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2Int[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntTexta_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2IntText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntInta_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntIntegera_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDoublea_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDaya_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntRelvara_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerBoola_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntegerBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerChara_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntegerChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Integer[]a_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2Integer[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerTexta_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntegerText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerInta_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerIntegera_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDoublea_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDaya_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerRelvara_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleBoola_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DoubleBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleChara_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DoubleChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Double[]a_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Double[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleTexta_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DoubleText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleInta_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleIntegera_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDoublea_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDaya_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleRelvara_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayBoola_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2DayBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayChara_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2DayChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Day[]a_$cliftEl2' @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2Day[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayTexta_$cliftEl2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2DayText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayInta_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2DayInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayIntegera_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DayInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDoublea_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDaya_$cliftEl2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2DayDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2DayByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayRelvara_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeChara_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTime[]a_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftEl2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeInta_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringBoola_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringChara_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteString[]a_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2ByteString[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringTexta_$cliftEl2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringInta_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftEl2' @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftEl2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDaya_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                               $dElementable
                                                               $dElementable1
                                                               $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftEl2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarBoola_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2RelvarBool_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarChara_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2RelvarChar_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Base.String
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Relvar[]a_$cliftEl2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Relvar[]_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarTexta_$cliftEl2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2RelvarText_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarInta_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInt_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarIntegera_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDoublea_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDaya_$cliftEl2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDay_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftEl2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftEl2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftEl2'
"SPEC $cliftEl2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                         $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarRelvara_$cliftEl2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftEl2'
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Bool
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemBoola_$cliftLeft @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunBool_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Char
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemChara_$cliftLeft @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunChar_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Base.String
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem[]a_$cliftLeft @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
  = Algebra.Function.$fBoolFun[]_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Text.Internal.Text
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemTexta_$cliftLeft @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunText_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Int
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemInta_$cliftLeft @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFunInt_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Integer.Type.Integer
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemIntegera_$cliftLeft @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
  = Algebra.Function.$fBoolFunInteger_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            GHC.Types.Double
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDoublea_$cliftLeft @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
  = Algebra.Function.$fBoolFunDouble_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Calendar.Days.Day
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDaya_$cliftLeft @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFunDay_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.Time.Clock.UTC.UTCTime
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemUTCTimea_$cliftLeft @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
  = Algebra.Function.$fBoolFunUTCTime_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Data.ByteString.Internal.ByteString
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemByteStringa_$cliftLeft @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
  = Algebra.Function.$fBoolFunByteString_$s$cliftLeft
"SPEC $cliftLeft @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                            Relvar.Relvar
                                         $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemRelvara_$cliftLeft @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
  = Algebra.Function.$fBoolFunRelvar_$s$cliftLeft
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemBoola_$cliftLeft' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunBool_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemChara_$cliftLeft' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunChar_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem[]a_$cliftLeft' @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
  = Algebra.Function.$fBoolFun[]_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemTexta_$cliftLeft' @ GHC.Types.Bool
                                               $dElementable
                                               $dElementable1
  = Algebra.Function.$fBoolFunText_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemInta_$cliftLeft' @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunInt_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemIntegera_$cliftLeft' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
  = Algebra.Function.$fBoolFunInteger_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDoublea_$cliftLeft' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
  = Algebra.Function.$fBoolFunDouble_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDaya_$cliftLeft' @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
  = Algebra.Function.$fBoolFunDay_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemUTCTimea_$cliftLeft' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
  = Algebra.Function.$fBoolFunUTCTime_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemByteStringa_$cliftLeft' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
  = Algebra.Function.$fBoolFunByteString_$s$cliftLeft'
"SPEC $cliftLeft' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemRelvara_$cliftLeft' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
  = Algebra.Function.$fBoolFunRelvar_$s$cliftLeft'
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolBoola_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolChara_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Bool[]a_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Bool[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolTexta_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolInta_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2BoolInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2BoolDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDaya_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2BoolDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2BoolByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Bool
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharBoola_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharChara_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Char[]a_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Char[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharTexta_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharInta_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2CharInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2CharDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDaya_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2CharDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2CharByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Char
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2CharRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Boola_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Bool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Chara_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Char_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[][]a_$cliftLeft2 @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2[][]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Texta_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Text_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Inta_$cliftLeft2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[]Int_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Integera_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]Integer_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Doublea_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2[]Double_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Daya_$cliftLeft2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[]Day_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]UTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]ByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2[]ByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Base.String
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Relvara_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2[]Relvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextBoola_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextChara_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Text[]a_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Text[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextTexta_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextInta_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2TextInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2TextDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDaya_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2TextDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2TextByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Text.Internal.Text
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2TextRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntBoola_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntChara_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Int[]a_$cliftLeft2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2Int[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntTexta_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntInta_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2IntInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDaya_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2IntDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Int
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2IntRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerBoola_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerChara_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Integer[]a_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2Integer[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerTexta_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerInta_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDaya_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Integer.Type.Integer
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleBoola_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleChara_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Double[]a_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2Double[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleTexta_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleInta_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDaya_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             GHC.Types.Double
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayBoola_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayChara_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Day[]a_$cliftLeft2 @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2Day[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayTexta_$cliftLeft2 @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayInta_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2DayInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DayDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDaya_$cliftLeft2 @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2DayDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2DayByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Calendar.Days.Day
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2DayRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeChara_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTime[]a_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftLeft2 @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeInta_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.Time.Clock.UTC.UTCTime
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringBoola_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringChara_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteString[]a_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2ByteString[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringTexta_$cliftLeft2 @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringInta_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDaya_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                                $dElementable
                                                                $dElementable1
                                                                $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Data.ByteString.Internal.ByteString
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarBoola_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarBool_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarChara_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarChar_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Base.String
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Relvar[]a_$cliftLeft2 @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2Relvar[]_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarTexta_$cliftLeft2 @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarText_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarInta_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInt_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarIntegera_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDoublea_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDaya_$cliftLeft2 @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDay_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftLeft2 @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftLeft2 @ GHC.Types.Bool
                                                            $dElementable
                                                            $dElementable1
                                                            $dElementable2
  = Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftLeft2
"SPEC $cliftLeft2 @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                             Relvar.Relvar
                                          $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                          $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarRelvara_$cliftLeft2 @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftLeft2
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolBoola_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolChara_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Bool[]a_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Bool[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolTexta_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2BoolText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolInta_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDaya_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2BoolDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2BoolByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Bool
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharBoola_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharChara_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Char[]a_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Char[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharTexta_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2CharText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharInta_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDaya_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2CharDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2CharByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Char
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Boola_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Bool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Chara_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Char_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[][]a_$cliftLeft2' @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2[][]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Texta_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2[]Text_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Inta_$cliftLeft2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Int_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Integera_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]Integer_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Doublea_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]Double_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Daya_$cliftLeft2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2[]Day_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]UTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]UTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]ByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2[]ByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Base.String
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Relvara_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]Relvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextBoola_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextChara_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Text[]a_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2Text[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextTexta_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2TextText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextInta_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDaya_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2TextDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2TextByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Text.Internal.Text
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntBoola_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntChara_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Int[]a_$cliftLeft2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Int[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntTexta_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2IntText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntInta_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDaya_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2IntDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Int
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerBoola_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerChara_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Integer[]a_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2Integer[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerTexta_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2IntegerText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerInta_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDaya_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                              $dElementable
                                                              $dElementable1
                                                              $dElementable2
  = Algebra.Function.$fBoolFun2IntegerByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Integer.Type.Integer
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleBoola_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleChara_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Double[]a_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2Double[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleTexta_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DoubleText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleInta_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDaya_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2DoubleByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              GHC.Types.Double
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayBoola_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayChara_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Day[]a_$cliftLeft2' @ GHC.Types.Bool
                                                  $dElementable
                                                  $dElementable1
                                                  $dElementable2
  = Algebra.Function.$fBoolFun2Day[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayTexta_$cliftLeft2' @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2DayText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayInta_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDaya_$cliftLeft2' @ GHC.Types.Bool
                                                   $dElementable
                                                   $dElementable1
                                                   $dElementable2
  = Algebra.Function.$fBoolFun2DayDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2DayByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Calendar.Days.Day
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeBoola_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeChara_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTime[]a_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2UTCTime[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeTexta_$cliftLeft2' @ GHC.Types.Bool
                                                        $dElementable
                                                        $dElementable1
                                                        $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeInta_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDaya_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                              $dElementable
                                                              $dElementable1
                                                              $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.Time.Clock.UTC.UTCTime
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringBoola_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringChara_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteString[]a_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2ByteString[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringTexta_$cliftLeft2' @ GHC.Types.Bool
                                                           $dElementable
                                                           $dElementable1
                                                           $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringInta_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                              $dElementable
                                                              $dElementable1
                                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDaya_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                              $dElementable
                                                              $dElementable1
                                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                                 $dElementable
                                                                 $dElementable1
                                                                 $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Data.ByteString.Internal.ByteString
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringRelvar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarBoola_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarBool_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarChara_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarChar_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable GHC.Base.String
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Relvar[]a_$cliftLeft2' @ GHC.Types.Bool
                                                     $dElementable
                                                     $dElementable1
                                                     $dElementable2
  = Algebra.Function.$fBoolFun2Relvar[]_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Text.Internal.Text
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarTexta_$cliftLeft2' @ GHC.Types.Bool
                                                       $dElementable
                                                       $dElementable1
                                                       $dElementable2
  = Algebra.Function.$fBoolFun2RelvarText_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarInta_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInt_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable
                                                               GHC.Integer.Type.Integer
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarIntegera_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInteger_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable GHC.Types.Double
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDoublea_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDouble_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Calendar.Days.Day
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDaya_$cliftLeft2' @ GHC.Types.Bool
                                                      $dElementable
                                                      $dElementable1
                                                      $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDay_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.Time.Clock.UTC.UTCTime
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarUTCTimea_$cliftLeft2' @ GHC.Types.Bool
                                                          $dElementable
                                                          $dElementable1
                                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarUTCTime_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable
                                                               Data.ByteString.Internal.ByteString
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarByteStringa_$cliftLeft2' @ GHC.Types.Bool
                                                             $dElementable
                                                             $dElementable1
                                                             $dElementable2
  = Algebra.Function.$fBoolFun2RelvarByteString_$s$cliftLeft2'
"SPEC $cliftLeft2' @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                              Relvar.Relvar
                                           $dElementable1 :: Relvar.Elementable Relvar.Relvar
                                           $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarRelvara_$cliftLeft2' @ GHC.Types.Bool
                                                         $dElementable
                                                         $dElementable1
                                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarRelvar_$s$cliftLeft2'
"SPEC $fLiftElem2BoolBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Bool
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Bool
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolBoola @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolBool_$s$fLiftElem2BoolBoola
"SPEC $fLiftElem2BoolByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            GHC.Types.Bool
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.ByteString.Internal.ByteString
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolByteStringa @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2BoolByteString_$s$fLiftElem2BoolByteStringa
"SPEC $fLiftElem2BoolChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Bool
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Char
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolChara @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolChar_$s$fLiftElem2BoolChara
"SPEC $fLiftElem2BoolDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Bool
                                                  $dElementable1 :: Relvar.Elementable
                                                                      Data.Time.Calendar.Days.Day
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDaya @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolDay_$s$fLiftElem2BoolDaya
"SPEC $fLiftElem2BoolDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Bool
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Double
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolDoublea @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2BoolDouble_$s$fLiftElem2BoolDoublea
"SPEC $fLiftElem2BoolInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Bool
                                                  $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolInta @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2BoolInt_$s$fLiftElem2BoolInta
"SPEC $fLiftElem2BoolIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Types.Bool
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Integer.Type.Integer
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolIntegera @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2BoolInteger_$s$fLiftElem2BoolIntegera
"SPEC $fLiftElem2BoolRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Bool
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Relvar.Relvar
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolRelvara @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2BoolRelvar_$s$fLiftElem2BoolRelvara
"SPEC $fLiftElem2BoolTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Bool
                                                   $dElementable1 :: Relvar.Elementable
                                                                       Data.Text.Internal.Text
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolTexta @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2BoolText_$s$fLiftElem2BoolTexta
"SPEC $fLiftElem2BoolUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Types.Bool
                                                      $dElementable1 :: Relvar.Elementable
                                                                          Data.Time.Clock.UTC.UTCTime
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2BoolUTCTimea @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2BoolUTCTime_$s$fLiftElem2BoolUTCTimea
"SPEC $fLiftElem2Bool[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Types.Bool
                                                 $dElementable1 :: Relvar.Elementable
                                                                     GHC.Base.String
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Bool[]a @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2Bool[]_$s$fLiftElem2Bool[]a
"SPEC $fLiftElem2ByteStringBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.ByteString.Internal.ByteString
                                                         $dElementable1 :: Relvar.Elementable
                                                                             GHC.Types.Bool
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringBoola @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringBool_$s$fLiftElem2ByteStringBoola
"SPEC $fLiftElem2ByteStringByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                                  Data.ByteString.Internal.ByteString
                                                               $dElementable1 :: Relvar.Elementable
                                                                                   Data.ByteString.Internal.ByteString
                                                               $dElementable2 :: Relvar.Elementable
                                                                                   GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringByteStringa @ GHC.Types.Bool
                                                    $dElementable
                                                    $dElementable1
                                                    $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringByteString_$s$fLiftElem2ByteStringByteStringa
"SPEC $fLiftElem2ByteStringChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.ByteString.Internal.ByteString
                                                         $dElementable1 :: Relvar.Elementable
                                                                             GHC.Types.Char
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringChara @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringChar_$s$fLiftElem2ByteStringChara
"SPEC $fLiftElem2ByteStringDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Data.ByteString.Internal.ByteString
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Data.Time.Calendar.Days.Day
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDaya @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDay_$s$fLiftElem2ByteStringDaya
"SPEC $fLiftElem2ByteStringDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                              Data.ByteString.Internal.ByteString
                                                           $dElementable1 :: Relvar.Elementable
                                                                               GHC.Types.Double
                                                           $dElementable2 :: Relvar.Elementable
                                                                               GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringDoublea @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringDouble_$s$fLiftElem2ByteStringDoublea
"SPEC $fLiftElem2ByteStringInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Data.ByteString.Internal.ByteString
                                                        $dElementable1 :: Relvar.Elementable
                                                                            GHC.Types.Int
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringInta @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInt_$s$fLiftElem2ByteStringInta
"SPEC $fLiftElem2ByteStringIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                               Data.ByteString.Internal.ByteString
                                                            $dElementable1 :: Relvar.Elementable
                                                                                GHC.Integer.Type.Integer
                                                            $dElementable2 :: Relvar.Elementable
                                                                                GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringIntegera @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringInteger_$s$fLiftElem2ByteStringIntegera
"SPEC $fLiftElem2ByteStringRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                              Data.ByteString.Internal.ByteString
                                                           $dElementable1 :: Relvar.Elementable
                                                                               Relvar.Relvar
                                                           $dElementable2 :: Relvar.Elementable
                                                                               GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringRelvara @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringRelvar_$s$fLiftElem2ByteStringRelvara
"SPEC $fLiftElem2ByteStringTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.ByteString.Internal.ByteString
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.Text.Internal.Text
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringTexta @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringText_$s$fLiftElem2ByteStringTexta
"SPEC $fLiftElem2ByteStringUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                               Data.ByteString.Internal.ByteString
                                                            $dElementable1 :: Relvar.Elementable
                                                                                Data.Time.Clock.UTC.UTCTime
                                                            $dElementable2 :: Relvar.Elementable
                                                                                GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteStringUTCTimea @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2ByteStringUTCTime_$s$fLiftElem2ByteStringUTCTimea
"SPEC $fLiftElem2ByteString[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          Data.ByteString.Internal.ByteString
                                                       $dElementable1 :: Relvar.Elementable
                                                                           GHC.Base.String
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2ByteString[]a @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2ByteString[]_$s$fLiftElem2ByteString[]a
"SPEC $fLiftElem2CharBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Char
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Bool
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharBoola @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharBool_$s$fLiftElem2CharBoola
"SPEC $fLiftElem2CharByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            GHC.Types.Char
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.ByteString.Internal.ByteString
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharByteStringa @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2CharByteString_$s$fLiftElem2CharByteStringa
"SPEC $fLiftElem2CharChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Char
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Char
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharChara @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharChar_$s$fLiftElem2CharChara
"SPEC $fLiftElem2CharDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Char
                                                  $dElementable1 :: Relvar.Elementable
                                                                      Data.Time.Calendar.Days.Day
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDaya @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharDay_$s$fLiftElem2CharDaya
"SPEC $fLiftElem2CharDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Char
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Double
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharDoublea @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2CharDouble_$s$fLiftElem2CharDoublea
"SPEC $fLiftElem2CharInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Char
                                                  $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharInta @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2CharInt_$s$fLiftElem2CharInta
"SPEC $fLiftElem2CharIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Types.Char
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Integer.Type.Integer
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharIntegera @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2CharInteger_$s$fLiftElem2CharIntegera
"SPEC $fLiftElem2CharRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Char
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Relvar.Relvar
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharRelvara @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2CharRelvar_$s$fLiftElem2CharRelvara
"SPEC $fLiftElem2CharTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Char
                                                   $dElementable1 :: Relvar.Elementable
                                                                       Data.Text.Internal.Text
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharTexta @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2CharText_$s$fLiftElem2CharTexta
"SPEC $fLiftElem2CharUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Types.Char
                                                      $dElementable1 :: Relvar.Elementable
                                                                          Data.Time.Clock.UTC.UTCTime
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2CharUTCTimea @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2CharUTCTime_$s$fLiftElem2CharUTCTimea
"SPEC $fLiftElem2Char[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Types.Char
                                                 $dElementable1 :: Relvar.Elementable
                                                                     GHC.Base.String
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Char[]a @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2Char[]_$s$fLiftElem2Char[]a
"SPEC $fLiftElem2DayBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     Data.Time.Calendar.Days.Day
                                                  $dElementable1 :: Relvar.Elementable
                                                                      GHC.Types.Bool
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayBoola @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayBool_$s$fLiftElem2DayBoola
"SPEC $fLiftElem2DayByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Data.Time.Calendar.Days.Day
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Data.ByteString.Internal.ByteString
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayByteStringa @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2DayByteString_$s$fLiftElem2DayByteStringa
"SPEC $fLiftElem2DayChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     Data.Time.Calendar.Days.Day
                                                  $dElementable1 :: Relvar.Elementable
                                                                      GHC.Types.Char
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayChara @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayChar_$s$fLiftElem2DayChara
"SPEC $fLiftElem2DayDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    Data.Time.Calendar.Days.Day
                                                 $dElementable1 :: Relvar.Elementable
                                                                     Data.Time.Calendar.Days.Day
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDaya @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayDay_$s$fLiftElem2DayDaya
"SPEC $fLiftElem2DayDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Data.Time.Calendar.Days.Day
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Types.Double
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayDoublea @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2DayDouble_$s$fLiftElem2DayDoublea
"SPEC $fLiftElem2DayInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    Data.Time.Calendar.Days.Day
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayInta @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2DayInt_$s$fLiftElem2DayInta
"SPEC $fLiftElem2DayIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Time.Calendar.Days.Day
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Integer.Type.Integer
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayIntegera @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2DayInteger_$s$fLiftElem2DayIntegera
"SPEC $fLiftElem2DayRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Data.Time.Calendar.Days.Day
                                                    $dElementable1 :: Relvar.Elementable
                                                                        Relvar.Relvar
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayRelvara @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2DayRelvar_$s$fLiftElem2DayRelvara
"SPEC $fLiftElem2DayTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     Data.Time.Calendar.Days.Day
                                                  $dElementable1 :: Relvar.Elementable
                                                                      Data.Text.Internal.Text
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayTexta @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2DayText_$s$fLiftElem2DayTexta
"SPEC $fLiftElem2DayUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Time.Calendar.Days.Day
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Time.Clock.UTC.UTCTime
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2DayUTCTimea @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2DayUTCTime_$s$fLiftElem2DayUTCTimea
"SPEC $fLiftElem2Day[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   Data.Time.Calendar.Days.Day
                                                $dElementable1 :: Relvar.Elementable GHC.Base.String
                                                $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Day[]a @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
                                     $dElementable2
  = Algebra.Function.$fBoolFun2Day[]_$s$fLiftElem2Day[]a
"SPEC $fLiftElem2DoubleBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Double
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Bool
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleBoola @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleBool_$s$fLiftElem2DoubleBoola
"SPEC $fLiftElem2DoubleByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                              GHC.Types.Double
                                                           $dElementable1 :: Relvar.Elementable
                                                                               Data.ByteString.Internal.ByteString
                                                           $dElementable2 :: Relvar.Elementable
                                                                               GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleByteStringa @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2DoubleByteString_$s$fLiftElem2DoubleByteStringa
"SPEC $fLiftElem2DoubleChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Double
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Char
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleChara @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleChar_$s$fLiftElem2DoubleChara
"SPEC $fLiftElem2DoubleDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Types.Double
                                                    $dElementable1 :: Relvar.Elementable
                                                                        Data.Time.Calendar.Days.Day
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDaya @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDay_$s$fLiftElem2DoubleDaya
"SPEC $fLiftElem2DoubleDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          GHC.Types.Double
                                                       $dElementable1 :: Relvar.Elementable
                                                                           GHC.Types.Double
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleDoublea @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2DoubleDouble_$s$fLiftElem2DoubleDoublea
"SPEC $fLiftElem2DoubleInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Types.Double
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Types.Int
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleInta @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInt_$s$fLiftElem2DoubleInta
"SPEC $fLiftElem2DoubleIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           GHC.Types.Double
                                                        $dElementable1 :: Relvar.Elementable
                                                                            GHC.Integer.Type.Integer
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleIntegera @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2DoubleInteger_$s$fLiftElem2DoubleIntegera
"SPEC $fLiftElem2DoubleRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          GHC.Types.Double
                                                       $dElementable1 :: Relvar.Elementable
                                                                           Relvar.Relvar
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleRelvara @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2DoubleRelvar_$s$fLiftElem2DoubleRelvara
"SPEC $fLiftElem2DoubleTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Double
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Text.Internal.Text
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleTexta @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2DoubleText_$s$fLiftElem2DoubleTexta
"SPEC $fLiftElem2DoubleUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           GHC.Types.Double
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Data.Time.Clock.UTC.UTCTime
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2DoubleUTCTimea @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2DoubleUTCTime_$s$fLiftElem2DoubleUTCTimea
"SPEC $fLiftElem2Double[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Types.Double
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Base.String
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2Double[]a @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2Double[]_$s$fLiftElem2Double[]a
"SPEC $fLiftElem2IntBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Int
                                                  $dElementable1 :: Relvar.Elementable
                                                                      GHC.Types.Bool
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntBoola @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntBool_$s$fLiftElem2IntBoola
"SPEC $fLiftElem2IntByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           GHC.Types.Int
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Data.ByteString.Internal.ByteString
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntByteStringa @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2IntByteString_$s$fLiftElem2IntByteStringa
"SPEC $fLiftElem2IntChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Int
                                                  $dElementable1 :: Relvar.Elementable
                                                                      GHC.Types.Char
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntChara @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntChar_$s$fLiftElem2IntChara
"SPEC $fLiftElem2IntDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Types.Int
                                                 $dElementable1 :: Relvar.Elementable
                                                                     Data.Time.Calendar.Days.Day
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDaya @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntDay_$s$fLiftElem2IntDaya
"SPEC $fLiftElem2IntDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Types.Int
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Types.Double
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntDoublea @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntDouble_$s$fLiftElem2IntDoublea
"SPEC $fLiftElem2IntInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Types.Int
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntInta @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2IntInt_$s$fLiftElem2IntInta
"SPEC $fLiftElem2IntIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Int
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Integer.Type.Integer
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntIntegera @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntInteger_$s$fLiftElem2IntIntegera
"SPEC $fLiftElem2IntRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Types.Int
                                                    $dElementable1 :: Relvar.Elementable
                                                                        Relvar.Relvar
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntRelvara @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2IntRelvar_$s$fLiftElem2IntRelvara
"SPEC $fLiftElem2IntTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     GHC.Types.Int
                                                  $dElementable1 :: Relvar.Elementable
                                                                      Data.Text.Internal.Text
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntTexta @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2IntText_$s$fLiftElem2IntTexta
"SPEC $fLiftElem2IntUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Types.Int
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Time.Clock.UTC.UTCTime
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntUTCTimea @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntUTCTime_$s$fLiftElem2IntUTCTimea
"SPEC $fLiftElem2Int[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   GHC.Types.Int
                                                $dElementable1 :: Relvar.Elementable GHC.Base.String
                                                $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Int[]a @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
                                     $dElementable2
  = Algebra.Function.$fBoolFun2Int[]_$s$fLiftElem2Int[]a
"SPEC $fLiftElem2IntegerBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Integer.Type.Integer
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Types.Bool
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerBoola @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerBool_$s$fLiftElem2IntegerBoola
"SPEC $fLiftElem2IntegerByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                               GHC.Integer.Type.Integer
                                                            $dElementable1 :: Relvar.Elementable
                                                                                Data.ByteString.Internal.ByteString
                                                            $dElementable2 :: Relvar.Elementable
                                                                                GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerByteStringa @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2IntegerByteString_$s$fLiftElem2IntegerByteStringa
"SPEC $fLiftElem2IntegerChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Integer.Type.Integer
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Types.Char
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerChara @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerChar_$s$fLiftElem2IntegerChara
"SPEC $fLiftElem2IntegerDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Integer.Type.Integer
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Time.Calendar.Days.Day
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDaya @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDay_$s$fLiftElem2IntegerDaya
"SPEC $fLiftElem2IntegerDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           GHC.Integer.Type.Integer
                                                        $dElementable1 :: Relvar.Elementable
                                                                            GHC.Types.Double
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerDoublea @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2IntegerDouble_$s$fLiftElem2IntegerDoublea
"SPEC $fLiftElem2IntegerInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        GHC.Integer.Type.Integer
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Int
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerInta @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInt_$s$fLiftElem2IntegerInta
"SPEC $fLiftElem2IntegerIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            GHC.Integer.Type.Integer
                                                         $dElementable1 :: Relvar.Elementable
                                                                             GHC.Integer.Type.Integer
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerIntegera @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2IntegerInteger_$s$fLiftElem2IntegerIntegera
"SPEC $fLiftElem2IntegerRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           GHC.Integer.Type.Integer
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Relvar.Relvar
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerRelvara @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2IntegerRelvar_$s$fLiftElem2IntegerRelvara
"SPEC $fLiftElem2IntegerTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         GHC.Integer.Type.Integer
                                                      $dElementable1 :: Relvar.Elementable
                                                                          Data.Text.Internal.Text
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerTexta @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2IntegerText_$s$fLiftElem2IntegerTexta
"SPEC $fLiftElem2IntegerUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            GHC.Integer.Type.Integer
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.Time.Clock.UTC.UTCTime
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2IntegerUTCTimea @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2IntegerUTCTime_$s$fLiftElem2IntegerUTCTimea
"SPEC $fLiftElem2Integer[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Integer.Type.Integer
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Base.String
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2Integer[]a @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2Integer[]_$s$fLiftElem2Integer[]a
"SPEC $fLiftElem2RelvarBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Relvar.Relvar
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Bool
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarBoola @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarBool_$s$fLiftElem2RelvarBoola
"SPEC $fLiftElem2RelvarByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                              Relvar.Relvar
                                                           $dElementable1 :: Relvar.Elementable
                                                                               Data.ByteString.Internal.ByteString
                                                           $dElementable2 :: Relvar.Elementable
                                                                               GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarByteStringa @ GHC.Types.Bool
                                                $dElementable
                                                $dElementable1
                                                $dElementable2
  = Algebra.Function.$fBoolFun2RelvarByteString_$s$fLiftElem2RelvarByteStringa
"SPEC $fLiftElem2RelvarChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Relvar.Relvar
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Char
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarChara @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarChar_$s$fLiftElem2RelvarChara
"SPEC $fLiftElem2RelvarDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Relvar.Relvar
                                                    $dElementable1 :: Relvar.Elementable
                                                                        Data.Time.Calendar.Days.Day
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDaya @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDay_$s$fLiftElem2RelvarDaya
"SPEC $fLiftElem2RelvarDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          Relvar.Relvar
                                                       $dElementable1 :: Relvar.Elementable
                                                                           GHC.Types.Double
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarDoublea @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2RelvarDouble_$s$fLiftElem2RelvarDoublea
"SPEC $fLiftElem2RelvarInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Relvar.Relvar
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Types.Int
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarInta @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInt_$s$fLiftElem2RelvarInta
"SPEC $fLiftElem2RelvarIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Relvar.Relvar
                                                        $dElementable1 :: Relvar.Elementable
                                                                            GHC.Integer.Type.Integer
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarIntegera @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2RelvarInteger_$s$fLiftElem2RelvarIntegera
"SPEC $fLiftElem2RelvarRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          Relvar.Relvar
                                                       $dElementable1 :: Relvar.Elementable
                                                                           Relvar.Relvar
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarRelvara @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2RelvarRelvar_$s$fLiftElem2RelvarRelvara
"SPEC $fLiftElem2RelvarTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Relvar.Relvar
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Text.Internal.Text
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarTexta @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2RelvarText_$s$fLiftElem2RelvarTexta
"SPEC $fLiftElem2RelvarUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Relvar.Relvar
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Data.Time.Clock.UTC.UTCTime
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2RelvarUTCTimea @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2RelvarUTCTime_$s$fLiftElem2RelvarUTCTimea
"SPEC $fLiftElem2Relvar[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      Relvar.Relvar
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Base.String
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2Relvar[]a @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2Relvar[]_$s$fLiftElem2Relvar[]a
"SPEC $fLiftElem2TextBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      Data.Text.Internal.Text
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Bool
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextBoola @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextBool_$s$fLiftElem2TextBoola
"SPEC $fLiftElem2TextByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.Text.Internal.Text
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.ByteString.Internal.ByteString
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextByteStringa @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2TextByteString_$s$fLiftElem2TextByteStringa
"SPEC $fLiftElem2TextChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      Data.Text.Internal.Text
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Char
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextChara @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextChar_$s$fLiftElem2TextChara
"SPEC $fLiftElem2TextDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     Data.Text.Internal.Text
                                                  $dElementable1 :: Relvar.Elementable
                                                                      Data.Time.Calendar.Days.Day
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDaya @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextDay_$s$fLiftElem2TextDaya
"SPEC $fLiftElem2TextDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Text.Internal.Text
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Double
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextDoublea @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2TextDouble_$s$fLiftElem2TextDoublea
"SPEC $fLiftElem2TextInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                     Data.Text.Internal.Text
                                                  $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                  $dElementable2 :: Relvar.Elementable
                                                                      GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextInta @ GHC.Types.Bool
                                       $dElementable
                                       $dElementable1
                                       $dElementable2
  = Algebra.Function.$fBoolFun2TextInt_$s$fLiftElem2TextInta
"SPEC $fLiftElem2TextIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         Data.Text.Internal.Text
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Integer.Type.Integer
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextIntegera @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2TextInteger_$s$fLiftElem2TextIntegera
"SPEC $fLiftElem2TextRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Text.Internal.Text
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Relvar.Relvar
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextRelvara @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2TextRelvar_$s$fLiftElem2TextRelvara
"SPEC $fLiftElem2TextTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      Data.Text.Internal.Text
                                                   $dElementable1 :: Relvar.Elementable
                                                                       Data.Text.Internal.Text
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextTexta @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2TextText_$s$fLiftElem2TextTexta
"SPEC $fLiftElem2TextUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         Data.Text.Internal.Text
                                                      $dElementable1 :: Relvar.Elementable
                                                                          Data.Time.Clock.UTC.UTCTime
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2TextUTCTimea @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2TextUTCTime_$s$fLiftElem2TextUTCTimea
"SPEC $fLiftElem2Text[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    Data.Text.Internal.Text
                                                 $dElementable1 :: Relvar.Elementable
                                                                     GHC.Base.String
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2Text[]a @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2Text[]_$s$fLiftElem2Text[]a
"SPEC $fLiftElem2UTCTimeBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         Data.Time.Clock.UTC.UTCTime
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Types.Bool
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeBoola @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeBool_$s$fLiftElem2UTCTimeBoola
"SPEC $fLiftElem2UTCTimeByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                               Data.Time.Clock.UTC.UTCTime
                                                            $dElementable1 :: Relvar.Elementable
                                                                                Data.ByteString.Internal.ByteString
                                                            $dElementable2 :: Relvar.Elementable
                                                                                GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeByteStringa @ GHC.Types.Bool
                                                 $dElementable
                                                 $dElementable1
                                                 $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeByteString_$s$fLiftElem2UTCTimeByteStringa
"SPEC $fLiftElem2UTCTimeChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         Data.Time.Clock.UTC.UTCTime
                                                      $dElementable1 :: Relvar.Elementable
                                                                          GHC.Types.Char
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeChara @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeChar_$s$fLiftElem2UTCTimeChara
"SPEC $fLiftElem2UTCTimeDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Time.Clock.UTC.UTCTime
                                                     $dElementable1 :: Relvar.Elementable
                                                                         Data.Time.Calendar.Days.Day
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDaya @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDay_$s$fLiftElem2UTCTimeDaya
"SPEC $fLiftElem2UTCTimeDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Data.Time.Clock.UTC.UTCTime
                                                        $dElementable1 :: Relvar.Elementable
                                                                            GHC.Types.Double
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeDoublea @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeDouble_$s$fLiftElem2UTCTimeDoublea
"SPEC $fLiftElem2UTCTimeInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                        Data.Time.Clock.UTC.UTCTime
                                                     $dElementable1 :: Relvar.Elementable
                                                                         GHC.Types.Int
                                                     $dElementable2 :: Relvar.Elementable
                                                                         GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeInta @ GHC.Types.Bool
                                          $dElementable
                                          $dElementable1
                                          $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInt_$s$fLiftElem2UTCTimeInta
"SPEC $fLiftElem2UTCTimeIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.Time.Clock.UTC.UTCTime
                                                         $dElementable1 :: Relvar.Elementable
                                                                             GHC.Integer.Type.Integer
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeIntegera @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeInteger_$s$fLiftElem2UTCTimeIntegera
"SPEC $fLiftElem2UTCTimeRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                           Data.Time.Clock.UTC.UTCTime
                                                        $dElementable1 :: Relvar.Elementable
                                                                            Relvar.Relvar
                                                        $dElementable2 :: Relvar.Elementable
                                                                            GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeRelvara @ GHC.Types.Bool
                                             $dElementable
                                             $dElementable1
                                             $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeRelvar_$s$fLiftElem2UTCTimeRelvara
"SPEC $fLiftElem2UTCTimeTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                         Data.Time.Clock.UTC.UTCTime
                                                      $dElementable1 :: Relvar.Elementable
                                                                          Data.Text.Internal.Text
                                                      $dElementable2 :: Relvar.Elementable
                                                                          GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeTexta @ GHC.Types.Bool
                                           $dElementable
                                           $dElementable1
                                           $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeText_$s$fLiftElem2UTCTimeTexta
"SPEC $fLiftElem2UTCTimeUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                            Data.Time.Clock.UTC.UTCTime
                                                         $dElementable1 :: Relvar.Elementable
                                                                             Data.Time.Clock.UTC.UTCTime
                                                         $dElementable2 :: Relvar.Elementable
                                                                             GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTimeUTCTimea @ GHC.Types.Bool
                                              $dElementable
                                              $dElementable1
                                              $dElementable2
  = Algebra.Function.$fBoolFun2UTCTimeUTCTime_$s$fLiftElem2UTCTimeUTCTimea
"SPEC $fLiftElem2UTCTime[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Data.Time.Clock.UTC.UTCTime
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Base.String
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2UTCTime[]a @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2UTCTime[]_$s$fLiftElem2UTCTime[]a
"SPEC $fLiftElem2[]Boola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Base.String
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Bool
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Boola @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]Bool_$s$fLiftElem2[]Boola
"SPEC $fLiftElem2[]ByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                          GHC.Base.String
                                                       $dElementable1 :: Relvar.Elementable
                                                                           Data.ByteString.Internal.ByteString
                                                       $dElementable2 :: Relvar.Elementable
                                                                           GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]ByteStringa @ GHC.Types.Bool
                                            $dElementable
                                            $dElementable1
                                            $dElementable2
  = Algebra.Function.$fBoolFun2[]ByteString_$s$fLiftElem2[]ByteStringa
"SPEC $fLiftElem2[]Chara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Base.String
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Char
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Chara @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]Char_$s$fLiftElem2[]Chara
"SPEC $fLiftElem2[]Daya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   GHC.Base.String
                                                $dElementable1 :: Relvar.Elementable
                                                                    Data.Time.Calendar.Days.Day
                                                $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Daya @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]Day_$s$fLiftElem2[]Daya
"SPEC $fLiftElem2[]Doublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Base.String
                                                   $dElementable1 :: Relvar.Elementable
                                                                       GHC.Types.Double
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Doublea @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2[]Double_$s$fLiftElem2[]Doublea
"SPEC $fLiftElem2[]Inta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   GHC.Base.String
                                                $dElementable1 :: Relvar.Elementable GHC.Types.Int
                                                $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Inta @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
                                     $dElementable2
  = Algebra.Function.$fBoolFun2[]Int_$s$fLiftElem2[]Inta
"SPEC $fLiftElem2[]Integera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Base.String
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Integer.Type.Integer
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Integera @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2[]Integer_$s$fLiftElem2[]Integera
"SPEC $fLiftElem2[]Relvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                      GHC.Base.String
                                                   $dElementable1 :: Relvar.Elementable
                                                                       Relvar.Relvar
                                                   $dElementable2 :: Relvar.Elementable
                                                                       GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Relvara @ GHC.Types.Bool
                                        $dElementable
                                        $dElementable1
                                        $dElementable2
  = Algebra.Function.$fBoolFun2[]Relvar_$s$fLiftElem2[]Relvara
"SPEC $fLiftElem2[]Texta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Base.String
                                                 $dElementable1 :: Relvar.Elementable
                                                                     Data.Text.Internal.Text
                                                 $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]Texta @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
                                      $dElementable2
  = Algebra.Function.$fBoolFun2[]Text_$s$fLiftElem2[]Texta
"SPEC $fLiftElem2[]UTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       GHC.Base.String
                                                    $dElementable1 :: Relvar.Elementable
                                                                        Data.Time.Clock.UTC.UTCTime
                                                    $dElementable2 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElem2[]UTCTimea @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
                                         $dElementable2
  = Algebra.Function.$fBoolFun2[]UTCTime_$s$fLiftElem2[]UTCTimea
"SPEC $fLiftElem2[][]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                  GHC.Base.String
                                               $dElementable1 :: Relvar.Elementable GHC.Base.String
                                               $dElementable2 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem2[][]a @ GHC.Types.Bool
                                    $dElementable
                                    $dElementable1
                                    $dElementable2
  = Algebra.Function.$fBoolFun2[][]_$s$fLiftElem2[][]a
"SPEC $fLiftElemBoola @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                 GHC.Types.Bool
                                              $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemBoola @ GHC.Types.Bool
                                   $dElementable
                                   $dElementable1
  = Algebra.Function.$fBoolFunBool_$s$fLiftElemBoola
"SPEC $fLiftElemByteStringa @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                       Data.ByteString.Internal.ByteString
                                                    $dElementable1 :: Relvar.Elementable
                                                                        GHC.Types.Bool
  Algebra.Function.$fLiftElemByteStringa @ GHC.Types.Bool
                                         $dElementable
                                         $dElementable1
  = Algebra.Function.$fBoolFunByteString_$s$fLiftElemByteStringa
"SPEC $fLiftElemChara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                 GHC.Types.Char
                                              $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemChara @ GHC.Types.Bool
                                   $dElementable
                                   $dElementable1
  = Algebra.Function.$fBoolFunChar_$s$fLiftElemChara
"SPEC $fLiftElemDaya @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                Data.Time.Calendar.Days.Day
                                             $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDaya @ GHC.Types.Bool
                                  $dElementable
                                  $dElementable1
  = Algebra.Function.$fBoolFunDay_$s$fLiftElemDaya
"SPEC $fLiftElemDoublea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   GHC.Types.Double
                                                $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemDoublea @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
  = Algebra.Function.$fBoolFunDouble_$s$fLiftElemDoublea
"SPEC $fLiftElemInta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                GHC.Types.Int
                                             $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemInta @ GHC.Types.Bool
                                  $dElementable
                                  $dElementable1
  = Algebra.Function.$fBoolFunInt_$s$fLiftElemInta
"SPEC $fLiftElemIntegera @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    GHC.Integer.Type.Integer
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemIntegera @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
  = Algebra.Function.$fBoolFunInteger_$s$fLiftElemIntegera
"SPEC $fLiftElemRelvara @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                   Relvar.Relvar
                                                $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemRelvara @ GHC.Types.Bool
                                     $dElementable
                                     $dElementable1
  = Algebra.Function.$fBoolFunRelvar_$s$fLiftElemRelvara
"SPEC $fLiftElemTexta @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                 Data.Text.Internal.Text
                                              $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemTexta @ GHC.Types.Bool
                                   $dElementable
                                   $dElementable1
  = Algebra.Function.$fBoolFunText_$s$fLiftElemTexta
"SPEC $fLiftElemUTCTimea @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                                    Data.Time.Clock.UTC.UTCTime
                                                 $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElemUTCTimea @ GHC.Types.Bool
                                      $dElementable
                                      $dElementable1
  = Algebra.Function.$fBoolFunUTCTime_$s$fLiftElemUTCTimea
"SPEC $fLiftElem[]a @ Bool" [ALWAYS] forall $dElementable :: Relvar.Elementable
                                                               GHC.Base.String
                                            $dElementable1 :: Relvar.Elementable GHC.Types.Bool
  Algebra.Function.$fLiftElem[]a @ GHC.Types.Bool
                                 $dElementable
                                 $dElementable1
  = Algebra.Function.$fBoolFun[]_$s$fLiftElem[]a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

