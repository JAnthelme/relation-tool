
==================== FINAL INTERFACE ====================
2016-09-03 15:13:50.96148 UTC

interface relat_8Cyn3M6UKgN11sASBif9n4:Relvar 7103
  interface hash: 0a7a75e50c0ba8bf6b44d092793e15f4
  ABI hash: c43138de2e31a037b92dfb3f1ff8bcdd
  export-list hash: c77214d0a1ae15d1167f75a2836fdb82
  orphan hash: 97db485c220a1bfbc49de4f9fec5379f
  flag hash: 43ecda815ba7b45729e1439ec8bb3746
  sig of: Nothing
  used TH splices: False
  where
exports:
  Relvar.card
  Relvar.common
  Relvar.dee
  Relvar.dum
  Relvar.elems
  Relvar.elems'
  Relvar.keepLeft
  Relvar.keepRight
  Relvar.relvar
  Relvar.table
  Relvar.tyA
  Relvar.tyB
  Relvar.tyBS
  Relvar.tyC
  Relvar.tyD
  Relvar.tyDD
  Relvar.tyDT
  Relvar.tyI
  Relvar.tyJ
  Relvar.tyR
  Relvar.tyS
  Relvar.tyT
  Relvar.tyT2
  Relvar.tyT3
  Relvar.tyZ
  Relvar.typeRep
  Relvar.types
  Relvar.types'
  Data.Typeable.Internal.TypeRep
  Relvar.Attributes
  Relvar.ColOrder{Relvar.Asc Relvar.Desc}
  Relvar.Elem{Relvar.A Relvar.B Relvar.BS Relvar.C Relvar.D Relvar.DD Relvar.DT Relvar.DW Relvar.I Relvar.J Relvar.Nil Relvar.R Relvar.S Relvar.T Relvar.T2 Relvar.T3}
  Relvar.Elementable{Relvar.fromElem Relvar.toElem}
  Relvar.Relvar{Relvar.Relvar Relvar.attributes Relvar.rdata}
  Relvar.Row
  Relvar.Table{Relvar.Table Relvar.header Relvar.tdata}
  Relvar.LSet.LabelOp|{Relvar.LSet.compatible Relvar.LSet.degree Relvar.LSet.disjoint Relvar.LSet.labels Relvar.LSet.match Relvar.LSet.rename}
module dependencies: Relvar.LSet
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6*
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne*
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Data.Typeable c3fcb0780ec05399195ad3277b18d294
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString a7dd1816d7b9a73f13bb7af0c321dca4
import  -/  bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Internal dfa34e211eb5d18268ce7a397234e851
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map 1800ccac43fd924c376b60eac12f4d04
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 681af891dffe392ee938c8b49d69f236
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  Relvar.LSet e65ac2554d77b7defb57213d61690388
  exports: e67b13b4f199227347786d8a9c9bc6fd
  LSet 345814e35acf273ee5c610ab1f5e7385
  LabelOp 76e67cc010cf6f98b6fe752a5ba99c96
  checkLabels e36d687aeae4a0bd4216efa67bc12206
  common 32b6b9d5d425d6d66c87d33ddbe341bb
  compatible 73c6c14445e4ab5e4a21fefbfa5ebe44
  degree 5153e2f41db215d106be2043ac467227
  disjoint 753f7fb2e200dd7355b8f9bc8aeb6e57
  extract 503d3e0aec43b29d350dfb45229d708d
  extractWithLabels 4e04c9d0edc0d98bbbf6acf860e2de77
  fromList 90f88d4ac1437cd996580b1fbb0edb30
  labels 0d22c6fd60f0fac3138012859c8b8326
  match 38760ca48b6304124e725c80aa1678df
  rename 466a9187fcf5ff229dfd3a27cfedd747
  values 5a9b121435d07343f80ed3a2b0ce716a
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 677c532e2dd56476a11a0a8a53880ce7
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal d9b6b9a9dd535595b612aea5738b7466
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time 05c0775841fb44d3c8063cb78d933b0f
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Days 6bb3f771ace440999ea38fb6f4696368
import  -/  time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Clock.UTC e543be363c51c0d733a66becd1667c39
53813a3ee68b7cee9701acd995e0e5df
  $fElementable(,) :: Relvar.Elementable (Relvar.Elem, Relvar.Elem)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Relvar.Elem, Relvar.Elem)
                  Relvar.T2
                  Relvar.$fElementable(,)_$cfromElem -}
a7257ea9403673d09fdf0d0d5bcbb0d1
  $fElementable(,)_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe (Relvar.Elem, Relvar.Elem)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ (Relvar.Elem, Relvar.Elem)
                   Relvar.T2 x -> GHC.Base.Just @ (Relvar.Elem, Relvar.Elem) x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementable(,,) ::
    Relvar.Elementable (Relvar.Elem, Relvar.Elem, Relvar.Elem)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Relvar.Elem, Relvar.Elem, Relvar.Elem)
                  Relvar.T3
                  Relvar.$fElementable(,,)_$cfromElem -}
355348314e3c5d8ffced941dda97d0ba
  $fElementable(,,)_$cfromElem ::
    Relvar.Elem
    -> GHC.Base.Maybe (Relvar.Elem, Relvar.Elem, Relvar.Elem)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing @ (Relvar.Elem, Relvar.Elem, Relvar.Elem)
                   Relvar.T3 x
                   -> GHC.Base.Just @ (Relvar.Elem, Relvar.Elem, Relvar.Elem) x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableBool :: Relvar.Elementable GHC.Types.Bool
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool Relvar.B Relvar.$fElementableBool_$cfromElem -}
b85805c78699a98d4df0acfb2a996f07
  $fElementableBool_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Relvar.B x -> GHC.Base.Just @ GHC.Types.Bool x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableByteString ::
    Relvar.Elementable Data.ByteString.Internal.ByteString
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.ByteString.Internal.ByteString
                  Relvar.BS
                  Relvar.$fElementableByteString_$cfromElem -}
6680849b58acfb5f6c686b884d852750
  $fElementableByteString_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Data.ByteString.Internal.ByteString
                   Relvar.BS x
                   -> GHC.Base.Just @ Data.ByteString.Internal.ByteString x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableChar :: Relvar.Elementable GHC.Types.Char
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char Relvar.C Relvar.$fElementableChar_$cfromElem -}
7aedd3bef1a4e8e566eb4e8a9029ba98
  $fElementableChar_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Char
                   Relvar.C x -> GHC.Base.Just @ GHC.Types.Char x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableDay :: Relvar.Elementable Data.Time.Calendar.Days.Day
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Calendar.Days.Day
                  Relvar.DD
                  Relvar.$fElementableDay_$cfromElem -}
fc19c4aa042d4f4cce8fa81de8af3858
  $fElementableDay_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe Data.Time.Calendar.Days.Day
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Data.Time.Calendar.Days.Day
                   Relvar.DD x -> GHC.Base.Just @ Data.Time.Calendar.Days.Day x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableDouble :: Relvar.Elementable GHC.Types.Double
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Relvar.D
                  Relvar.$fElementableDouble_$cfromElem -}
ba0ebcf7f2094d886dd358d24e306235
  $fElementableDouble_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Double
                   Relvar.D x -> GHC.Base.Just @ GHC.Types.Double x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableDown :: Relvar.Elementable (Data.Ord.Down Relvar.Elem)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Ord.Down Relvar.Elem)
                  Relvar.DW
                  Relvar.$fElementableDown_$cfromElem -}
63aa15261bc44fa181d4ce61c2792e2f
  $fElementableDown_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe (Data.Ord.Down Relvar.Elem)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ (Data.Ord.Down Relvar.Elem)
                   Relvar.DW x -> GHC.Base.Just @ (Data.Ord.Down Relvar.Elem) x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableInt :: Relvar.Elementable GHC.Types.Int
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int Relvar.I Relvar.$fElementableInt_$cfromElem -}
c25848be25110f0884b1bebc088f6123
  $fElementableInt_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                   Relvar.I x -> GHC.Base.Just @ GHC.Types.Int x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableInteger :: Relvar.Elementable GHC.Integer.Type.Integer
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Integer.Type.Integer
                  Relvar.J
                  Relvar.$fElementableInteger_$cfromElem -}
55ff6620ab463a133a4111cade294f00
  $fElementableInteger_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                   Relvar.J x -> GHC.Base.Just @ GHC.Integer.Type.Integer x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableRelvar :: Relvar.Elementable Relvar.Relvar
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar Relvar.R Relvar.$fElementableRelvar_$cfromElem -}
566d3073a9f574b4a2e0da387399c801
  $fElementableRelvar_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe Relvar.Relvar
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Relvar.Relvar
                   Relvar.R x -> GHC.Base.Just @ Relvar.Relvar x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableText :: Relvar.Elementable Data.Text.Internal.Text
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Text.Internal.Text
                  Relvar.T
                  Relvar.$fElementableText_$cfromElem -}
baf5e54e9bbc52a3f5f5046d3b56cb5d
  $fElementableText_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Data.Text.Internal.Text
                   Relvar.T x -> GHC.Base.Just @ Data.Text.Internal.Text x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementableUTCTime ::
    Relvar.Elementable Data.Time.Clock.UTC.UTCTime
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Time.Clock.UTC.UTCTime
                  Relvar.DT
                  Relvar.$fElementableUTCTime_$cfromElem -}
d05785876fc771a9f2f904047ffac3d7
  $fElementableUTCTime_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime
                   Relvar.DT x -> GHC.Base.Just @ Data.Time.Clock.UTC.UTCTime x }) -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementable[] :: Relvar.Elementable [Relvar.Elem]
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Relvar.Elem] Relvar.A Relvar.$fElementable[]_$cfromElem -}
53813a3ee68b7cee9701acd995e0e5df
  $fElementable[]0 :: Relvar.Elementable GHC.Base.String
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Base.String Relvar.S Relvar.$fElementable[]0_$cfromElem -}
2fdeba4e5082c388db8a0a564792b9b2
  $fElementable[]0_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                   Relvar.S x -> GHC.Base.Just @ GHC.Base.String x }) -}
7a4f01762d8b531697bddffbb7e76587
  $fElementable[]_$cfromElem ::
    Relvar.Elem -> GHC.Base.Maybe [Relvar.Elem]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ [Relvar.Elem]
                   Relvar.A x -> GHC.Base.Just @ [Relvar.Elem] x }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fEqColOrder :: GHC.Classes.Eq Relvar.ColOrder
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.ColOrder
                  Relvar.$fEqColOrder_$c==
                  Relvar.$fEqColOrder_$c/= -}
fbde8b2c937abccbc0eea6bc2535c692
  $fEqColOrder_$c/= ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.False Relvar.Desc -> GHC.Types.True }
                   Relvar.Desc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.True Relvar.Desc -> GHC.Types.False } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fEqColOrder_$c== ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Relvar.ColOrder ds1 :: Relvar.ColOrder ->
                 case ds of wild {
                   Relvar.Asc
                   -> case ds1 of wild1 {
                        Relvar.Asc -> GHC.Types.True Relvar.Desc -> GHC.Types.False }
                   Relvar.Desc
                   -> case ds1 of wild1 {
                        Relvar.Asc -> GHC.Types.False Relvar.Desc -> GHC.Types.True } }) -}
739ead08fede687ca65196edf4c545f4
  $fEqElem :: GHC.Classes.Eq Relvar.Elem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Elem Relvar.$fEqElem_$c== Relvar.$fEqElem_$c/= -}
739ead08fede687ca65196edf4c545f4
  $fEqElem_$c/= :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.Elem b :: Relvar.Elem ->
                 case Relvar.$fEqElem_$c== a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $fEqElem_$c== :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar :: GHC.Classes.Eq Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar Relvar.$fEqRelvar_$c== Relvar.$fEqRelvar_$c/= -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar1 :: GHC.Classes.Ord (GHC.Base.String, Relvar.Elem)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fEqRelvar_$s$fOrd(,) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar2 :: GHC.Classes.Eq (GHC.Base.String, Relvar.Elem)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fEqRelvar_$s$fEq(,) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar3 ::
    GHC.Classes.Eq (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fEqRelvar_$s$fEqSet -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar4 :: GHC.Classes.Eq (GHC.Base.String, Relvar.Elem)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fEqRelvar_$s$fEq(,) -}
2265d501d80a19c3b9d019c7f1609538
  $fEqRelvar5 :: GHC.Classes.Eq GHC.Base.String
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$c/= :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Relvar.Relvar y :: Relvar.Relvar ->
                 GHC.Classes.not (Relvar.$fEqRelvar_$c== x y)) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$c== :: Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case w1 of ww3 { Relvar.Relvar ww4 ww5 ->
                 Relvar.$w$c== ww1 ww2 ww4 ww5 } }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fEq(,) ::
    GHC.Classes.Eq ([GHC.Types.Char], Relvar.Elem)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Relvar.Elem)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Relvar.$fEqElem)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     GHC.Classes.$fEq[]_$s$fEq[]1
                     Relvar.$fEqElem) -}
d0b085291a1ea0864550ff09af6bb922
  $fEqRelvar_$s$fEq(,)1 ::
    GHC.Classes.Eq ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
                  (GHC.Classes.$fEq(,)_$c==
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fEqRelvar5
                     Data.Typeable.Internal.$fEqTypeRep)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fEqRelvar5
                     Data.Typeable.Internal.$fEqTypeRep) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fEqSet ::
    GHC.Classes.Eq (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                  (Data.Set.Base.$fEqSet_$c==
                     @ (GHC.Base.String, Relvar.Elem)
                     Relvar.$fEqRelvar4)
                  Relvar.$fEqRelvar_$s$fEqSet_$c/= -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fEqSet_$c/= ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 GHC.Classes.not
                   (Data.Set.Base.$fEqSet_$c==
                      @ (GHC.Base.String, Relvar.Elem)
                      Relvar.$fEqRelvar4
                      x
                      y)) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrd(,) ::
    GHC.Classes.Ord ([GHC.Types.Char], Relvar.Elem)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Relvar.Elem)
                  Relvar.$fEqRelvar2
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$c>
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fEqRelvar2
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     Relvar.$fOrdElem) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet ::
    GHC.Classes.Ord (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                  Relvar.$fEqRelvar3
                  Relvar.$fEqRelvar_$s$fOrdSet_$ccompare
                  Relvar.$fEqRelvar_$s$fOrdSet_$c<
                  Relvar.$fEqRelvar_$s$fOrdSet_$c<=
                  Relvar.$fEqRelvar_$s$fOrdSet_$c>
                  Relvar.$fEqRelvar_$s$fOrdSet_$c>=
                  Relvar.$fEqRelvar_$s$fOrdSet_$cmax
                  Relvar.$fEqRelvar_$s$fOrdSet_$cmin -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$c< ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$c<= ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$c> ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$c>= ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$ccompare ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ s1 :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   s2 :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 GHC.Classes.$w$ccompare14
                   @ (GHC.Base.String, Relvar.Elem)
                   Relvar.$fEqRelvar1
                   (GHC.Base.build
                      @ (GHC.Base.String, Relvar.Elem)
                      (\ @ b
                         c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n s1))
                   (GHC.Base.build
                      @ (GHC.Base.String, Relvar.Elem)
                      (\ @ b
                         c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB
                         @ (GHC.Base.String, Relvar.Elem)
                         @ b
                         c
                         n
                         s2))) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$cmax ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
739ead08fede687ca65196edf4c545f4
  $fEqRelvar_$s$fOrdSet_$cmin ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
    -> Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)
                   y :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Relvar.Elem)
                        Relvar.$fEqRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Relvar.Elem)
                           (\ @ b
                              c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Relvar.Elem)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
d68f3e08edd39812aceff63f53d75233
  $fEqTable :: GHC.Classes.Eq Relvar.Table
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Table Relvar.$fEqTable_$c== Relvar.$fEqTable_$c/= -}
d68f3e08edd39812aceff63f53d75233
  $fEqTable_$c/= :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.Table b :: Relvar.Table ->
                 case Relvar.$fEqTable_$c== a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d68f3e08edd39812aceff63f53d75233
  $fEqTable_$c== :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
de360e2aaac9f2ed1c6faa1585300448
  $fEqTable_$s$fEq[] :: GHC.Classes.Eq [Relvar.Elem]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Relvar.Elem]
                  (GHC.Classes.$fEq[]_$c== @ Relvar.Elem Relvar.$fEqElem)
                  Relvar.$fEqTable_$s$fEq[]_$c/= -}
663d861eaaff1976eb1d8faf51a4b8db
  $fEqTable_$s$fEq[]_$c/= ::
    [Relvar.Elem] -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ Relvar.Elem Relvar.$fEqElem x y)) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar :: Relvar.LSet.LabelOp Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  Relvar.$fLabelOpRelvar_$ccompatible
                  Relvar.$fLabelOpRelvar_$cmatch
                  Relvar.$fLabelOpRelvar_$cdisjoint
                  Relvar.$fLabelOpRelvar_$crename
                  Relvar.$fLabelOpRelvar_$clabels
                  Relvar.$fLabelOpRelvar_$cdegree -}
3ec7f0c46cbf8ede40ef21e3c961f1c1
  $fLabelOpRelvar1 ::
    GHC.Classes.Ord (GHC.Base.String, Data.Typeable.Internal.TypeRep)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fLabelOpRelvar_$s$fOrd(,) -}
fd631b72fd399d12d1fae5081a815051
  $fLabelOpRelvar2 :: GHC.Classes.Ord [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fOrd[]_$s$fOrd[]1 -}
4cb093ac769f9615fe9f793865fc336a
  $fLabelOpRelvar3 ::
    GHC.Classes.Eq (GHC.Base.String, Data.Typeable.Internal.TypeRep)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fEqRelvar_$s$fEq(,)1 -}
d0ae7d5fe3920d29f378dbbca8e3e776
  $fLabelOpRelvar4 :: GHC.Classes.Eq Relvar.Attributes
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fLabelOpRelvar_$s$fEqSet -}
6ef05877c349a89a0c19b7f85e40a379
  $fLabelOpRelvar5 ::
    [Data.Set.Base.Set
       (GHC.Base.String, Data.Typeable.Internal.TypeRep)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [Data.Set.Base.Set
                            (GHC.Base.String, Data.Typeable.Internal.TypeRep)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Set.Base.Set
                        (GHC.Base.String, Data.Typeable.Internal.TypeRep))
                   (\ w2 :: Data.Set.Base.Set
                              (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                    Data.Set.Base.$w$cshowsPrec
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      Relvar.$fLabelOpRelvar_$s$fShow(,)
                      0
                      w2)
                   ls
                   s) -}
91eb83aa274d68fbdf86ae253ef49485
  $fLabelOpRelvar6 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
8bd75f88bc80cdb0ed58f7b390d6b481
  $fLabelOpRelvar7 ::
    GHC.Show.Show (GHC.Base.String, Data.Typeable.Internal.TypeRep)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fLabelOpRelvar_$s$fShow(,) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$ccompatible ::
    (GHC.Classes.Ord Relvar.Relvar, GHC.Show.Show Relvar.Relvar) =>
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,A><L,A><L,1*U(1*U,A)><L,1*U(1*U,A)>,
     Unfolding: InlineRule (4, True, False)
                (\ $dOrd :: GHC.Classes.Ord Relvar.Relvar
                   $dShow :: GHC.Show.Show Relvar.Relvar
                   r1 :: Relvar.Relvar
                   r2 :: Relvar.Relvar ->
                 Relvar.LSet.$w$ccompatible
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep
                   Relvar.$fLabelOpRelvar_$s$fOrdSet
                   Relvar.$fLabelOpRelvar_$s$fShowSet
                   (case r1 of wild { Relvar.Relvar ds ds1 -> ds })
                   (case r2 of wild { Relvar.Relvar ds ds1 -> ds })) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$cdegree :: Relvar.Relvar -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ r :: Relvar.Relvar ->
                 case r of wild { Relvar.Relvar ds ds1 ->
                 case ds of wild1 {
                   Data.Set.Base.Bin dt ds2 ds3 ds4 -> GHC.Types.I# dt
                   Data.Set.Base.Tip -> GHC.Types.I# 0 } }) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$cdisjoint ::
    GHC.Classes.Ord Relvar.Relvar =>
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A><L,1*U(1*U,A)><L,1*U(1*U,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ $dOrd :: GHC.Classes.Ord Relvar.Relvar
                   r1 :: Relvar.Relvar
                   r2 :: Relvar.Relvar ->
                 Relvar.LSet.$fLabelOpSet_$cdisjoint
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep
                   Data.Typeable.Internal.$fShowTypeRep
                   Relvar.$fLabelOpRelvar_$s$fOrdSet
                   (case r1 of wild { Relvar.Relvar ds ds1 -> ds })
                   (case r2 of wild { Relvar.Relvar ds ds1 -> ds })) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$clabels :: Relvar.Relvar -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ r :: Relvar.Relvar ->
                 case r of wild { Relvar.Relvar ds ds1 ->
                 Relvar.LSet.$w$clabels @ Data.Typeable.Internal.TypeRep ds }) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$cmatch ::
    GHC.Classes.Eq Relvar.Relvar =>
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SL),1*U(U,A)><S(SL),1*U(U,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ $dEq :: GHC.Classes.Eq Relvar.Relvar
                   r1 :: Relvar.Relvar
                   r2 :: Relvar.Relvar ->
                 case r1 of wild { Relvar.Relvar ds ds1 ->
                 case r2 of wild1 { Relvar.Relvar ds2 ds3 ->
                 Data.Set.Base.$fEqSet_$c==
                   @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   Relvar.$fEqRelvar_$s$fEq(,)1
                   ds
                   ds2 } }) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$crename ::
    Relvar.Relvar
    -> [GHC.Base.String] -> [GHC.Base.String] -> Relvar.Relvar
  {- Arity: 3, Strictness: <S,1*U(U,1*U)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: [GHC.Base.String]
                   w2 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 case Relvar.$w$crename ww1 ww2 w1 w2 of ww3 { (#,#) ww4 ww5 ->
                 Relvar.Relvar ww4 ww5 } }) -}
1fd37bf89b607ab23ce7f173ad786601
  $fLabelOpRelvar_$s$fEqSet ::
    GHC.Classes.Eq
      (Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set
                       (GHC.Base.String, Data.Typeable.Internal.TypeRep))
                  (Data.Set.Base.$fEqSet_$c==
                     @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                     Relvar.$fLabelOpRelvar3)
                  Relvar.$fLabelOpRelvar_$s$fEqSet_$c/= -}
9946986f2e3e37869d7dfe973e3e0c28
  $fLabelOpRelvar_$s$fEqSet_$c/= ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 GHC.Classes.not
                   (Data.Set.Base.$fEqSet_$c==
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      Relvar.$fLabelOpRelvar3
                      x
                      y)) -}
93d78f35c775a74499a05e00d4d5ce09
  $fLabelOpRelvar_$s$fOrd(,) ::
    GHC.Classes.Ord ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
                  Relvar.$fLabelOpRelvar3
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$c>
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar3
                     Relvar.$fLabelOpRelvar2
                     Data.Typeable.Internal.$fOrdTypeRep) -}
d409f7b1026bd168394ff2065b4e4d2e
  $fLabelOpRelvar_$s$fOrdSet ::
    GHC.Classes.Ord
      (Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep))
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set
                       (GHC.Base.String, Data.Typeable.Internal.TypeRep))
                  Relvar.$fLabelOpRelvar4
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$ccompare
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$c<
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$c<=
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$c>
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$c>=
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$cmax
                  Relvar.$fLabelOpRelvar_$s$fOrdSet_$cmin -}
d7da4e03c18d10cf44bfd63f5393e602
  $fLabelOpRelvar_$s$fOrdSet_$c< ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
960ef93054b21a4c6cc5b3fddb1b0e51
  $fLabelOpRelvar_$s$fOrdSet_$c<= ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
41f5e03e18d80cb2d093a1dcafd2f224
  $fLabelOpRelvar_$s$fOrdSet_$c> ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
cb0503cedddf494749dfc9a4ccc96958
  $fLabelOpRelvar_$s$fOrdSet_$c>= ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
5d81ce9601d0aebc6680c2a9559b158d
  $fLabelOpRelvar_$s$fOrdSet_$ccompare ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ s1 :: Data.Set.Base.Set
                           (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   s2 :: Data.Set.Base.Set
                           (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 GHC.Classes.$w$ccompare14
                   @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   Relvar.$fLabelOpRelvar1
                   (GHC.Base.build
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      (\ @ b
                         c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB
                         @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                         @ b
                         c
                         n
                         s1))
                   (GHC.Base.build
                      @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                      (\ @ b
                         c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              -> b -> b[OneShot]
                         n :: b[OneShot] ->
                       Data.Set.Base.foldrFB
                         @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                         @ b
                         c
                         n
                         s2))) -}
0c085f0725e4de3f5f7d3ca92495cab3
  $fLabelOpRelvar_$s$fOrdSet_$cmax ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
46abbacc3812d22247ea531eac529c52
  $fLabelOpRelvar_$s$fOrdSet_$cmin ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                   y :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 case GHC.Classes.$w$ccompare14
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fLabelOpRelvar1
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              x))
                        (GHC.Base.build
                           @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                           (\ @ b
                              c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                   -> b -> b[OneShot]
                              n :: b[OneShot] ->
                            Data.Set.Base.foldrFB
                              @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                              @ b
                              c
                              n
                              y)) of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
be23e1d65d9ab16fe12bb93949eebba6
  $fLabelOpRelvar_$s$fShow(,) ::
    GHC.Show.Show ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     Relvar.$fLabelOpRelvar6
                     Data.Typeable.Internal.$fShowTypeRep)
                  Relvar.$fLabelOpRelvar_$s$fShow(,)_$cshow
                  Relvar.$fLabelOpRelvar_$s$fShow(,)_$cshowList -}
91cce1a1ff45e41df94ddcb7bd556ba5
  $fLabelOpRelvar_$s$fShow(,)_$cshow ::
    ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U(A,A,U(U,U,A,A,U),1*U,1*U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: ([GHC.Types.Char], Data.Typeable.Internal.TypeRep) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Data.Typeable.Internal.TypeRep
                   Relvar.$fLabelOpRelvar6
                   Data.Typeable.Internal.$fShowTypeRep
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6476d3cdc825ab27daecdeff2d2986f4
  $fLabelOpRelvar_$s$fShow(,)_$cshowList ::
    [([GHC.Types.Char], Data.Typeable.Internal.TypeRep)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [([GHC.Types.Char], Data.Typeable.Internal.TypeRep)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], Data.Typeable.Internal.TypeRep)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ Data.Typeable.Internal.TypeRep
                      Relvar.$fLabelOpRelvar6
                      Data.Typeable.Internal.$fShowTypeRep
                      GHC.Show.shows18)
                   eta
                   eta1) -}
7bd5a1576aa11da0fe0ee2a8c0dba767
  $fLabelOpRelvar_$s$fShowSet ::
    GHC.Show.Show
      (Data.Set.Base.Set
         (GHC.Base.String, Data.Typeable.Internal.TypeRep))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set
                       (GHC.Base.String, Data.Typeable.Internal.TypeRep))
                  (Data.Set.Base.$fShowSet_$cshowsPrec
                     @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                     Relvar.$fLabelOpRelvar7)
                  Relvar.$fLabelOpRelvar_$s$fShowSet_$cshow
                  Relvar.$fLabelOpRelvar5 -}
24410acaae69253b235751fd9acafc06
  $fLabelOpRelvar_$s$fShowSet_$cshow ::
    Data.Set.Base.Set (GHC.Base.String, Data.Typeable.Internal.TypeRep)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.Set.Base.Set
                          (GHC.Base.String, Data.Typeable.Internal.TypeRep) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Set.Base.$fShowSet1)
                   (Relvar.$fLabelOpRelvar_$s$fShow(,)_$cshowList
                      (GHC.Base.build
                         @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                         (\ @ b
                            c :: (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                                 -> b -> b[OneShot]
                            n :: b[OneShot] ->
                          Data.Set.Base.foldrFB
                            @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                            @ b
                            c
                            n
                            x))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_$sfromList ::
    [Relvar.Row] -> Data.Set.Base.Set Relvar.Row
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Relvar.Row] ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ Relvar.Row
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Base.Bin
                             @ Relvar.Row
                             1
                             dt
                             (Data.Set.Base.Tip @ Relvar.Row)
                             (Data.Set.Base.Tip @ Relvar.Row) }
                        : ipv ipv1
                        -> case GHC.Classes.$w$ccompare14
                                  @ (GHC.Base.String, Relvar.Elem)
                                  Relvar.$fEqRelvar_$s$fOrd(,)
                                  (Data.Set.Base.toAscList @ (GHC.Base.String, Relvar.Elem) x)
                                  (Data.Set.Base.toAscList
                                     @ (GHC.Base.String, Relvar.Elem)
                                     ipv) of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Relvar.$fLabelOpRelvar_go5
                                  (Data.Set.Base.Bin
                                     @ Relvar.Row
                                     1
                                     dt
                                     (Data.Set.Base.Tip @ Relvar.Row)
                                     (Data.Set.Base.Tip @ Relvar.Row))
                                  wild1 }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Relvar.$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Relvar.Row
                                     1
                                     dt
                                     (Data.Set.Base.Tip @ Relvar.Row)
                                     (Data.Set.Base.Tip @ Relvar.Row))
                                  wild1 } } } }) -}
739ead08fede687ca65196edf4c545f4
  $fLabelOpRelvar_go5 ::
    Data.Set.Base.Set Relvar.Row
    -> [Relvar.Row] -> Data.Set.Base.Set Relvar.Row
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder :: GHC.Classes.Ord Relvar.ColOrder
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.ColOrder
                  Relvar.$fEqColOrder
                  Relvar.$fOrdColOrder_$ccompare
                  Relvar.$fOrdColOrder_$c<
                  Relvar.$fOrdColOrder_$c<=
                  Relvar.$fOrdColOrder_$c>
                  Relvar.$fOrdColOrder_$c>=
                  Relvar.$fOrdColOrder_$cmax
                  Relvar.$fOrdColOrder_$cmin -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$c< ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.False Relvar.Desc -> GHC.Types.True }
                   Relvar.Desc -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$c<= ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Relvar.Desc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.False Relvar.Desc -> GHC.Types.True } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$c> ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Relvar.Desc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.True Relvar.Desc -> GHC.Types.False } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$c>= ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.True Relvar.Desc -> GHC.Types.False }
                   Relvar.Desc -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$ccompare ::
    Relvar.ColOrder -> Relvar.ColOrder -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a1 :: Relvar.ColOrder b :: Relvar.ColOrder ->
                 case a1 of wild {
                   Relvar.Asc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.EQ Relvar.Desc -> GHC.Types.LT }
                   Relvar.Desc
                   -> case b of wild1 {
                        Relvar.Asc -> GHC.Types.GT Relvar.Desc -> GHC.Types.EQ } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$cmax ::
    Relvar.ColOrder -> Relvar.ColOrder -> Relvar.ColOrder
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.ColOrder y :: Relvar.ColOrder ->
                 case x of wild {
                   Relvar.Asc -> y
                   Relvar.Desc -> case y of wild1 { DEFAULT -> Relvar.Desc } }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fOrdColOrder_$cmin ::
    Relvar.ColOrder -> Relvar.ColOrder -> Relvar.ColOrder
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.ColOrder y :: Relvar.ColOrder ->
                 case x of wild {
                   Relvar.Asc -> case y of wild1 { DEFAULT -> Relvar.Asc }
                   Relvar.Desc -> y }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem :: GHC.Classes.Ord Relvar.Elem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Elem
                  Relvar.$fEqElem
                  Relvar.$fOrdElem_$ccompare
                  Relvar.$fOrdElem_$c<
                  Relvar.$fOrdElem_$c<=
                  Relvar.$fOrdElem_$c>
                  Relvar.$fOrdElem_$c>=
                  Relvar.$fOrdElem_$cmax
                  Relvar.$fOrdElem_$cmin -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$c< :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$c<= :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$c> :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$c>= :: Relvar.Elem -> Relvar.Elem -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$ccompare ::
    Relvar.Elem -> Relvar.Elem -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$cmax :: Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdElem_$cmin :: Relvar.Elem -> Relvar.Elem -> Relvar.Elem
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: Relvar.Elem y :: Relvar.Elem ->
                 case Relvar.$fOrdElem_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar :: GHC.Classes.Ord Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  Relvar.$fEqRelvar
                  Relvar.$fOrdRelvar_$ccompare
                  Relvar.$fOrdRelvar_$c<=
                  Relvar.$fOrdRelvar_$c<=
                  Relvar.$fOrdRelvar_$c>=
                  Relvar.$fOrdRelvar_$c>=
                  Relvar.$fOrdRelvar_$cmax
                  Relvar.$fOrdRelvar_$cmin -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar_$c<= ::
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ x :: Relvar.Relvar y :: Relvar.Relvar -> GHC.Types.True) -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar_$c>= ::
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ x :: Relvar.Relvar y :: Relvar.Relvar -> GHC.Types.False) -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar_$ccompare ::
    Relvar.Relvar -> Relvar.Relvar -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ r1 :: Relvar.Relvar r2 :: Relvar.Relvar -> GHC.Types.LT) -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar_$cmax ::
    Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, True)
                (\ x :: Relvar.Relvar y :: Relvar.Relvar -> y) -}
739ead08fede687ca65196edf4c545f4
  $fOrdRelvar_$cmin ::
    Relvar.Relvar -> Relvar.Relvar -> Relvar.Relvar
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U)><L,A>m,
     Unfolding: InlineRule (2, True, True)
                (\ x :: Relvar.Relvar y :: Relvar.Relvar -> x) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable :: GHC.Classes.Ord Relvar.Table
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Table
                  Relvar.$fEqTable
                  Relvar.$fOrdTable_$ccompare
                  Relvar.$fOrdTable_$c<
                  Relvar.$fOrdTable_$c<=
                  Relvar.$fOrdTable_$c>
                  Relvar.$fOrdTable_$c>=
                  Relvar.$fOrdTable_$cmax
                  Relvar.$fOrdTable_$cmin -}
8cd0b9acdf1eb0168e29c2018c21da79
  $fOrdTable1 :: GHC.Classes.Eq [Relvar.Elem]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Relvar.$fEqTable_$s$fEq[] -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$c< :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$c< ww1 ww2 ww4 ww5 } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$c<= :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$c<= ww1 ww2 ww4 ww5 } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$c> :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$c> ww1 ww2 ww4 ww5 } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$c>= :: Relvar.Table -> Relvar.Table -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$c>= ww1 ww2 ww4 ww5 } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$ccompare ::
    Relvar.Table -> Relvar.Table -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 Relvar.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$cmax :: Relvar.Table -> Relvar.Table -> Relvar.Table
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww1 ww4 of wild {
                   GHC.Types.LT -> Relvar.Table ww4 ww5
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww2
                             ww5 of wild1 {
                        DEFAULT -> Relvar.Table ww4 ww5
                        GHC.Types.GT -> Relvar.Table ww1 ww2 }
                   GHC.Types.GT -> Relvar.Table ww1 ww2 } } }) -}
d68f3e08edd39812aceff63f53d75233
  $fOrdTable_$cmin :: Relvar.Table -> Relvar.Table -> Relvar.Table
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Table w1 :: Relvar.Table ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 case w1 of ww3 { Relvar.Table ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww1 ww4 of wild {
                   GHC.Types.LT -> Relvar.Table ww1 ww2
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww2
                             ww5 of wild1 {
                        DEFAULT -> Relvar.Table ww1 ww2
                        GHC.Types.GT -> Relvar.Table ww4 ww5 }
                   GHC.Types.GT -> Relvar.Table ww4 ww5 } } }) -}
53ad87339e2e88aca768092c735e9ba5
  $fOrdTable_$s$fOrd[] :: GHC.Classes.Ord [Relvar.Elem]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Relvar.Elem]
                  Relvar.$fOrdTable1
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ Relvar.Elem
                     Relvar.$fOrdTable1
                     Relvar.$fOrdElem)
                  Relvar.$fOrdTable_$s$fOrd[]_$c<
                  Relvar.$fOrdTable_$s$fOrd[]_$c<=
                  Relvar.$fOrdTable_$s$fOrd[]_$c>
                  Relvar.$fOrdTable_$s$fOrd[]_$c>=
                  Relvar.$fOrdTable_$s$fOrd[]_$cmax
                  Relvar.$fOrdTable_$s$fOrd[]_$cmin -}
a6ba3a5b8f764cfe7eb9c79dfc187e96
  $fOrdTable_$s$fOrd[]_$c< ::
    [Relvar.Elem] -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
121d561b9d8feab1f6cc0941a49efb9f
  $fOrdTable_$s$fOrd[]_$c<= ::
    [Relvar.Elem] -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
86f99968e781ee004c92d426521fa10a
  $fOrdTable_$s$fOrd[]_$c> ::
    [Relvar.Elem] -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b470ec585ec5da696afff775d739a5e1
  $fOrdTable_$s$fOrd[]_$c>= ::
    [Relvar.Elem] -> [Relvar.Elem] -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
ab53ca2f47158d083a39b36a2cfa2f03
  $fOrdTable_$s$fOrd[]_$cmax ::
    [Relvar.Elem] -> [Relvar.Elem] -> [Relvar.Elem]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
50c3d0aacd4655ce10c7f968bcba9d7f
  $fOrdTable_$s$fOrd[]_$cmin ::
    [Relvar.Elem] -> [Relvar.Elem] -> [Relvar.Elem]
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ x :: [Relvar.Elem] y :: [Relvar.Elem] ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Relvar.Elem
                        Relvar.$fOrdTable1
                        Relvar.$fOrdElem
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder :: GHC.Read.Read Relvar.ColOrder
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.ColOrder
                  Relvar.$fReadColOrder_$s$dmreadsPrec
                  Relvar.$fReadColOrder_$sreadListDefault
                  Relvar.$fReadColOrder_$creadPrec
                  Relvar.$fReadColOrder_$creadListPrec -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Relvar.ColOrder] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Relvar.ColOrder] -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ Relvar.ColOrder
                   Relvar.$fReadColOrder2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Relvar.ColOrder>_R))
                   @ b
                   eta1) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder10 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b ->
                 eta Relvar.Asc) -}
b34dcb015927feb82ccc3f2ddf86f0b5
  $fReadColOrder11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Asc"#) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Relvar.ColOrder
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Relvar.ColOrder
                   Relvar.$fReadColOrder3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Relvar.ColOrder>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Relvar.ColOrder>_R)))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.choose2
                   @ Relvar.ColOrder
                   Relvar.$fReadColOrder4
                   eta
                   @ b
                   eta1) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)
                   Relvar.$fReadColOrder9
                   Relvar.$fReadColOrder5) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)
                   Relvar.$fReadColOrder6
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder6 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)
  {- Strictness: m,
     Unfolding: ((Relvar.$fReadColOrder8,
                  Relvar.$fReadColOrder7
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Relvar.ColOrder>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Relvar.ColOrder>_R))))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta :: Relvar.ColOrder -> Text.ParserCombinators.ReadP.P b ->
                 eta Relvar.Desc) -}
bcf90474d9907064af1bc64b24197938
  $fReadColOrder8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Desc"#) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder9 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder)
  {- Strictness: m,
     Unfolding: ((Relvar.$fReadColOrder11,
                  Relvar.$fReadColOrder10
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                      <Relvar.ColOrder>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                 <Relvar.ColOrder>_R))))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Relvar.ColOrder]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fReadColOrder1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Relvar.ColOrder]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Relvar.ColOrder]>_R))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Relvar.ColOrder
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fReadColOrder2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Relvar.ColOrder>_R)) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder_$s$dmreadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Relvar.ColOrder
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ Relvar.ColOrder
                   Relvar.$fReadColOrder_$creadPrec
                   eta) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fReadColOrder_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS [Relvar.ColOrder]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Relvar.ColOrder]
                   ((Relvar.$fReadColOrder_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Relvar.ColOrder]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <[Relvar.ColOrder]>_R)
                      @ [Relvar.ColOrder]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Relvar.ColOrder]))) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fShowColOrder :: GHC.Show.Show Relvar.ColOrder
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.ColOrder
                  Relvar.$fShowColOrder_$cshowsPrec
                  Relvar.$fShowColOrder_$cshow
                  Relvar.$fShowColOrder_$cshowList -}
fbde8b2c937abccbc0eea6bc2535c692
  $fShowColOrder1 :: Relvar.ColOrder -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Relvar.ColOrder eta :: GHC.Base.String ->
                 case ds of wild {
                   Relvar.Asc
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Relvar.$fReadColOrder11)
                        eta
                   Relvar.Desc
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Relvar.$fReadColOrder8)
                        eta }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fShowColOrder_$cshow :: Relvar.ColOrder -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Relvar.ColOrder ->
                 case x of wild {
                   Relvar.Asc -> Relvar.$fReadColOrder11
                   Relvar.Desc -> Relvar.$fReadColOrder8 }) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fShowColOrder_$cshowList :: [Relvar.ColOrder] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Relvar.ColOrder
                   Relvar.$fShowColOrder1) -}
fbde8b2c937abccbc0eea6bc2535c692
  $fShowColOrder_$cshowsPrec ::
    GHC.Types.Int -> Relvar.ColOrder -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Relvar.ColOrder
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Relvar.Asc
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Relvar.$fReadColOrder11)
                        eta
                   Relvar.Desc
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Relvar.$fReadColOrder8)
                        eta }) -}
739ead08fede687ca65196edf4c545f4
  $fShowElem :: GHC.Show.Show Relvar.Elem
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Elem
                  Relvar.$fShowElem_$cshowsPrec
                  Relvar.$fShowElem_$cshow
                  Relvar.$fShowElem_$cshowList -}
739ead08fede687ca65196edf4c545f4
  $fShowElem1 :: Relvar.Elem -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Relvar.Elem s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Relvar.$fShowElem_$cshow x) s) -}
739ead08fede687ca65196edf4c545f4
  $fShowElem_$cshow :: Relvar.Elem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
739ead08fede687ca65196edf4c545f4
  $fShowElem_$cshowList :: [Relvar.Elem] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Relvar.Elem] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Relvar.Elem Relvar.$fShowElem1 ls s) -}
739ead08fede687ca65196edf4c545f4
  $fShowElem_$cshowsPrec ::
    GHC.Types.Int -> Relvar.Elem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Relvar.Elem s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Relvar.$fShowElem_$cshow x))
                   s) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar :: GHC.Show.Show Relvar.Relvar
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Relvar
                  Relvar.$fShowRelvar_$cshowsPrec
                  Relvar.$fShowRelvar_$cshow
                  Relvar.$fShowRelvar_$cshowList -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar1 :: Relvar.Relvar -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 Relvar.$w$cshowsPrec 0 ww1 ww2 }) -}
8f2b5dd2770d29e9f9fc26e738f550db
  $fShowRelvar2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
760a0842e0e129b89fb8e91b1b79d27b
  $fShowRelvar3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rdata = "#) -}
0e0b20f943ed664ea99ec564997dcdd5
  $fShowRelvar4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
f8ed818589d0c0769dde0e60305a7cb0
  $fShowRelvar5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "attributes = "#) -}
1107468c062addbba003c8ba3d56f9f0
  $fShowRelvar6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Relvar {"#) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar7 :: GHC.Show.Show (GHC.Base.String, Relvar.Elem)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Relvar.$fShowRelvar_$s$fShow(,) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$cshow :: Relvar.Relvar -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Relvar.Relvar ->
                 Relvar.$fShowRelvar_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$cshowList :: [Relvar.Relvar] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Relvar.Relvar
                   Relvar.$fShowRelvar1) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$cshowsPrec ::
    GHC.Types.Int -> Relvar.Relvar -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Relvar.Relvar ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Relvar.Relvar ww3 ww4 ->
                 Relvar.$w$cshowsPrec ww1 ww3 ww4 } }) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShow(,) ::
    GHC.Show.Show ([GHC.Types.Char], Relvar.Elem)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], Relvar.Elem)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ Relvar.Elem
                     Relvar.$fLabelOpRelvar6
                     Relvar.$fShowElem)
                  Relvar.$fShowRelvar_$s$fShow(,)_$cshow
                  Relvar.$fShowRelvar_$s$fShow(,)_$cshowList -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShow(,)_$cshow ::
    ([GHC.Types.Char], Relvar.Elem) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: ([GHC.Types.Char], Relvar.Elem) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ Relvar.Elem
                   Relvar.$fLabelOpRelvar6
                   Relvar.$fShowElem
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShow(,)_$cshowList ::
    [([GHC.Types.Char], Relvar.Elem)] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [([GHC.Types.Char], Relvar.Elem)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], Relvar.Elem)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ Relvar.Elem
                      Relvar.$fLabelOpRelvar6
                      Relvar.$fShowElem
                      GHC.Show.shows18)
                   eta
                   eta1) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShowSet ::
    GHC.Show.Show (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                  (Data.Set.Base.$fShowSet_$cshowsPrec
                     @ (GHC.Base.String, Relvar.Elem)
                     Relvar.$fShowRelvar7)
                  Relvar.$fShowRelvar_$s$fShowSet_$cshow
                  Relvar.$fShowRelvar_$s$fShowSet_$cshowList -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShowSet_$cshow ::
    Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.Set.Base.Set (GHC.Base.String, Relvar.Elem) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Set.Base.$fShowSet1)
                   (Relvar.$fShowRelvar_$s$fShow(,)_$cshowList
                      (GHC.Base.build
                         @ (GHC.Base.String, Relvar.Elem)
                         (\ @ b
                            c :: (GHC.Base.String, Relvar.Elem) -> b -> b[OneShot]
                            n :: b[OneShot] ->
                          Data.Set.Base.foldrFB @ (GHC.Base.String, Relvar.Elem) @ b c n x))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
739ead08fede687ca65196edf4c545f4
  $fShowRelvar_$s$fShowSet_$cshowList ::
    [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ ls :: [Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)]
                   s :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   (Data.Set.Base.$fShowSet_$cshowsPrec
                      @ (GHC.Base.String, Relvar.Elem)
                      Relvar.$fShowRelvar7
                      GHC.Show.shows18)
                   ls
                   s) -}
d68f3e08edd39812aceff63f53d75233
  $fShowTable :: GHC.Show.Show Relvar.Table
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Relvar.Table
                  Relvar.$fShowTable_$cshowsPrec
                  Relvar.$fShowTable_$cshow
                  Relvar.$fShowTable_$cshowList -}
d68f3e08edd39812aceff63f53d75233
  $fShowTable1 :: Relvar.Table -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ w :: Relvar.Table w1 :: GHC.Base.String ->
                 case w of ww { Relvar.Table ww1 ww2 ->
                 Relvar.$w$cshowsPrec1 0 ww1 ww2 w1 }) -}
d68f3e08edd39812aceff63f53d75233
  $fShowTable_$cshow :: Relvar.Table -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Relvar.Table ->
                 Relvar.$fShowTable_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d68f3e08edd39812aceff63f53d75233
  $fShowTable_$cshowList :: [Relvar.Table] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Relvar.Table
                   Relvar.$fShowTable1) -}
d68f3e08edd39812aceff63f53d75233
  $fShowTable_$cshowsPrec ::
    GHC.Types.Int -> Relvar.Table -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Types.Int w1 :: Relvar.Table w2 :: GHC.Base.String ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Relvar.Table ww3 ww4 ->
                 Relvar.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
211aa8ccef908a58dd98eb1b4c9a81e4
  $sfindWithDefault1 ::
    a -> GHC.Base.String -> Data.Map.Base.Map GHC.Base.String a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><S,1*U><S,1*U> -}
62131bac34c61640b16728c4a262c0aa
  $sfromList ::
    [(GHC.Base.String, a)] -> Data.Map.Base.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a1 ds :: [(GHC.Base.String, a1)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Base.String @ a1
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ GHC.Base.String
                             @ a1
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                             (Data.Map.Base.Tip @ GHC.Base.String @ a1) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Relvar.$sfromList1
                                  @ a1
                                  (Data.Map.Base.Bin
                                     @ GHC.Base.String
                                     @ a1
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a1))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Relvar.$wpoly_go10
                                  @ a1
                                  1
                                  (Data.Map.Base.Bin
                                     @ GHC.Base.String
                                     @ a1
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a1)
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a1))
                                  wild2 } } } } } }) -}
08b0dd80ffe32e43bb1a91439f685258
  $sfromList1 ::
    Data.Map.Base.Map GHC.Base.String a1
    -> [(GHC.Base.String, a1)] -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c2273fec8e666d5ea5aa15f6169c8ae0
  $sinsert_$sgo10 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
4ab5c7d0ac3f71df8d61a9bba281aa18
  $sinsert_$sgo5 ::
    Relvar.Row
    -> Data.Set.Base.Set Relvar.Row -> Data.Set.Base.Set Relvar.Row
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
50aa1764075d54483d8f78c144fc6d3b
  $stypeOf10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Data.Time.Calendar.Days"#) -}
903024017dbfa3524ee7eb8346028093
  $stypeOf11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "time_FTheb6LSxyX1UABIbBXRfn"#) -}
adbcffd9ca451fe9bfd27259611e7eb8
  $stypeOf14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UTCTime"#) -}
1688be97fa11009abfb230c3978d00df
  $stypeOf15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Data.Time.Clock.UTC"#) -}
92470faf7c64d2f78ab82f7362709de0
  $stypeOf18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Text"#) -}
09c165175416f096b22c66d1eda223b9
  $stypeOf19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Data.Text.Internal"#) -}
7f7f667fc333bd199854642ed0976975
  $stypeOf2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Relvar"#) -}
fda411e9667b916134df5f96875bb3ba
  $stypeOf20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "text_HmqVQnZSpjaC156ABqPhne"#) -}
f76729db698b1c2ff642f47c46e7835b
  $stypeOf23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ByteString"#) -}
b20ca2008e91a25fca9d2fd73e6e99d3
  $stypeOf24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Data.ByteString.Internal"#) -}
79d6286a012d9249fc8431ba596340b2
  $stypeOf25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "bytes_6VWy06pWzJq9evDvK2d4w6"#) -}
4ad5035b168aceb49fe5305f97212856
  $stypeOf28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "()"#) -}
614a361e141d935f09c501d3a6282b35
  $stypeOf29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GHC.Tuple"#) -}
6d8a6369203a6dc0c0c709502345c302
  $stypeOf3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "relat_8Cyn3M6UKgN11sASBif9n4"#) -}
2186eae95c32f4c758072f5f317f3db8
  $stypeOf30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ghc-prim"#) -}
a8bb26ff315ef041af1eacf0d9b83287
  $stypeOf33 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   __word 17730107610217102821
                   __word 9866972337190828755) -}
31c073111cdfd1698854a8b56610be2f
  $stypeOf34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GHC.Types"#) -}
67aaa04300236f9670cd3cdba9a7b29f
  $stypeOf39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Integer"#) -}
113b2a438792d5d114a22a07af9beff5
  $stypeOf40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GHC.Integer.Type"#) -}
db54f5e87410470438ec6df87faefe5c
  $stypeOf41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "integer-gmp"#) -}
9b0b413a4051c74250bdd7b8710b0423
  $stypeOf44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int"#) -}
10793d902234d2ae4f4de5d1ada8b04c
  $stypeOf47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Double"#) -}
da9a5d966462a88e0b33c16de49ee854
  $stypeOf50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Char"#) -}
1a6c24da7871d317f580d19f986fd4a5
  $stypeOf53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bool"#) -}
07593d436099064d288a802fb280640e
  $stypeOf59 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   __word 17502837480397947244
                   __word 15872498598114190556) -}
0b00f5a863dbbff72322d88ad38c1930
  $stypeOf6 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   __word 8785563205482896514
                   __word 17609251326237537512) -}
91d88a7add59522c8a5d89d8ad254d8a
  $stypeOf60 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Relvar.$stypeOf61
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
d958358cf8d71252102402d56c921a1a
  $stypeOf61 :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 4697603844294778194
                   __word 5768523719195159218
                   Relvar.$stypeOf_wild3
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b65dc66f729face5cdc34a1b2a999052
  $stypeOf67 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   __word 16902069906016602646
                   __word 15238449149262190978) -}
39caed85d7e4708f76685fa5f08e7285
  $stypeOf9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Day"#) -}
784d647934cac80e9502777f7a010a9b
  $stypeOf_w1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Relvar.$stypeOf60) -}
875aee10b3b713af07aaf7a924c98a9e
  $stypeOf_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 8785563205482896514
                   __word 17609251326237537512
                   Relvar.$stypeOf_ww2
                   Relvar.$stypeOf_ww3
                   Relvar.$stypeOf_ww4) -}
ff02e6630608475bf3c74704edfe4d48
  $stypeOf_wild1 :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 17730107610217102821
                   __word 9866972337190828755
                   Relvar.$stypeOf30
                   Relvar.$stypeOf34
                   Relvar.$stypeOf_ww1) -}
e076bebf12ffc6840a5c22423387509b
  $stypeOf_wild2 :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 17502837480397947244
                   __word 15872498598114190556
                   Relvar.$stypeOf30
                   Relvar.$stypeOf29
                   Relvar.$stypeOf_ww5) -}
7a206a082f570e4bae0b932dc29a4eaa
  $stypeOf_wild3 :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 4697603844294778194
                   __word 5768523719195159218
                   Relvar.$stypeOf3
                   Relvar.$stypeOf2
                   Relvar.$stypeOf_ww6) -}
370109187880b9021b97877a933bc0a0
  $stypeOf_ww1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "[]"#) -}
dc1e9314e00e18ee02aabf94d9c54485
  $stypeOf_ww2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "base"#) -}
8b8ad06c42ad007a4faa518916f11d81
  $stypeOf_ww3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "Data.Ord"#) -}
eebd71f4f875cdfb19cbd66ff4d9fd52
  $stypeOf_ww4 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "Down"#) -}
d236ca84f53e3476319576bbe7958d8e
  $stypeOf_ww5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "(,)"#) -}
9b6f5e646a0d944e64bd8987f865398f
  $stypeOf_ww6 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "Elem"#) -}
90f3ec0ba10cee27b0c236434ab27aea
  $stypeOf_ww7 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "(,,)"#) -}
42431445a9f810415b4861bf4aa9ce7f
  $w$c< ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                   GHC.Types.GT -> GHC.Types.False }) -}
7de2f03d3192b3c92cf34201bf8f0354
  $w$c<= ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
739ead08fede687ca65196edf4c545f4
  $w$c== ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   ww2 :: Relvar.Attributes
                   ww3 :: Data.Set.Base.Set Relvar.Row ->
                 case Data.Set.Base.$fEqSet_$c==
                        @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                        Relvar.$fEqRelvar_$s$fEq(,)1
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Prim.Int# -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Prim.Int#[OneShot] ->
                          let {
                            $j1 :: GHC.Prim.Int# -> GHC.Types.Bool
                              {- Arity: 1, Strictness: <L,U> -}
                            = \ y :: GHC.Prim.Int#[OneShot] ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim./=# x y) of wild1 {
                                GHC.Types.False
                                -> case ww1 of wild2 {
                                     Data.Set.Base.Bin ipv ipv1 ipv2 ipv3
                                     -> case ww3 of wild3 {
                                          Data.Set.Base.Bin ipv4 ipv5 ipv6 ipv7
                                          -> case Data.Set.Base.difference_$shedgeDiff
                                                    @ Relvar.Row
                                                    Relvar.$fEqRelvar_$s$fOrdSet
                                                    (Data.Set.Base.NothingS @ Relvar.Row)
                                                    (Data.Set.Base.NothingS @ Relvar.Row)
                                                    ipv
                                                    ipv1
                                                    ipv2
                                                    ipv3
                                                    ipv4
                                                    ipv5
                                                    ipv6
                                                    ipv7 of wild4 {
                                               Data.Set.Base.Bin dt ds1 ds2 ds3 -> GHC.Types.False
                                               Data.Set.Base.Tip -> GHC.Types.True }
                                          Data.Set.Base.Tip -> GHC.Types.False }
                                     Data.Set.Base.Tip -> GHC.Types.True }
                                GHC.Types.True -> GHC.Types.False }
                          } in
                          case ww3 of wild1 {
                            Data.Set.Base.Bin dt ds1 ds2 ds3 -> $j1 dt
                            Data.Set.Base.Tip -> $j1 0 }
                      } in
                      case ww1 of wild1 {
                        Data.Set.Base.Bin dt ds1 ds2 ds3 -> $j dt
                        Data.Set.Base.Tip -> $j 0 } }) -}
bb8d29b905a96b7c17ed859bf7f076c0
  $w$c==1 ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fEq[]_$s$c==2 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ [Relvar.Elem]
                        Relvar.$fEqTable_$s$fEq[]
                        ww1
                        ww3 }) -}
5d84ccfe27e771a7a6fa0491c27e8abc
  $w$c> ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }
                   GHC.Types.GT -> GHC.Types.True }) -}
a8cb99652a2509424f2ed8562977dfeb
  $w$c>= ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.$w$ccompare14
                             @ [Relvar.Elem]
                             Relvar.$fOrdTable_$s$fOrd[]
                             ww1
                             ww3 of wild1 {
                        DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.True }) -}
8774a4f88dc30d102ffeae537180eb9c
  $w$ccompare ::
    [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String]
                   ww1 :: [[Relvar.Elem]]
                   ww2 :: [GHC.Base.String]
                   ww3 :: [[Relvar.Elem]] ->
                 case GHC.Classes.$fOrd[]_$s$ccompare2 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> GHC.Classes.$w$ccompare14
                        @ [Relvar.Elem]
                        Relvar.$fOrdTable_$s$fOrd[]
                        ww1
                        ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
739ead08fede687ca65196edf4c545f4
  $w$crename ::
    Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes
                   ww1 :: Data.Set.Base.Set Relvar.Row
                   w :: [GHC.Base.String]
                   w1 :: [GHC.Base.String] ->
                 (# Relvar.LSet.$w$crename
                      @ Data.Typeable.Internal.TypeRep
                      Data.Typeable.Internal.$fOrdTypeRep
                      ww
                      w
                      w1,
                    letrec {
                      go3 :: [Relvar.Row]
                             -> Data.Set.Base.Set
                                  (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                             -> [Relvar.Row]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ z' :: [Relvar.Row]
                          ds :: Data.Set.Base.Set
                                  (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                        case ds of wild {
                          Data.Set.Base.Bin dt x l r
                          -> go3
                               (GHC.Types.:
                                  @ Relvar.Row
                                  (Relvar.LSet.$w$crename @ Relvar.Elem Relvar.$fOrdElem x w w1)
                                  (go3 z' r))
                               l
                          Data.Set.Base.Tip -> z' }
                    } in
                    Relvar.$fLabelOpRelvar_$sfromList
                      (go3 (GHC.Types.[] @ Relvar.Row) ww1) #)) -}
739ead08fede687ca65196edf4c545f4
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Relvar.Attributes
    -> Data.Set.Base.Set Relvar.Row
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: Relvar.Attributes
                   ww2 :: Data.Set.Base.Set Relvar.Row ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Base.$w$cshowsPrec
                       @ (GHC.Base.String, Data.Typeable.Internal.TypeRep)
                       Relvar.$fLabelOpRelvar_$s$fShow(,)
                       0
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Base.$w$cshowsPrec
                       @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                       Relvar.$fShowRelvar_$s$fShowSet
                       0
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Relvar.$fShowRelvar6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Relvar.$fShowRelvar5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Relvar.$fShowRelvar4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Relvar.$fShowRelvar3
                                   (f1 (GHC.Base.++ @ GHC.Types.Char Relvar.$fShowRelvar2 x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
effb1f2342fc4535dd67b6c0057a93f3
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [GHC.Base.String]
    -> [[Relvar.Elem]]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
9462e84573b9a29d6a586dd5ee242893
  $w$j ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Data.Typeable.Internal.KindRep]
    -> [Data.Typeable.Internal.TypeRep]
    -> (# GHC.Prim.Word#,
          GHC.Prim.Word#,
          Data.Typeable.Internal.TyCon,
          [Data.Typeable.Internal.KindRep],
          [Data.Typeable.Internal.TypeRep] #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Word#[OneShot]
                   ww1 :: GHC.Prim.Word#[OneShot]
                   ww2 :: GHC.Base.String[OneShot]
                   ww3 :: GHC.Base.String[OneShot]
                   ww4 :: GHC.Base.String[OneShot]
                   w :: [Data.Typeable.Internal.KindRep][OneShot]
                   w1 :: [Data.Typeable.Internal.TypeRep][OneShot] ->
                 case Data.Typeable.Internal.$wmkPolyTyConApp
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        w
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           w1
                           Relvar.$stypeOf60) of ww6 { (#,,,,#) ww7 ww8 ww9 ww10 ww11 ->
                 case ww9 of ww5 { Data.Typeable.Internal.TyCon ww12 ww13 ww14 ww15 ww16 ->
                 Data.Typeable.Internal.$wmkPolyTyConApp
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww10
                   (GHC.Base.++
                      @ Data.Typeable.Internal.TypeRep
                      ww11
                      Relvar.$stypeOf60) } }) -}
5c2ceaeb41b920fa29a06855a36eb437
  $welems ::
    Data.Set.Base.Set Relvar.Row -> [[(GHC.Base.String, Relvar.Elem)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: Data.Set.Base.Set Relvar.Row ->
                 Relvar.elems_go5
                   (GHC.Types.[] @ [(GHC.Base.String, Relvar.Elem)])
                   ww) -}
2e766fd30afadb08106ad2995c722bd6
  $welems' ::
    Data.Set.Base.Set Relvar.Row
    -> GHC.Types.Bool -> [GHC.Base.String] -> [[Relvar.Elem]]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Data.Set.Base.Set Relvar.Row
                   w :: GHC.Types.Bool
                   w1 :: [GHC.Base.String] ->
                 letrec {
                   go3 :: [[Relvar.Elem]]
                          -> Data.Set.Base.Set
                               (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                          -> [[Relvar.Elem]]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [[Relvar.Elem]]
                       ds :: Data.Set.Base.Set
                               (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)) ->
                     case ds of wild {
                       Data.Set.Base.Bin dt x l r
                       -> go3
                            (GHC.Types.:
                               @ [Relvar.Elem]
                               (Relvar.LSet.$wextract @ Relvar.Elem w x w1)
                               (go3 z' r))
                            l
                       Data.Set.Base.Tip -> z' }
                 } in
                 go3 (GHC.Types.[] @ [Relvar.Elem]) ww) -}
739ead08fede687ca65196edf4c545f4
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Relvar.Row
    -> [Relvar.Row]
    -> Data.Set.Base.Set Relvar.Row
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c6c474e51d2ab9dfdfc2c8974754b4a7
  $wkeepRight ::
    Relvar.Attributes -> [GHC.Base.String] -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding: (\ ww :: Relvar.Attributes w :: [GHC.Base.String] ->
                 letrec {
                   go3 :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[GHC.Types.Char]] ->
                     case ds of wild {
                       [] -> w
                       : y ys
                       -> case GHC.List.elem
                                 @ GHC.Base.String
                                 GHC.Classes.$fEq[]_$s$fEq[]1
                                 y
                                 w of wild1 {
                            GHC.Types.False -> GHC.Types.: @ [GHC.Types.Char] y (go3 ys)
                            GHC.Types.True -> go3 ys } }
                 } in
                 go3
                   (Relvar.LSet.$w$clabels @ Data.Typeable.Internal.TypeRep ww)) -}
830b3b107514c3401c2f40cdc5b12224
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Base.Map GHC.Base.String a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
4e0d3282f94a35020cca6a68bc7b97f0
  $wrelvar ::
    [GHC.Base.String]
    -> [Data.Typeable.Internal.TypeRep]
    -> [[Relvar.Elem]]
    -> (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String]
                   w1 :: [Data.Typeable.Internal.TypeRep]
                   w2 :: [[Relvar.Elem]] ->
                 case GHC.List.elem
                        @ [GHC.Types.Char]
                        GHC.Classes.$fEq[]_$s$fEq[]1
                        (GHC.Types.[] @ GHC.Types.Char)
                        w of wild {
                   GHC.Types.False
                   -> case Relvar.LSet.hasDups w of wild2 {
                        GHC.Types.False
                        -> (# Relvar.LSet.fromList
                                @ Data.Typeable.Internal.TypeRep
                                Data.Typeable.Internal.$fOrdTypeRep
                                w
                                w1,
                              Relvar.$fLabelOpRelvar_$sfromList
                                (GHC.Base.map
                                   @ [Relvar.Elem]
                                   @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                                   (Relvar.LSet.fromList @ Relvar.Elem Relvar.$fOrdElem w)
                                   w2) #)
                        GHC.Types.True
                        -> case Relvar.LSet.checkLabels2
                           ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                           of {} }
                   GHC.Types.True
                   -> case Relvar.LSet.checkLabels1
                      ret_ty (# Relvar.Attributes, Data.Set.Base.Set Relvar.Row #)
                      of {} }) -}
d82fb923fa92e2a772d70104f78703c5
  $wtable ::
    Relvar.Relvar
    -> GHC.Base.Maybe [GHC.Base.String]
    -> GHC.Base.Maybe [(GHC.Base.String, Relvar.ColOrder)]
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> (# [GHC.Base.String], [[Relvar.Elem]] #)
  {- Arity: 4, Strictness: <L,U(1*U,1*U)><L,U><L,1*U><L,1*U>,
     Inline: [0] -}
92b36af06395478ed32609304cc2e6e5
  type Attributes = Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
fbde8b2c937abccbc0eea6bc2535c692
  data ColOrder = Asc | Desc
    Promotable
739ead08fede687ca65196edf4c545f4
  data Elem
    = Nil
    | B GHC.Types.Bool
    | C GHC.Types.Char
    | S GHC.Base.String
    | T Data.Text.Internal.Text
    | I GHC.Types.Int
    | J GHC.Integer.Type.Integer
    | D GHC.Types.Double
    | DD Data.Time.Calendar.Days.Day
    | DT Data.Time.Clock.UTC.UTCTime
    | BS Data.ByteString.Internal.ByteString
    | A [Relvar.Elem]
    | T2 (Relvar.Elem, Relvar.Elem)
    | T3 (Relvar.Elem, Relvar.Elem, Relvar.Elem)
    | R Relvar.Relvar
    | DW (Data.Ord.Down Relvar.Elem)
53813a3ee68b7cee9701acd995e0e5df
  class Elementable a where
    toElem :: a -> Relvar.Elem
    fromElem :: Relvar.Elem -> GHC.Base.Maybe a
739ead08fede687ca65196edf4c545f4
  data Relvar
    = Relvar {attributes :: Relvar.Attributes,
              rdata :: Data.Set.Base.Set Relvar.Row}
739ead08fede687ca65196edf4c545f4
  type Row = Relvar.LSet.LSet Relvar.Elem
d68f3e08edd39812aceff63f53d75233
  data Table
    = Table {header :: [GHC.Base.String], tdata :: [[Relvar.Elem]]}
f88f723fc1472d57f85d2158e352f7e7
  attributes :: Relvar.Relvar -> Relvar.Attributes
  RecSel Relvar.Relvar
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Relvar ->
                 case ds of wild { Relvar.Relvar ds1 ds2 -> ds1 }) -}
d5cad50b3627c7d2861dbcd373092882
  card :: Relvar.Relvar -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ r :: Relvar.Relvar ->
                 case r of wild { Relvar.Relvar ds ds1 ->
                 case ds1 of wild1 {
                   Data.Set.Base.Bin dt ds2 ds3 ds4 -> GHC.Types.I# dt
                   Data.Set.Base.Tip -> GHC.Types.I# 0 } }) -}
950b4a17849d0b15865cf1ca7da8893d
  common :: Relvar.Relvar -> Relvar.Relvar -> Relvar.Attributes
  {- Arity: 2, Strictness: <L,1*U(1*U,A)><L,1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Relvar.Relvar r2 :: Relvar.Relvar ->
                 Relvar.LSet.common
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep
                   (case r1 of wild { Relvar.Relvar ds ds1 -> ds })
                   (case r2 of wild { Relvar.Relvar ds ds1 -> ds })) -}
df53ccc7b8be969c0d24661186c25521
  dee :: Relvar.Relvar
  {- Strictness: m,
     Unfolding: (Relvar.Relvar Relvar.dee2 Relvar.dee1) -}
40e923188db64b98ec883392f389382e
  dee1 :: Data.Set.Base.Set Relvar.Row
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Set.Base.Bin
                   @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
                   1
                   (Data.Set.Base.Tip @ (GHC.Base.String, Relvar.Elem))
                   (Data.Set.Base.Tip
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))
                   (Data.Set.Base.Tip
                      @ (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem)))) -}
7ce356095779618638c724e0202f7acc
  dee2 :: Relvar.LSet.LSet Data.Typeable.Internal.TypeRep
  {- Unfolding: (Relvar.LSet.fromList
                   @ Data.Typeable.Internal.TypeRep
                   Data.Typeable.Internal.$fOrdTypeRep
                   (GHC.Types.[] @ GHC.Base.String)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
c3e073e8fa5ef33016d825848a4ef9c6
  dum :: Relvar.Relvar
  {- Strictness: m,
     Unfolding: (Relvar.Relvar
                   Relvar.dee2
                   (Data.Set.Base.Tip @ Relvar.Row)) -}
e54c19aa41b7a4352a5c97637e95ddb4
  elems :: Relvar.Relvar -> [[(GHC.Base.String, Relvar.Elem)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Relvar.Relvar ->
                 case w of ww { Relvar.Relvar ww1 ww2 -> Relvar.$welems ww2 }) -}
d78ace6adc3bfe6b637caabd68efa7fe
  elems' ::
    Relvar.Relvar
    -> GHC.Types.Bool -> [GHC.Base.String] -> [[Relvar.Elem]]
  {- Arity: 3, Strictness: <S(LS),1*U(A,1*U)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: GHC.Types.Bool
                   w2 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 Relvar.$welems' ww2 w1 w2 }) -}
99f130558a6072db7c7aedaa0aed2075
  elems_go5 ::
    [[(GHC.Base.String, Relvar.Elem)]]
    -> Data.Set.Base.Set
         (Data.Set.Base.Set (GHC.Base.String, Relvar.Elem))
    -> [[(GHC.Base.String, Relvar.Elem)]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
1e205cf57b262b4e987e5f3f40a8267e
  header :: Relvar.Table -> [GHC.Base.String]
  RecSel Relvar.Table
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Table ->
                 case ds of wild { Relvar.Table ds1 ds2 -> ds1 }) -}
cfd1cf6a02e0c835dcd5fd7c3b2a5386
  keepLeft :: Relvar.Relvar -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*U,A)><S,U>,
     Unfolding: (\ r :: Relvar.Relvar leftlbls :: [GHC.Base.String] ->
                 GHC.Base.++
                   @ [GHC.Types.Char]
                   leftlbls
                   (case r of wild { Relvar.Relvar ds ds1 ->
                    GHC.List.filter
                      @ [GHC.Types.Char]
                      (\ x :: GHC.Base.String ->
                       case GHC.List.elem
                              @ GHC.Base.String
                              GHC.Classes.$fEq[]_$s$fEq[]1
                              x
                              leftlbls of wild1 {
                         GHC.Types.False -> GHC.Types.True
                         GHC.Types.True -> GHC.Types.False })
                      (Relvar.LSet.$fLabelOpSet1
                         @ Data.Typeable.Internal.TypeRep
                         (GHC.Types.[] @ [GHC.Types.Char])
                         ds) })) -}
61233f2057ef6728f5421bce4f6beb21
  keepRight ::
    Relvar.Relvar -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Relvar.Relvar w1 :: [GHC.Base.String] ->
                 case w of ww { Relvar.Relvar ww1 ww2 ->
                 Relvar.$wkeepRight ww1 w1 }) -}
a4b815bb45a08feacc674ce38233c30e
  rdata :: Relvar.Relvar -> Data.Set.Base.Set Relvar.Row
  RecSel Relvar.Relvar
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Relvar ->
                 case ds of wild { Relvar.Relvar ds1 ds2 -> ds2 }) -}
5a732440cdeabb63e5f290744040033a
  relvar ::
    [GHC.Base.String]
    -> [Data.Typeable.Internal.TypeRep]
    -> [[Relvar.Elem]]
    -> Relvar.Relvar
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [GHC.Base.String]
                   w1 :: [Data.Typeable.Internal.TypeRep]
                   w2 :: [[Relvar.Elem]] ->
                 case Relvar.$wrelvar w w1 w2 of ww { (#,#) ww1 ww2 ->
                 Relvar.Relvar ww1 ww2 }) -}
3e714518e88d946b00931d8f624f03e6
  table ::
    Relvar.Relvar
    -> GHC.Base.Maybe [GHC.Base.String]
    -> GHC.Base.Maybe [(GHC.Base.String, Relvar.ColOrder)]
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> Relvar.Table
  {- Arity: 4, Strictness: <L,U(1*U,1*U)><L,U><L,1*U><L,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Relvar.Relvar
                   w1 :: GHC.Base.Maybe [GHC.Base.String]
                   w2 :: GHC.Base.Maybe [(GHC.Base.String, Relvar.ColOrder)]
                   w3 :: GHC.Base.Maybe [GHC.Types.Int] ->
                 case Relvar.$wtable w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Relvar.Table ww1 ww2 }) -}
27c8885d02a6d31374bc1986a1dda559
  tdata :: Relvar.Table -> [[Relvar.Elem]]
  RecSel Relvar.Table
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Relvar.Table ->
                 case ds of wild { Relvar.Table ds1 ds2 -> ds2 }) -}
6cf8c41e1bf3fcbbbc69a1e0dcd0b8f5
  tyA :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Relvar.$stypeOf_w1 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 17730107610217102821
                        __word 9866972337190828755
                        Relvar.$stypeOf_wild1
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Relvar.tyA1 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      Data.Typeable.Internal.TypeRep
                        dt1
                        dt2
                        Relvar.$stypeOf_wild1
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        wild2 } }) -}
a6b4173dd7e4d4b31ac77c3dc945a5ee
  tyA1 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Relvar.$stypeOf33
                   Relvar.tyA2) -}
c376be362056b71b83ffee54ea524b2f
  tyA2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Relvar.tyA_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
129e357e3e5e8c6c9fafe859e73b542d
  tyA_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
83008f24ed76ab8b5ae16dba9ef5a2c3
  tyB :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 15899861992609591342
                   __word 8208526680161485329
                   Relvar.tyB_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b258120d34fe47bcada7426e536b3468
  tyBS :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 1214418920188070609
                   __word 3073911995265726632
                   Relvar.tyBS_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
a3684b45227b26102c4ad67cb43f3e02
  tyBS_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 1214418920188070609
                   __word 3073911995265726632
                   Relvar.$stypeOf25
                   Relvar.$stypeOf24
                   Relvar.$stypeOf23) -}
6028c83bac671cca73e1f310d4ce4a1c
  tyB_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 15899861992609591342
                   __word 8208526680161485329
                   Relvar.$stypeOf30
                   Relvar.$stypeOf34
                   Relvar.$stypeOf53) -}
101d14c580ddd970ab3cac687da0e0e3
  tyC :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 16781394633280494409
                   __word 2520638044472077920
                   Relvar.tyC_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
73eee5847c647e7c79901c143cb8d02e
  tyC_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 16781394633280494409
                   __word 2520638044472077920
                   Relvar.$stypeOf30
                   Relvar.$stypeOf34
                   Relvar.$stypeOf50) -}
5032d4846f251b011792ed630ec184de
  tyD :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 8705313363352784917
                   __word 10768904120299974647
                   Relvar.tyD_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
af96fe385cad4f430ee35975c3c5c5eb
  tyDD :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 6931567370569627783
                   __word 9977288903433279101
                   Relvar.tyDD_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
80f63c7b026c5277261fd6485c162d8c
  tyDD_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 6931567370569627783
                   __word 9977288903433279101
                   Relvar.$stypeOf11
                   Relvar.$stypeOf10
                   Relvar.$stypeOf9) -}
801878a4a1344bc170a0f03a333dd95c
  tyDT :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 17224245164732031713
                   __word 6424205804983884749
                   Relvar.tyDT_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
098190a2c9e3937a557dbfd37144ca03
  tyDT_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 17224245164732031713
                   __word 6424205804983884749
                   Relvar.$stypeOf11
                   Relvar.$stypeOf15
                   Relvar.$stypeOf14) -}
011f7fcc3dde998185b71696ecc8ac71
  tyDW :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Relvar.$stypeOf_w1 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 8785563205482896514
                        __word 17609251326237537512
                        Relvar.$stypeOf_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Relvar.typeRep1 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      Data.Typeable.Internal.TypeRep
                        dt1
                        dt2
                        Relvar.$stypeOf_wild
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        wild2 } }) -}
256dd0dfb057b33c0ac31e24de4a79db
  tyD_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 8705313363352784917
                   __word 10768904120299974647
                   Relvar.$stypeOf30
                   Relvar.$stypeOf34
                   Relvar.$stypeOf47) -}
da3f0af4463d5b782303a9e18aea8407
  tyI :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 16287469036901857884
                   __word 16587023596664995632
                   Relvar.tyI_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
b7df81d4485c7b15aa2d9e7390a1de14
  tyI_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 16287469036901857884
                   __word 16587023596664995632
                   Relvar.$stypeOf30
                   Relvar.$stypeOf34
                   Relvar.$stypeOf44) -}
c32df67fdfd5a22d340c035e8a045936
  tyJ :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 4243490490217825131
                   __word 6185988462045966752
                   Relvar.tyJ_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
d8fb4f9270833ed1ba14d3043c9c6b1a
  tyJ_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 4243490490217825131
                   __word 6185988462045966752
                   Relvar.$stypeOf41
                   Relvar.$stypeOf40
                   Relvar.$stypeOf39) -}
bab86fe3988990a3455616aa00294e73
  tyR :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 13124103366765384385
                   __word 849460160756247757
                   Relvar.tyR_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
eaf8b84863ff1654afe306d9b0ea86dd
  tyR_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 13124103366765384385
                   __word 849460160756247757
                   Relvar.$stypeOf3
                   Relvar.$stypeOf2
                   Relvar.$stypeOf2) -}
208f4920435b48fffd602528e06bd0c7
  tyS :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Relvar.tyS_w1 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 17730107610217102821
                        __word 9866972337190828755
                        Relvar.$stypeOf_wild1
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Relvar.tyS1 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      Data.Typeable.Internal.TypeRep
                        dt1
                        dt2
                        Relvar.$stypeOf_wild1
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        wild2 } }) -}
25dc1315e5bf49fa0e9be58b8a39b5e1
  tyS1 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Relvar.$stypeOf33
                   Relvar.tyS2) -}
1cd9da7ff63d76ac3d3cec5099b98a1d
  tyS2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Relvar.tyS_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
ae7a9dd05edb96393352b2bce0c7b660
  tyS3 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Relvar.tyC
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
91ef89c8a6736f914150080dc81313a2
  tyS_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
fef1bd44ed6bdf9ad99c378962c22297
  tyS_w1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Base.++
                   @ Data.Typeable.Internal.TypeRep
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Relvar.tyS3) -}
7d33d8361830b6d3e1087241d3408010
  tyT :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 18185009763523993398
                   __word 12880743153645134909
                   Relvar.tyT_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
f0b12bcc50d03c4d613d360781f9c430
  tyT1 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Relvar.$stypeOf59
                   Relvar.tyT5) -}
3e3b8d07b4d6212df4e4788ad3c8c419
  tyT2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Relvar.$stypeOf_w1 of wild2 {
                   []
                   -> Data.Typeable.Internal.TypeRep
                        __word 17502837480397947244
                        __word 15872498598114190556
                        Relvar.$stypeOf_wild2
                        (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Relvar.tyT1 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      case GHC.Base.++
                             @ Data.Typeable.Internal.TypeRep
                             wild2
                             Relvar.$stypeOf60 of wild1 {
                        []
                        -> Data.Typeable.Internal.TypeRep
                             __word 17502837480397947244
                             __word 15872498598114190556
                             (Data.Typeable.Internal.TyCon
                                __word 17502837480397947244
                                __word 15872498598114190556
                                Relvar.$stypeOf30
                                Relvar.$stypeOf29
                                Relvar.$stypeOf_ww5)
                             (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                             (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        : ipv2 ipv3
                        -> case GHC.Fingerprint.fingerprintFingerprints
                                  (GHC.Types.:
                                     @ GHC.Fingerprint.Type.Fingerprint
                                     (GHC.Fingerprint.Type.Fingerprint
                                        __word 17502837480397947244
                                        __word 15872498598114190556)
                                     (let {
                                        z2 :: [GHC.Fingerprint.Type.Fingerprint]
                                        = Data.Typeable.Internal.listTc_$sgo ipv2 ipv3
                                      } in
                                      letrec {
                                        go3 :: [Data.Typeable.Internal.TypeRep]
                                               -> [GHC.Fingerprint.Type.Fingerprint]
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ ds :: [Data.Typeable.Internal.TypeRep] ->
                                          case ds of wild3 {
                                            [] -> z2
                                            : y ys
                                            -> case y of wild4 { Data.Typeable.Internal.TypeRep dt4 dt5 ds1 ds2 ds3 ->
                                               GHC.Types.:
                                                 @ GHC.Fingerprint.Type.Fingerprint
                                                 (GHC.Fingerprint.Type.Fingerprint dt4 dt5)
                                                 (go3 ys) } }
                                      } in
                                      go3
                                        (GHC.Types.[]
                                           @ Data.Typeable.Internal.KindRep))) of dt4 { GHC.Fingerprint.Type.Fingerprint dt5 dt6 ->
                           Data.Typeable.Internal.TypeRep
                             dt5
                             dt6
                             (Data.Typeable.Internal.TyCon
                                __word 17502837480397947244
                                __word 15872498598114190556
                                Relvar.$stypeOf30
                                Relvar.$stypeOf29
                                Relvar.$stypeOf_ww5)
                             (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                             wild1 } } } }) -}
7e0bba1c6b724703f95971b4f65ec137
  tyT2_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
e08eb71f47475bba102f779009268422
  tyT3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Relvar.$stypeOf_w1 of wild2 {
                   []
                   -> case Relvar.$w$j
                             __word 16902069906016602646
                             __word 15238449149262190978
                             Relvar.$stypeOf30
                             Relvar.$stypeOf29
                             Relvar.$stypeOf_ww7
                             (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                             (GHC.Types.[]
                                @ Data.Typeable.Internal.TypeRep) of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                      Data.Typeable.Internal.TypeRep ww1 ww2 ww3 ww4 ww5 }
                   : ipv ipv1
                   -> case GHC.Fingerprint.fingerprintFingerprints
                             Relvar.tyT6 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                      case Relvar.$w$j
                             __word 16902069906016602646
                             __word 15238449149262190978
                             Relvar.$stypeOf30
                             Relvar.$stypeOf29
                             Relvar.$stypeOf_ww7
                             (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                             wild2 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                      Data.Typeable.Internal.TypeRep ww1 ww2 ww3 ww4 ww5 } } }) -}
36b7eeab9d1ef2df87225f08b48ee48f
  tyT3_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
7defa877cbbab64d1592b948901b2f11
  tyT5 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Relvar.tyT2_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
467e6b5f0a1377f5dbfd6f60fd8e8524
  tyT6 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Relvar.$stypeOf67
                   Relvar.tyT7) -}
821da0c0e4927cdc9786135a4e4d346a
  tyT7 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Relvar.tyT3_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
ce92eec5ba343ca38b6e0fa491a17e6a
  tyT_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 18185009763523993398
                   __word 12880743153645134909
                   Relvar.$stypeOf20
                   Relvar.$stypeOf19
                   Relvar.$stypeOf18) -}
23056910a489f72571bdc353b23d7545
  tyZ :: Data.Typeable.Internal.TypeRep
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TypeRep
                   __word 15843165073189925570
                   __word 13730769858450861905
                   Relvar.tyZ_wild
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
c3398de8347f97427690265f3beb917d
  tyZ_wild :: Data.Typeable.Internal.TyCon
  {- Strictness: m,
     Unfolding: (Data.Typeable.Internal.TyCon
                   __word 15843165073189925570
                   __word 13730769858450861905
                   Relvar.$stypeOf30
                   Relvar.$stypeOf29
                   Relvar.$stypeOf28) -}
1038cb461d207644d542d44173087977
  typeRep :: Relvar.Elem -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Relvar.Elem ->
                 case ds of wild {
                   Relvar.Nil -> Relvar.tyZ
                   Relvar.B x -> Relvar.tyB
                   Relvar.C x -> Relvar.tyC
                   Relvar.S x -> Relvar.tyS
                   Relvar.T x -> Relvar.tyT
                   Relvar.I x -> Relvar.tyI
                   Relvar.J x -> Relvar.tyJ
                   Relvar.D x -> Relvar.tyD
                   Relvar.DD x -> Relvar.tyDD
                   Relvar.DT x -> Relvar.tyDT
                   Relvar.BS x -> Relvar.tyBS
                   Relvar.A x -> Relvar.tyA
                   Relvar.T2 x -> Relvar.tyT2
                   Relvar.T3 x -> Relvar.tyT3
                   Relvar.R x -> Relvar.tyR
                   Relvar.DW x -> Relvar.tyDW }) -}
75aadc7a39f248d245f12b2908e5978b
  typeRep1 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Relvar.$stypeOf6
                   Relvar.typeRep2) -}
3f21af69210b918c0a424d5dd80f3918
  typeRep2 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (Relvar.typeRep_go
                   (GHC.Types.[] @ Data.Typeable.Internal.KindRep)) -}
5df6da91ea49fa97aa61e631425bb894
  typeRep_go ::
    [Data.Typeable.Internal.TypeRep]
    -> [GHC.Fingerprint.Type.Fingerprint]
  {- Arity: 1, Strictness: <S,1*U> -}
25f620a3e9fe9ad2ddfaac30dd3fbdca
  types :: Relvar.Relvar -> [Data.Typeable.Internal.TypeRep]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ r :: Relvar.Relvar ->
                 case r of wild { Relvar.Relvar ds ds1 ->
                 Relvar.LSet.values1
                   @ Data.Typeable.Internal.TypeRep
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   ds }) -}
9a8774f641ce1b2ecfcdbd3caee16c57
  types' ::
    Relvar.Relvar
    -> GHC.Types.Bool
    -> [GHC.Base.String]
    -> [Data.Typeable.Internal.TypeRep]
  {- Arity: 3, Strictness: <L,1*U(1*U,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ r :: Relvar.Relvar
                   chckDup :: GHC.Types.Bool
                   lbls :: [GHC.Base.String] ->
                 Relvar.LSet.$wextract
                   @ Data.Typeable.Internal.TypeRep
                   chckDup
                   (case r of wild { Relvar.Relvar ds ds1 -> ds })
                   lbls) -}
instance Relvar.Elementable [(,)] = Relvar.$fElementable(,)
instance Relvar.Elementable [(,,)] = Relvar.$fElementable(,,)
instance Relvar.Elementable [GHC.Types.Bool]
  = Relvar.$fElementableBool
instance Relvar.Elementable [Data.ByteString.Internal.ByteString]
  = Relvar.$fElementableByteString
instance Relvar.Elementable [GHC.Types.Char]
  = Relvar.$fElementableChar
instance Relvar.Elementable [Data.Time.Calendar.Days.Day]
  = Relvar.$fElementableDay
instance Relvar.Elementable [GHC.Types.Double]
  = Relvar.$fElementableDouble
instance Relvar.Elementable [Data.Ord.Down]
  = Relvar.$fElementableDown
instance Relvar.Elementable [GHC.Types.Int]
  = Relvar.$fElementableInt
instance Relvar.Elementable [GHC.Integer.Type.Integer]
  = Relvar.$fElementableInteger
instance Relvar.Elementable [Relvar.Relvar]
  = Relvar.$fElementableRelvar
instance Relvar.Elementable [Data.Text.Internal.Text]
  = Relvar.$fElementableText
instance Relvar.Elementable [Data.Time.Clock.UTC.UTCTime]
  = Relvar.$fElementableUTCTime
instance Relvar.Elementable [[]] = Relvar.$fElementable[]
instance Relvar.Elementable [[]] = Relvar.$fElementable[]0
instance GHC.Classes.Eq [Relvar.ColOrder] = Relvar.$fEqColOrder
instance GHC.Classes.Eq [Relvar.Elem] = Relvar.$fEqElem
instance GHC.Classes.Eq [Relvar.Relvar] = Relvar.$fEqRelvar
instance GHC.Classes.Eq [Relvar.Table] = Relvar.$fEqTable
instance Relvar.LSet.LabelOp [Relvar.Relvar]
  = Relvar.$fLabelOpRelvar
instance GHC.Classes.Ord [Relvar.ColOrder] = Relvar.$fOrdColOrder
instance GHC.Classes.Ord [Relvar.Elem] = Relvar.$fOrdElem
instance GHC.Classes.Ord [Relvar.Relvar] = Relvar.$fOrdRelvar
instance GHC.Classes.Ord [Relvar.Table] = Relvar.$fOrdTable
instance GHC.Read.Read [Relvar.ColOrder] = Relvar.$fReadColOrder
instance GHC.Show.Show [Relvar.ColOrder] = Relvar.$fShowColOrder
instance GHC.Show.Show [Relvar.Elem] = Relvar.$fShowElem
instance GHC.Show.Show [Relvar.Relvar] = Relvar.$fShowRelvar
instance GHC.Show.Show [Relvar.Table] = Relvar.$fShowTable
"SPEC/Relvar $dmreadsPrec @ ColOrder" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                  Relvar.ColOrder
  GHC.Read.$dmreadsPrec @ Relvar.ColOrder $dRead
  = Relvar.$fReadColOrder_$s$dmreadsPrec
"SPEC/Relvar $fEq(,) @ [Char] @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                [GHC.Types.Char]
                                                      $dEq1 :: GHC.Classes.Eq Relvar.Elem
  GHC.Classes.$fEq(,) @ [GHC.Types.Char] @ Relvar.Elem $dEq $dEq1
  = Relvar.$fEqRelvar_$s$fEq(,)
"SPEC/Relvar $fEq(,) @ [Char] @ TypeRep" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                   [GHC.Types.Char]
                                                         $dEq1 :: GHC.Classes.Eq
                                                                    Data.Typeable.Internal.TypeRep
  GHC.Classes.$fEq(,) @ [GHC.Types.Char]
                      @ Data.Typeable.Internal.TypeRep
                      $dEq
                      $dEq1
  = Relvar.$fEqRelvar_$s$fEq(,)1
"SPEC/Relvar $fEqSet @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 (GHC.Base.String, Relvar.Elem)
  Data.Set.Base.$fEqSet @ (GHC.Base.String, Relvar.Elem) $dEq
  = Relvar.$fEqRelvar_$s$fEqSet
"SPEC/Relvar $fEqSet @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                    (GHC.Base.String,
                                                                     Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fEqSet @ (GHC.Base.String,
                           Data.Typeable.Internal.TypeRep)
                        $dEq
  = Relvar.$fLabelOpRelvar_$s$fEqSet
"SPEC/Relvar $fEqSet_$c/= @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      (GHC.Base.String, Relvar.Elem)
  Data.Set.Base.$fEqSet_$c/= @ (GHC.Base.String, Relvar.Elem) $dEq
  = Relvar.$fEqRelvar_$s$fEqSet_$c/=
"SPEC/Relvar $fEqSet_$c/= @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                         (GHC.Base.String,
                                                                          Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fEqSet_$c/= @ (GHC.Base.String,
                                Data.Typeable.Internal.TypeRep)
                             $dEq
  = Relvar.$fLabelOpRelvar_$s$fEqSet_$c/=
"SPEC/Relvar $fEq[] @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                      Relvar.Elem
  GHC.Classes.$fEq[] @ Relvar.Elem $dEq = Relvar.$fEqTable_$s$fEq[]
"SPEC/Relvar $fEq[]_$c/= @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                           Relvar.Elem
  GHC.Classes.$fEq[]_$c/= @ Relvar.Elem $dEq
  = Relvar.$fEqTable_$s$fEq[]_$c/=
"SPEC/Relvar $fOrd(,) @ [Char] @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                 ([GHC.Types.Char], Relvar.Elem)
                                                       $dOrd :: GHC.Classes.Ord [GHC.Types.Char]
                                                       $dOrd1 :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd(,) @ [GHC.Types.Char]
                       @ Relvar.Elem
                       $dEq
                       $dOrd
                       $dOrd1
  = Relvar.$fEqRelvar_$s$fOrd(,)
"SPEC/Relvar $fOrd(,) @ [Char] @ TypeRep" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                    ([GHC.Types.Char],
                                                                     Data.Typeable.Internal.TypeRep)
                                                          $dOrd :: GHC.Classes.Ord [GHC.Types.Char]
                                                          $dOrd1 :: GHC.Classes.Ord
                                                                      Data.Typeable.Internal.TypeRep
  GHC.Classes.$fOrd(,) @ [GHC.Types.Char]
                       @ Data.Typeable.Internal.TypeRep
                       $dEq
                       $dOrd
                       $dOrd1
  = Relvar.$fLabelOpRelvar_$s$fOrd(,)
"SPEC/Relvar $fOrdSet @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                  (Data.Set.Base.Set
                                                                     (GHC.Base.String, Relvar.Elem))
                                                        $dOrd :: GHC.Classes.Ord
                                                                   (GHC.Base.String, Relvar.Elem)
  Data.Set.Base.$fOrdSet @ (GHC.Base.String, Relvar.Elem) $dEq $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet
"SPEC/Relvar $fOrdSet @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                     (Data.Set.Base.Set
                                                                        (GHC.Base.String,
                                                                         Data.Typeable.Internal.TypeRep))
                                                           $dOrd :: GHC.Classes.Ord
                                                                      (GHC.Base.String,
                                                                       Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet @ (GHC.Base.String,
                            Data.Typeable.Internal.TypeRep)
                         $dEq
                         $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet
"SPEC/Relvar $fOrdSet_$c< @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      (Data.Set.Base.Set
                                                                         (GHC.Base.String,
                                                                          Relvar.Elem))
                                                            $dOrd :: GHC.Classes.Ord
                                                                       (GHC.Base.String,
                                                                        Relvar.Elem)
  Data.Set.Base.$fOrdSet_$c< @ (GHC.Base.String, Relvar.Elem)
                             $dEq
                             $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$c<
"SPEC/Relvar $fOrdSet_$c< @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                         (Data.Set.Base.Set
                                                                            (GHC.Base.String,
                                                                             Data.Typeable.Internal.TypeRep))
                                                               $dOrd :: GHC.Classes.Ord
                                                                          (GHC.Base.String,
                                                                           Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$c< @ (GHC.Base.String,
                                Data.Typeable.Internal.TypeRep)
                             $dEq
                             $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$c<
"SPEC/Relvar $fOrdSet_$c<= @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       (Data.Set.Base.Set
                                                                          (GHC.Base.String,
                                                                           Relvar.Elem))
                                                             $dOrd :: GHC.Classes.Ord
                                                                        (GHC.Base.String,
                                                                         Relvar.Elem)
  Data.Set.Base.$fOrdSet_$c<= @ (GHC.Base.String, Relvar.Elem)
                              $dEq
                              $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$c<=
"SPEC/Relvar $fOrdSet_$c<= @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                          (Data.Set.Base.Set
                                                                             (GHC.Base.String,
                                                                              Data.Typeable.Internal.TypeRep))
                                                                $dOrd :: GHC.Classes.Ord
                                                                           (GHC.Base.String,
                                                                            Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$c<= @ (GHC.Base.String,
                                 Data.Typeable.Internal.TypeRep)
                              $dEq
                              $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$c<=
"SPEC/Relvar $fOrdSet_$c> @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                      (Data.Set.Base.Set
                                                                         (GHC.Base.String,
                                                                          Relvar.Elem))
                                                            $dOrd :: GHC.Classes.Ord
                                                                       (GHC.Base.String,
                                                                        Relvar.Elem)
  Data.Set.Base.$fOrdSet_$c> @ (GHC.Base.String, Relvar.Elem)
                             $dEq
                             $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$c>
"SPEC/Relvar $fOrdSet_$c> @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                         (Data.Set.Base.Set
                                                                            (GHC.Base.String,
                                                                             Data.Typeable.Internal.TypeRep))
                                                               $dOrd :: GHC.Classes.Ord
                                                                          (GHC.Base.String,
                                                                           Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$c> @ (GHC.Base.String,
                                Data.Typeable.Internal.TypeRep)
                             $dEq
                             $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$c>
"SPEC/Relvar $fOrdSet_$c>= @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                       (Data.Set.Base.Set
                                                                          (GHC.Base.String,
                                                                           Relvar.Elem))
                                                             $dOrd :: GHC.Classes.Ord
                                                                        (GHC.Base.String,
                                                                         Relvar.Elem)
  Data.Set.Base.$fOrdSet_$c>= @ (GHC.Base.String, Relvar.Elem)
                              $dEq
                              $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$c>=
"SPEC/Relvar $fOrdSet_$c>= @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                          (Data.Set.Base.Set
                                                                             (GHC.Base.String,
                                                                              Data.Typeable.Internal.TypeRep))
                                                                $dOrd :: GHC.Classes.Ord
                                                                           (GHC.Base.String,
                                                                            Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$c>= @ (GHC.Base.String,
                                 Data.Typeable.Internal.TypeRep)
                              $dEq
                              $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$c>=
"SPEC/Relvar $fOrdSet_$ccompare @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            (Data.Set.Base.Set
                                                                               (GHC.Base.String,
                                                                                Relvar.Elem))
                                                                  $dOrd :: GHC.Classes.Ord
                                                                             (GHC.Base.String,
                                                                              Relvar.Elem)
  Data.Set.Base.$fOrdSet_$ccompare @ (GHC.Base.String, Relvar.Elem)
                                   $dEq
                                   $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$ccompare
"SPEC/Relvar $fOrdSet_$ccompare @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                               (Data.Set.Base.Set
                                                                                  (GHC.Base.String,
                                                                                   Data.Typeable.Internal.TypeRep))
                                                                     $dOrd :: GHC.Classes.Ord
                                                                                (GHC.Base.String,
                                                                                 Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$ccompare @ (GHC.Base.String,
                                      Data.Typeable.Internal.TypeRep)
                                   $dEq
                                   $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$ccompare
"SPEC/Relvar $fOrdSet_$cmax @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                        (Data.Set.Base.Set
                                                                           (GHC.Base.String,
                                                                            Relvar.Elem))
                                                              $dOrd :: GHC.Classes.Ord
                                                                         (GHC.Base.String,
                                                                          Relvar.Elem)
  Data.Set.Base.$fOrdSet_$cmax @ (GHC.Base.String, Relvar.Elem)
                               $dEq
                               $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$cmax
"SPEC/Relvar $fOrdSet_$cmax @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                           (Data.Set.Base.Set
                                                                              (GHC.Base.String,
                                                                               Data.Typeable.Internal.TypeRep))
                                                                 $dOrd :: GHC.Classes.Ord
                                                                            (GHC.Base.String,
                                                                             Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$cmax @ (GHC.Base.String,
                                  Data.Typeable.Internal.TypeRep)
                               $dEq
                               $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$cmax
"SPEC/Relvar $fOrdSet_$cmin @ (String, Elem)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                        (Data.Set.Base.Set
                                                                           (GHC.Base.String,
                                                                            Relvar.Elem))
                                                              $dOrd :: GHC.Classes.Ord
                                                                         (GHC.Base.String,
                                                                          Relvar.Elem)
  Data.Set.Base.$fOrdSet_$cmin @ (GHC.Base.String, Relvar.Elem)
                               $dEq
                               $dOrd
  = Relvar.$fEqRelvar_$s$fOrdSet_$cmin
"SPEC/Relvar $fOrdSet_$cmin @ (String, TypeRep)" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                           (Data.Set.Base.Set
                                                                              (GHC.Base.String,
                                                                               Data.Typeable.Internal.TypeRep))
                                                                 $dOrd :: GHC.Classes.Ord
                                                                            (GHC.Base.String,
                                                                             Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fOrdSet_$cmin @ (GHC.Base.String,
                                  Data.Typeable.Internal.TypeRep)
                               $dEq
                               $dOrd
  = Relvar.$fLabelOpRelvar_$s$fOrdSet_$cmin
"SPEC/Relvar $fOrd[] @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                       [Relvar.Elem]
                                             $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[] @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]
"SPEC/Relvar $fOrd[]_$c< @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                           [Relvar.Elem]
                                                 $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$c< @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$c<
"SPEC/Relvar $fOrd[]_$c<= @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                            [Relvar.Elem]
                                                  $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$c<= @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$c<=
"SPEC/Relvar $fOrd[]_$c> @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                           [Relvar.Elem]
                                                 $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$c> @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$c>
"SPEC/Relvar $fOrd[]_$c>= @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                            [Relvar.Elem]
                                                  $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$c>= @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$c>=
"SPEC/Relvar $fOrd[]_$cmax @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                             [Relvar.Elem]
                                                   $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$cmax @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$cmax
"SPEC/Relvar $fOrd[]_$cmin @ Elem" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                             [Relvar.Elem]
                                                   $dOrd :: GHC.Classes.Ord Relvar.Elem
  GHC.Classes.$fOrd[]_$cmin @ Relvar.Elem $dEq $dOrd
  = Relvar.$fOrdTable_$s$fOrd[]_$cmin
"SPEC/Relvar $fShow(,) @ [Char] @ Elem" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                    [GHC.Types.Char]
                                                        $dShow1 :: GHC.Show.Show Relvar.Elem
  GHC.Show.$fShow(,) @ [GHC.Types.Char] @ Relvar.Elem $dShow $dShow1
  = Relvar.$fShowRelvar_$s$fShow(,)
"SPEC/Relvar $fShow(,) @ [Char] @ TypeRep" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                       [GHC.Types.Char]
                                                           $dShow1 :: GHC.Show.Show
                                                                        Data.Typeable.Internal.TypeRep
  GHC.Show.$fShow(,) @ [GHC.Types.Char]
                     @ Data.Typeable.Internal.TypeRep
                     $dShow
                     $dShow1
  = Relvar.$fLabelOpRelvar_$s$fShow(,)
"SPEC/Relvar $fShow(,)_$cshow @ [Char] @ Elem" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                           [GHC.Types.Char]
                                                               $dShow1 :: GHC.Show.Show Relvar.Elem
  GHC.Show.$fShow(,)_$cshow @ [GHC.Types.Char]
                            @ Relvar.Elem
                            $dShow
                            $dShow1
  = Relvar.$fShowRelvar_$s$fShow(,)_$cshow
"SPEC/Relvar $fShow(,)_$cshow @ [Char] @ TypeRep" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                              [GHC.Types.Char]
                                                                  $dShow1 :: GHC.Show.Show
                                                                               Data.Typeable.Internal.TypeRep
  GHC.Show.$fShow(,)_$cshow @ [GHC.Types.Char]
                            @ Data.Typeable.Internal.TypeRep
                            $dShow
                            $dShow1
  = Relvar.$fLabelOpRelvar_$s$fShow(,)_$cshow
"SPEC/Relvar $fShow(,)_$cshowList @ [Char] @ Elem" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                               [GHC.Types.Char]
                                                                   $dShow1 :: GHC.Show.Show
                                                                                Relvar.Elem
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ Relvar.Elem
                                $dShow
                                $dShow1
  = Relvar.$fShowRelvar_$s$fShow(,)_$cshowList
"SPEC/Relvar $fShow(,)_$cshowList @ [Char] @ TypeRep" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                  [GHC.Types.Char]
                                                                      $dShow1 :: GHC.Show.Show
                                                                                   Data.Typeable.Internal.TypeRep
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ Data.Typeable.Internal.TypeRep
                                $dShow
                                $dShow1
  = Relvar.$fLabelOpRelvar_$s$fShow(,)_$cshowList
"SPEC/Relvar $fShowSet @ (String, Elem)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                     (GHC.Base.String, Relvar.Elem)
  Data.Set.Base.$fShowSet @ (GHC.Base.String, Relvar.Elem) $dShow
  = Relvar.$fShowRelvar_$s$fShowSet
"SPEC/Relvar $fShowSet @ (String, TypeRep)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                        (GHC.Base.String,
                                                                         Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fShowSet @ (GHC.Base.String,
                             Data.Typeable.Internal.TypeRep)
                          $dShow
  = Relvar.$fLabelOpRelvar_$s$fShowSet
"SPEC/Relvar $fShowSet_$cshow @ (String, Elem)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            (GHC.Base.String,
                                                                             Relvar.Elem)
  Data.Set.Base.$fShowSet_$cshow @ (GHC.Base.String, Relvar.Elem)
                                 $dShow
  = Relvar.$fShowRelvar_$s$fShowSet_$cshow
"SPEC/Relvar $fShowSet_$cshow @ (String, TypeRep)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                               (GHC.Base.String,
                                                                                Data.Typeable.Internal.TypeRep)
  Data.Set.Base.$fShowSet_$cshow @ (GHC.Base.String,
                                    Data.Typeable.Internal.TypeRep)
                                 $dShow
  = Relvar.$fLabelOpRelvar_$s$fShowSet_$cshow
"SPEC/Relvar $fShowSet_$cshowList @ (String, Elem)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                (GHC.Base.String,
                                                                                 Relvar.Elem)
  Data.Set.Base.$fShowSet_$cshowList @ (GHC.Base.String, Relvar.Elem)
                                     $dShow
  = Relvar.$fShowRelvar_$s$fShowSet_$cshowList
"SPEC/Relvar fromList @ Row" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                        Relvar.Row
  Data.Set.Base.fromList @ (Data.Set.Base.Set
                              (GHC.Base.String, Relvar.Elem))
                         $dOrd
  = Relvar.$fLabelOpRelvar_$sfromList
"SPEC/Relvar fromList @ String _" [ALWAYS] forall @ a1
                                                  $dOrd :: GHC.Classes.Ord GHC.Base.String
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a1 $dOrd
  = Relvar.$sfromList @ a1
"SPEC/Relvar readListDefault @ ColOrder" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                     Relvar.ColOrder
  GHC.Read.readListDefault @ Relvar.ColOrder $dRead
  = Relvar.$fReadColOrder_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

